"use strict";
function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
            return typeof obj;
        };
    } else {
        _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
    }
    return _typeof(obj);
}

/*! jQuery v3.3.1 | (c) JS Foundation and other contributors | jquery.org/license */
!function (e, t) {
    "use strict";

    "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && "object" == _typeof(module.exports) ? module.exports = e.document ? t(e, !0) : function (e) {
        if (!e.document) throw new Error("jQuery requires a window with a document");
        return t(e);
    } : t(e);
}("undefined" != typeof window ? window : void 0, function (e, t) {
    "use strict";

    var n = [],
        r = e.document,
        i = Object.getPrototypeOf,
        o = n.slice,
        a = n.concat,
        s = n.push,
        u = n.indexOf,
        l = {},
        c = l.toString,
        f = l.hasOwnProperty,
        p = f.toString,
        d = p.call(Object),
        h = {},
        g = function e(t) {
            return "function" == typeof t && "number" != typeof t.nodeType;
        },
        y = function e(t) {
            return null != t && t === t.window;
        },
        v = {
            type: !0,
            src: !0,
            noModule: !0
        };

    function m(e, t, n) {
        var i,
            o = (t = t || r).createElement("script");
        if (o.text = e, n)
            for (i in v) {
                n[i] && (o[i] = n[i]);
            }
        t.head.appendChild(o).parentNode.removeChild(o);
    }

    function x(e) {
        return null == e ? e + "" : "object" == _typeof(e) || "function" == typeof e ? l[c.call(e)] || "object" : _typeof(e);
    }

    var b = "3.3.1",
        w = function w(e, t) {
            return new w.fn.init(e, t);
        },
        T = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

    w.fn = w.prototype = {
        jquery: "3.3.1",
        constructor: w,
        length: 0,
        toArray: function toArray() {
            return o.call(this);
        },
        get: function get(e) {
            return null == e ? o.call(this) : e < 0 ? this[e + this.length] : this[e];
        },
        pushStack: function pushStack(e) {
            var t = w.merge(this.constructor(), e);
            return t.prevObject = this, t;
        },
        each: function each(e) {
            return w.each(this, e);
        },
        map: function map(e) {
            return this.pushStack(w.map(this, function (t, n) {
                return e.call(t, n, t);
            }));
        },
        slice: function slice() {
            return this.pushStack(o.apply(this, arguments));
        },
        first: function first() {
            return this.eq(0);
        },
        last: function last() {
            return this.eq(-1);
        },
        eq: function eq(e) {
            var t = this.length,
                n = +e + (e < 0 ? t : 0);
            return this.pushStack(n >= 0 && n < t ? [this[n]] : []);
        },
        end: function end() {
            return this.prevObject || this.constructor();
        },
        push: s,
        sort: n.sort,
        splice: n.splice
    }, w.extend = w.fn.extend = function () {
        var e,
            t,
            n,
            r,
            i,
            o,
            a = arguments[0] || {},
            s = 1,
            u = arguments.length,
            l = !1;

        for ("boolean" == typeof a && (l = a, a = arguments[s] || {}, s++), "object" == _typeof(a) || g(a) || (a = {}), s === u && (a = this, s--); s < u; s++) {
            if (null != (e = arguments[s]))
                for (t in e) {
                    n = a[t], a !== (r = e[t]) && (l && r && (w.isPlainObject(r) || (i = Array.isArray(r))) ? (i ? (i = !1, o = n && Array.isArray(n) ? n : []) : o = n && w.isPlainObject(n) ? n : {}, a[t] = w.extend(l, o, r)) : void 0 !== r && (a[t] = r));
                }
        }

        return a;
    }, w.extend({
        expando: "jQuery" + ("3.3.1" + Math.random()).replace(/\D/g, ""),
        isReady: !0,
        error: function error(e) {
            throw new Error(e);
        },
        noop: function noop() {
        },
        isPlainObject: function isPlainObject(e) {
            var t, n;
            return !(!e || "[object Object]" !== c.call(e)) && (!(t = i(e)) || "function" == typeof (n = f.call(t, "constructor") && t.constructor) && p.call(n) === d);
        },
        isEmptyObject: function isEmptyObject(e) {
            var t;

            for (t in e) {
                return !1;
            }

            return !0;
        },
        globalEval: function globalEval(e) {
            m(e);
        },
        each: function each(e, t) {
            var n,
                r = 0;

            if (C(e)) {
                for (n = e.length; r < n; r++) {
                    if (!1 === t.call(e[r], r, e[r])) break;
                }
            } else
                for (r in e) {
                    if (!1 === t.call(e[r], r, e[r])) break;
                }

            return e;
        },
        trim: function trim(e) {
            return null == e ? "" : (e + "").replace(T, "");
        },
        makeArray: function makeArray(e, t) {
            var n = t || [];
            return null != e && (C(Object(e)) ? w.merge(n, "string" == typeof e ? [e] : e) : s.call(n, e)), n;
        },
        inArray: function inArray(e, t, n) {
            return null == t ? -1 : u.call(t, e, n);
        },
        merge: function merge(e, t) {
            for (var n = +t.length, r = 0, i = e.length; r < n; r++) {
                e[i++] = t[r];
            }

            return e.length = i, e;
        },
        grep: function grep(e, t, n) {
            for (var r, i = [], o = 0, a = e.length, s = !n; o < a; o++) {
                (r = !t(e[o], o)) !== s && i.push(e[o]);
            }

            return i;
        },
        map: function map(e, t, n) {
            var r,
                i,
                o = 0,
                s = [];
            if (C(e))
                for (r = e.length; o < r; o++) {
                    null != (i = t(e[o], o, n)) && s.push(i);
                } else
                for (o in e) {
                    null != (i = t(e[o], o, n)) && s.push(i);
                }
            return a.apply([], s);
        },
        guid: 1,
        support: h
    }), "function" == typeof Symbol && (w.fn[Symbol.iterator] = n[Symbol.iterator]), w.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (e, t) {
        l["[object " + t + "]"] = t.toLowerCase();
    });

    function C(e) {
        var t = !!e && "length" in e && e.length,
            n = x(e);
        return !g(e) && !y(e) && ("array" === n || 0 === t || "number" == typeof t && t > 0 && t - 1 in e);
    }

    var E = function (e) {
        var t,
            n,
            r,
            i,
            o,
            a,
            s,
            u,
            l,
            c,
            f,
            p,
            d,
            h,
            g,
            y,
            v,
            m,
            x,
            b = "sizzle" + 1 * new Date(),
            w = e.document,
            T = 0,
            C = 0,
            E = ae(),
            k = ae(),
            S = ae(),
            D = function D(e, t) {
                return e === t && (f = !0), 0;
            },
            N = {}.hasOwnProperty,
            A = [],
            j = A.pop,
            q = A.push,
            L = A.push,
            H = A.slice,
            O = function O(e, t) {
                for (var n = 0, r = e.length; n < r; n++) {
                    if (e[n] === t) return n;
                }

                return -1;
            },
            P = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
            M = "[\\x20\\t\\r\\n\\f]",
            R = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
            I = "\\[" + M + "*(" + R + ")(?:" + M + "*([*^$|!~]?=)" + M + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + R + "))|)" + M + "*\\]",
            W = ":(" + R + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + I + ")*)|.*)\\)|)",
            $ = new RegExp(M + "+", "g"),
            B = new RegExp("^" + M + "+|((?:^|[^\\\\])(?:\\\\.)*)" + M + "+$", "g"),
            F = new RegExp("^" + M + "*," + M + "*"),
            _ = new RegExp("^" + M + "*([>+~]|" + M + ")" + M + "*"),
            z = new RegExp("=" + M + "*([^\\]'\"]*?)" + M + "*\\]", "g"),
            X = new RegExp(W),
            U = new RegExp("^" + R + "$"),
            V = {
                ID: new RegExp("^#(" + R + ")"),
                CLASS: new RegExp("^\\.(" + R + ")"),
                TAG: new RegExp("^(" + R + "|[*])"),
                ATTR: new RegExp("^" + I),
                PSEUDO: new RegExp("^" + W),
                CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + M + "*(even|odd|(([+-]|)(\\d*)n|)" + M + "*(?:([+-]|)" + M + "*(\\d+)|))" + M + "*\\)|)", "i"),
                bool: new RegExp("^(?:" + P + ")$", "i"),
                needsContext: new RegExp("^" + M + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + M + "*((?:-\\d)?\\d*)" + M + "*\\)|)(?=[^-]|$)", "i")
            },
            G = /^(?:input|select|textarea|button)$/i,
            Y = /^h\d$/i,
            Q = /^[^{]+\{\s*\[native \w/,
            J = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
            K = /[+~]/,
            Z = new RegExp("\\\\([\\da-f]{1,6}" + M + "?|(" + M + ")|.)", "ig"),
            ee = function ee(e, t, n) {
                var r = "0x" + t - 65536;
                return r !== r || n ? t : r < 0 ? String.fromCharCode(r + 65536) : String.fromCharCode(r >> 10 | 55296, 1023 & r | 56320);
            },
            te = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
            ne = function ne(e, t) {
                return t ? "\0" === e ? "\uFFFD" : e.slice(0, -1) + "\\" + e.charCodeAt(e.length - 1).toString(16) + " " : "\\" + e;
            },
            re = function re() {
                p();
            },
            ie = me(function (e) {
                return !0 === e.disabled && ("form" in e || "label" in e);
            }, {
                dir: "parentNode",
                next: "legend"
            });

        try {
            L.apply(A = H.call(w.childNodes), w.childNodes), A[w.childNodes.length].nodeType;
        } catch (e) {
            L = {
                apply: A.length ? function (e, t) {
                    q.apply(e, H.call(t));
                } : function (e, t) {
                    var n = e.length,
                        r = 0;

                    while (e[n++] = t[r++]) {
                        ;
                    }

                    e.length = n - 1;
                }
            };
        }

        function oe(e, t, r, i) {
            var o,
                s,
                l,
                c,
                f,
                h,
                v,
                m = t && t.ownerDocument,
                T = t ? t.nodeType : 9;
            if (r = r || [], "string" != typeof e || !e || 1 !== T && 9 !== T && 11 !== T) return r;

            if (!i && ((t ? t.ownerDocument || t : w) !== d && p(t), t = t || d, g)) {
                if (11 !== T && (f = J.exec(e)))
                    if (o = f[1]) {
                        if (9 === T) {
                            if (!(l = t.getElementById(o))) return r;
                            if (l.id === o) return r.push(l), r;
                        } else if (m && (l = m.getElementById(o)) && x(t, l) && l.id === o) return r.push(l), r;
                    } else {
                        if (f[2]) return L.apply(r, t.getElementsByTagName(e)), r;
                        if ((o = f[3]) && n.getElementsByClassName && t.getElementsByClassName) return L.apply(r, t.getElementsByClassName(o)), r;
                    }

                if (n.qsa && !S[e + " "] && (!y || !y.test(e))) {
                    if (1 !== T) m = t, v = e;
                    else if ("object" !== t.nodeName.toLowerCase()) {
                        (c = t.getAttribute("id")) ? c = c.replace(te, ne) : t.setAttribute("id", c = b), s = (h = a(e)).length;

                        while (s--) {
                            h[s] = "#" + c + " " + ve(h[s]);
                        }

                        v = h.join(","), m = K.test(e) && ge(t.parentNode) || t;
                    }
                    if (v) try {
                        return L.apply(r, m.querySelectorAll(v)), r;
                    } catch (e) {
                    } finally {
                        c === b && t.removeAttribute("id");
                    }
                }
            }

            return u(e.replace(B, "$1"), t, r, i);
        }

        function ae() {
            var e = [];

            function t(n, i) {
                return e.push(n + " ") > r.cacheLength && delete t[e.shift()], t[n + " "] = i;
            }

            return t;
        }

        function se(e) {
            return e[b] = !0, e;
        }

        function ue(e) {
            var t = d.createElement("fieldset");

            try {
                return !!e(t);
            } catch (e) {
                return !1;
            } finally {
                t.parentNode && t.parentNode.removeChild(t), t = null;
            }
        }

        function le(e, t) {
            var n = e.split("|"),
                i = n.length;

            while (i--) {
                r.attrHandle[n[i]] = t;
            }
        }

        function ce(e, t) {
            var n = t && e,
                r = n && 1 === e.nodeType && 1 === t.nodeType && e.sourceIndex - t.sourceIndex;
            if (r) return r;
            if (n)
                while (n = n.nextSibling) {
                    if (n === t) return -1;
                }
            return e ? 1 : -1;
        }

        function fe(e) {
            return function (t) {
                return "input" === t.nodeName.toLowerCase() && t.type === e;
            };
        }

        function pe(e) {
            return function (t) {
                var n = t.nodeName.toLowerCase();
                return ("input" === n || "button" === n) && t.type === e;
            };
        }

        function de(e) {
            return function (t) {
                return "form" in t ? t.parentNode && !1 === t.disabled ? "label" in t ? "label" in t.parentNode ? t.parentNode.disabled === e : t.disabled === e : t.isDisabled === e || t.isDisabled !== !e && ie(t) === e : t.disabled === e : "label" in t && t.disabled === e;
            };
        }

        function he(e) {
            return se(function (t) {
                return t = +t, se(function (n, r) {
                    var i,
                        o = e([], n.length, t),
                        a = o.length;

                    while (a--) {
                        n[i = o[a]] && (n[i] = !(r[i] = n[i]));
                    }
                });
            });
        }

        function ge(e) {
            return e && "undefined" != typeof e.getElementsByTagName && e;
        }

        n = oe.support = {}, o = oe.isXML = function (e) {
            var t = e && (e.ownerDocument || e).documentElement;
            return !!t && "HTML" !== t.nodeName;
        }, p = oe.setDocument = function (e) {
            var t,
                i,
                a = e ? e.ownerDocument || e : w;
            return a !== d && 9 === a.nodeType && a.documentElement ? (d = a, h = d.documentElement, g = !o(d), w !== d && (i = d.defaultView) && i.top !== i && (i.addEventListener ? i.addEventListener("unload", re, !1) : i.attachEvent && i.attachEvent("onunload", re)), n.attributes = ue(function (e) {
                return e.className = "i", !e.getAttribute("className");
            }), n.getElementsByTagName = ue(function (e) {
                return e.appendChild(d.createComment("")), !e.getElementsByTagName("*").length;
            }), n.getElementsByClassName = Q.test(d.getElementsByClassName), n.getById = ue(function (e) {
                return h.appendChild(e).id = b, !d.getElementsByName || !d.getElementsByName(b).length;
            }), n.getById ? (r.filter.ID = function (e) {
                var t = e.replace(Z, ee);
                return function (e) {
                    return e.getAttribute("id") === t;
                };
            }, r.find.ID = function (e, t) {
                if ("undefined" != typeof t.getElementById && g) {
                    var n = t.getElementById(e);
                    return n ? [n] : [];
                }
            }) : (r.filter.ID = function (e) {
                var t = e.replace(Z, ee);
                return function (e) {
                    var n = "undefined" != typeof e.getAttributeNode && e.getAttributeNode("id");
                    return n && n.value === t;
                };
            }, r.find.ID = function (e, t) {
                if ("undefined" != typeof t.getElementById && g) {
                    var n,
                        r,
                        i,
                        o = t.getElementById(e);

                    if (o) {
                        if ((n = o.getAttributeNode("id")) && n.value === e) return [o];
                        i = t.getElementsByName(e), r = 0;

                        while (o = i[r++]) {
                            if ((n = o.getAttributeNode("id")) && n.value === e) return [o];
                        }
                    }

                    return [];
                }
            }), r.find.TAG = n.getElementsByTagName ? function (e, t) {
                return "undefined" != typeof t.getElementsByTagName ? t.getElementsByTagName(e) : n.qsa ? t.querySelectorAll(e) : void 0;
            } : function (e, t) {
                var n,
                    r = [],
                    i = 0,
                    o = t.getElementsByTagName(e);

                if ("*" === e) {
                    while (n = o[i++]) {
                        1 === n.nodeType && r.push(n);
                    }

                    return r;
                }

                return o;
            }, r.find.CLASS = n.getElementsByClassName && function (e, t) {
                if ("undefined" != typeof t.getElementsByClassName && g) return t.getElementsByClassName(e);
            }, v = [], y = [], (n.qsa = Q.test(d.querySelectorAll)) && (ue(function (e) {
                h.appendChild(e).innerHTML = "<a id='" + b + "'></a><select id='" + b + "-\r\\' msallowcapture=''><option selected=''></option></select>", e.querySelectorAll("[msallowcapture^='']").length && y.push("[*^$]=" + M + "*(?:''|\"\")"), e.querySelectorAll("[selected]").length || y.push("\\[" + M + "*(?:value|" + P + ")"), e.querySelectorAll("[id~=" + b + "-]").length || y.push("~="), e.querySelectorAll(":checked").length || y.push(":checked"), e.querySelectorAll("a#" + b + "+*").length || y.push(".#.+[+~]");
            }), ue(function (e) {
                e.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
                var t = d.createElement("input");
                t.setAttribute("type", "hidden"), e.appendChild(t).setAttribute("name", "D"), e.querySelectorAll("[name=d]").length && y.push("name" + M + "*[*^$|!~]?="), 2 !== e.querySelectorAll(":enabled").length && y.push(":enabled", ":disabled"), h.appendChild(e).disabled = !0, 2 !== e.querySelectorAll(":disabled").length && y.push(":enabled", ":disabled"), e.querySelectorAll("*,:x"), y.push(",.*:");
            })), (n.matchesSelector = Q.test(m = h.matches || h.webkitMatchesSelector || h.mozMatchesSelector || h.oMatchesSelector || h.msMatchesSelector)) && ue(function (e) {
                n.disconnectedMatch = m.call(e, "*"), m.call(e, "[s!='']:x"), v.push("!=", W);
            }), y = y.length && new RegExp(y.join("|")), v = v.length && new RegExp(v.join("|")), t = Q.test(h.compareDocumentPosition), x = t || Q.test(h.contains) ? function (e, t) {
                var n = 9 === e.nodeType ? e.documentElement : e,
                    r = t && t.parentNode;
                return e === r || !(!r || 1 !== r.nodeType || !(n.contains ? n.contains(r) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(r)));
            } : function (e, t) {
                if (t)
                    while (t = t.parentNode) {
                        if (t === e) return !0;
                    }
                return !1;
            }, D = t ? function (e, t) {
                if (e === t) return f = !0, 0;
                var r = !e.compareDocumentPosition - !t.compareDocumentPosition;
                return r || (1 & (r = (e.ownerDocument || e) === (t.ownerDocument || t) ? e.compareDocumentPosition(t) : 1) || !n.sortDetached && t.compareDocumentPosition(e) === r ? e === d || e.ownerDocument === w && x(w, e) ? -1 : t === d || t.ownerDocument === w && x(w, t) ? 1 : c ? O(c, e) - O(c, t) : 0 : 4 & r ? -1 : 1);
            } : function (e, t) {
                if (e === t) return f = !0, 0;
                var n,
                    r = 0,
                    i = e.parentNode,
                    o = t.parentNode,
                    a = [e],
                    s = [t];
                if (!i || !o) return e === d ? -1 : t === d ? 1 : i ? -1 : o ? 1 : c ? O(c, e) - O(c, t) : 0;
                if (i === o) return ce(e, t);
                n = e;

                while (n = n.parentNode) {
                    a.unshift(n);
                }

                n = t;

                while (n = n.parentNode) {
                    s.unshift(n);
                }

                while (a[r] === s[r]) {
                    r++;
                }

                return r ? ce(a[r], s[r]) : a[r] === w ? -1 : s[r] === w ? 1 : 0;
            }, d) : d;
        }, oe.matches = function (e, t) {
            return oe(e, null, null, t);
        }, oe.matchesSelector = function (e, t) {
            if ((e.ownerDocument || e) !== d && p(e), t = t.replace(z, "='$1']"), n.matchesSelector && g && !S[t + " "] && (!v || !v.test(t)) && (!y || !y.test(t))) try {
                var r = m.call(e, t);
                if (r || n.disconnectedMatch || e.document && 11 !== e.document.nodeType) return r;
            } catch (e) {
            }
            return oe(t, d, null, [e]).length > 0;
        }, oe.contains = function (e, t) {
            return (e.ownerDocument || e) !== d && p(e), x(e, t);
        }, oe.attr = function (e, t) {
            (e.ownerDocument || e) !== d && p(e);
            var i = r.attrHandle[t.toLowerCase()],
                o = i && N.call(r.attrHandle, t.toLowerCase()) ? i(e, t, !g) : void 0;
            return void 0 !== o ? o : n.attributes || !g ? e.getAttribute(t) : (o = e.getAttributeNode(t)) && o.specified ? o.value : null;
        }, oe.escape = function (e) {
            return (e + "").replace(te, ne);
        }, oe.error = function (e) {
            throw new Error("Syntax error, unrecognized expression: " + e);
        }, oe.uniqueSort = function (e) {
            var t,
                r = [],
                i = 0,
                o = 0;

            if (f = !n.detectDuplicates, c = !n.sortStable && e.slice(0), e.sort(D), f) {
                while (t = e[o++]) {
                    t === e[o] && (i = r.push(o));
                }

                while (i--) {
                    e.splice(r[i], 1);
                }
            }

            return c = null, e;
        }, i = oe.getText = function (e) {
            var t,
                n = "",
                r = 0,
                o = e.nodeType;

            if (o) {
                if (1 === o || 9 === o || 11 === o) {
                    if ("string" == typeof e.textContent) return e.textContent;

                    for (e = e.firstChild; e; e = e.nextSibling) {
                        n += i(e);
                    }
                } else if (3 === o || 4 === o) return e.nodeValue;
            } else
                while (t = e[r++]) {
                    n += i(t);
                }

            return n;
        }, (r = oe.selectors = {
            cacheLength: 50,
            createPseudo: se,
            match: V,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: !0
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: !0
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function ATTR(e) {
                    return e[1] = e[1].replace(Z, ee), e[3] = (e[3] || e[4] || e[5] || "").replace(Z, ee), "~=" === e[2] && (e[3] = " " + e[3] + " "), e.slice(0, 4);
                },
                CHILD: function CHILD(e) {
                    return e[1] = e[1].toLowerCase(), "nth" === e[1].slice(0, 3) ? (e[3] || oe.error(e[0]), e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * ("even" === e[3] || "odd" === e[3])), e[5] = +(e[7] + e[8] || "odd" === e[3])) : e[3] && oe.error(e[0]), e;
                },
                PSEUDO: function PSEUDO(e) {
                    var t,
                        n = !e[6] && e[2];
                    return V.CHILD.test(e[0]) ? null : (e[3] ? e[2] = e[4] || e[5] || "" : n && X.test(n) && (t = a(n, !0)) && (t = n.indexOf(")", n.length - t) - n.length) && (e[0] = e[0].slice(0, t), e[2] = n.slice(0, t)), e.slice(0, 3));
                }
            },
            filter: {
                TAG: function TAG(e) {
                    var t = e.replace(Z, ee).toLowerCase();
                    return "*" === e ? function () {
                        return !0;
                    } : function (e) {
                        return e.nodeName && e.nodeName.toLowerCase() === t;
                    };
                },
                CLASS: function CLASS(e) {
                    var t = E[e + " "];
                    return t || (t = new RegExp("(^|" + M + ")" + e + "(" + M + "|$)")) && E(e, function (e) {
                        return t.test("string" == typeof e.className && e.className || "undefined" != typeof e.getAttribute && e.getAttribute("class") || "");
                    });
                },
                ATTR: function ATTR(e, t, n) {
                    return function (r) {
                        var i = oe.attr(r, e);
                        return null == i ? "!=" === t : !t || (i += "", "=" === t ? i === n : "!=" === t ? i !== n : "^=" === t ? n && 0 === i.indexOf(n) : "*=" === t ? n && i.indexOf(n) > -1 : "$=" === t ? n && i.slice(-n.length) === n : "~=" === t ? (" " + i.replace($, " ") + " ").indexOf(n) > -1 : "|=" === t && (i === n || i.slice(0, n.length + 1) === n + "-"));
                    };
                },
                CHILD: function CHILD(e, t, n, r, i) {
                    var o = "nth" !== e.slice(0, 3),
                        a = "last" !== e.slice(-4),
                        s = "of-type" === t;
                    return 1 === r && 0 === i ? function (e) {
                        return !!e.parentNode;
                    } : function (t, n, u) {
                        var l,
                            c,
                            f,
                            p,
                            d,
                            h,
                            g = o !== a ? "nextSibling" : "previousSibling",
                            y = t.parentNode,
                            v = s && t.nodeName.toLowerCase(),
                            m = !u && !s,
                            x = !1;

                        if (y) {
                            if (o) {
                                while (g) {
                                    p = t;

                                    while (p = p[g]) {
                                        if (s ? p.nodeName.toLowerCase() === v : 1 === p.nodeType) return !1;
                                    }

                                    h = g = "only" === e && !h && "nextSibling";
                                }

                                return !0;
                            }

                            if (h = [a ? y.firstChild : y.lastChild], a && m) {
                                x = (d = (l = (c = (f = (p = y)[b] || (p[b] = {}))[p.uniqueID] || (f[p.uniqueID] = {}))[e] || [])[0] === T && l[1]) && l[2], p = d && y.childNodes[d];

                                while (p = ++d && p && p[g] || (x = d = 0) || h.pop()) {
                                    if (1 === p.nodeType && ++x && p === t) {
                                        c[e] = [T, d, x];
                                        break;
                                    }
                                }
                            } else if (m && (x = d = (l = (c = (f = (p = t)[b] || (p[b] = {}))[p.uniqueID] || (f[p.uniqueID] = {}))[e] || [])[0] === T && l[1]), !1 === x)
                                while (p = ++d && p && p[g] || (x = d = 0) || h.pop()) {
                                    if ((s ? p.nodeName.toLowerCase() === v : 1 === p.nodeType) && ++x && (m && ((c = (f = p[b] || (p[b] = {}))[p.uniqueID] || (f[p.uniqueID] = {}))[e] = [T, x]), p === t)) break;
                                }

                            return (x -= i) === r || x % r == 0 && x / r >= 0;
                        }
                    };
                },
                PSEUDO: function PSEUDO(e, t) {
                    var n,
                        i = r.pseudos[e] || r.setFilters[e.toLowerCase()] || oe.error("unsupported pseudo: " + e);
                    return i[b] ? i(t) : i.length > 1 ? (n = [e, e, "", t], r.setFilters.hasOwnProperty(e.toLowerCase()) ? se(function (e, n) {
                        var r,
                            o = i(e, t),
                            a = o.length;

                        while (a--) {
                            e[r = O(e, o[a])] = !(n[r] = o[a]);
                        }
                    }) : function (e) {
                        return i(e, 0, n);
                    }) : i;
                }
            },
            pseudos: {
                not: se(function (e) {
                    var t = [],
                        n = [],
                        r = s(e.replace(B, "$1"));
                    return r[b] ? se(function (e, t, n, i) {
                        var o,
                            a = r(e, null, i, []),
                            s = e.length;

                        while (s--) {
                            (o = a[s]) && (e[s] = !(t[s] = o));
                        }
                    }) : function (e, i, o) {
                        return t[0] = e, r(t, null, o, n), t[0] = null, !n.pop();
                    };
                }),
                has: se(function (e) {
                    return function (t) {
                        return oe(e, t).length > 0;
                    };
                }),
                contains: se(function (e) {
                    return e = e.replace(Z, ee),
                        function (t) {
                            return (t.textContent || t.innerText || i(t)).indexOf(e) > -1;
                        };
                }),
                lang: se(function (e) {
                    return U.test(e || "") || oe.error("unsupported lang: " + e), e = e.replace(Z, ee).toLowerCase(),
                        function (t) {
                            var n;

                            do {
                                if (n = g ? t.lang : t.getAttribute("xml:lang") || t.getAttribute("lang")) return (n = n.toLowerCase()) === e || 0 === n.indexOf(e + "-");
                            } while ((t = t.parentNode) && 1 === t.nodeType);

                            return !1;
                        };
                }),
                target: function target(t) {
                    var n = e.location && e.location.hash;
                    return n && n.slice(1) === t.id;
                },
                root: function root(e) {
                    return e === h;
                },
                focus: function focus(e) {
                    return e === d.activeElement && (!d.hasFocus || d.hasFocus()) && !!(e.type || e.href || ~e.tabIndex);
                },
                enabled: de(!1),
                disabled: de(!0),
                checked: function checked(e) {
                    var t = e.nodeName.toLowerCase();
                    return "input" === t && !!e.checked || "option" === t && !!e.selected;
                },
                selected: function selected(e) {
                    return e.parentNode && e.parentNode.selectedIndex, !0 === e.selected;
                },
                empty: function empty(e) {
                    for (e = e.firstChild; e; e = e.nextSibling) {
                        if (e.nodeType < 6) return !1;
                    }

                    return !0;
                },
                parent: function parent(e) {
                    return !r.pseudos.empty(e);
                },
                header: function header(e) {
                    return Y.test(e.nodeName);
                },
                input: function input(e) {
                    return G.test(e.nodeName);
                },
                button: function button(e) {
                    var t = e.nodeName.toLowerCase();
                    return "input" === t && "button" === e.type || "button" === t;
                },
                text: function text(e) {
                    var t;
                    return "input" === e.nodeName.toLowerCase() && "text" === e.type && (null == (t = e.getAttribute("type")) || "text" === t.toLowerCase());
                },
                first: he(function () {
                    return [0];
                }),
                last: he(function (e, t) {
                    return [t - 1];
                }),
                eq: he(function (e, t, n) {
                    return [n < 0 ? n + t : n];
                }),
                even: he(function (e, t) {
                    for (var n = 0; n < t; n += 2) {
                        e.push(n);
                    }

                    return e;
                }),
                odd: he(function (e, t) {
                    for (var n = 1; n < t; n += 2) {
                        e.push(n);
                    }

                    return e;
                }),
                lt: he(function (e, t, n) {
                    for (var r = n < 0 ? n + t : n; --r >= 0;) {
                        e.push(r);
                    }

                    return e;
                }),
                gt: he(function (e, t, n) {
                    for (var r = n < 0 ? n + t : n; ++r < t;) {
                        e.push(r);
                    }

                    return e;
                })
            }
        }).pseudos.nth = r.pseudos.eq;

        for (t in {
            radio: !0,
            checkbox: !0,
            file: !0,
            password: !0,
            image: !0
        }) {
            r.pseudos[t] = fe(t);
        }

        for (t in {
            submit: !0,
            reset: !0
        }) {
            r.pseudos[t] = pe(t);
        }

        function ye() {
        }

        ye.prototype = r.filters = r.pseudos, r.setFilters = new ye(), a = oe.tokenize = function (e, t) {
            var n,
                i,
                o,
                a,
                s,
                u,
                l,
                c = k[e + " "];
            if (c) return t ? 0 : c.slice(0);
            s = e, u = [], l = r.preFilter;

            while (s) {
                n && !(i = F.exec(s)) || (i && (s = s.slice(i[0].length) || s), u.push(o = [])), n = !1, (i = _.exec(s)) && (n = i.shift(), o.push({
                    value: n,
                    type: i[0].replace(B, " ")
                }), s = s.slice(n.length));

                for (a in r.filter) {
                    !(i = V[a].exec(s)) || l[a] && !(i = l[a](i)) || (n = i.shift(), o.push({
                        value: n,
                        type: a,
                        matches: i
                    }), s = s.slice(n.length));
                }

                if (!n) break;
            }

            return t ? s.length : s ? oe.error(e) : k(e, u).slice(0);
        };

        function ve(e) {
            for (var t = 0, n = e.length, r = ""; t < n; t++) {
                r += e[t].value;
            }

            return r;
        }

        function me(e, t, n) {
            var r = t.dir,
                i = t.next,
                o = i || r,
                a = n && "parentNode" === o,
                s = C++;
            return t.first ? function (t, n, i) {
                while (t = t[r]) {
                    if (1 === t.nodeType || a) return e(t, n, i);
                }

                return !1;
            } : function (t, n, u) {
                var l,
                    c,
                    f,
                    p = [T, s];

                if (u) {
                    while (t = t[r]) {
                        if ((1 === t.nodeType || a) && e(t, n, u)) return !0;
                    }
                } else
                    while (t = t[r]) {
                        if (1 === t.nodeType || a)
                            if (f = t[b] || (t[b] = {}), c = f[t.uniqueID] || (f[t.uniqueID] = {}), i && i === t.nodeName.toLowerCase()) t = t[r] || t;
                            else {
                                if ((l = c[o]) && l[0] === T && l[1] === s) return p[2] = l[2];
                                if (c[o] = p, p[2] = e(t, n, u)) return !0;
                            }
                    }

                return !1;
            };
        }

        function xe(e) {
            return e.length > 1 ? function (t, n, r) {
                var i = e.length;

                while (i--) {
                    if (!e[i](t, n, r)) return !1;
                }

                return !0;
            } : e[0];
        }

        function be(e, t, n) {
            for (var r = 0, i = t.length; r < i; r++) {
                oe(e, t[r], n);
            }

            return n;
        }

        function we(e, t, n, r, i) {
            for (var o, a = [], s = 0, u = e.length, l = null != t; s < u; s++) {
                (o = e[s]) && (n && !n(o, r, i) || (a.push(o), l && t.push(s)));
            }

            return a;
        }

        function Te(e, t, n, r, i, o) {
            return r && !r[b] && (r = Te(r)), i && !i[b] && (i = Te(i, o)), se(function (o, a, s, u) {
                var l,
                    c,
                    f,
                    p = [],
                    d = [],
                    h = a.length,
                    g = o || be(t || "*", s.nodeType ? [s] : s, []),
                    y = !e || !o && t ? g : we(g, p, e, s, u),
                    v = n ? i || (o ? e : h || r) ? [] : a : y;

                if (n && n(y, v, s, u), r) {
                    l = we(v, d), r(l, [], s, u), c = l.length;

                    while (c--) {
                        (f = l[c]) && (v[d[c]] = !(y[d[c]] = f));
                    }
                }

                if (o) {
                    if (i || e) {
                        if (i) {
                            l = [], c = v.length;

                            while (c--) {
                                (f = v[c]) && l.push(y[c] = f);
                            }

                            i(null, v = [], l, u);
                        }

                        c = v.length;

                        while (c--) {
                            (f = v[c]) && (l = i ? O(o, f) : p[c]) > -1 && (o[l] = !(a[l] = f));
                        }
                    }
                } else v = we(v === a ? v.splice(h, v.length) : v), i ? i(null, a, v, u) : L.apply(a, v);
            });
        }

        function Ce(e) {
            for (var t, n, i, o = e.length, a = r.relative[e[0].type], s = a || r.relative[" "], u = a ? 1 : 0, c = me(function (e) {
                return e === t;
            }, s, !0), f = me(function (e) {
                return O(t, e) > -1;
            }, s, !0), p = [function (e, n, r) {
                var i = !a && (r || n !== l) || ((t = n).nodeType ? c(e, n, r) : f(e, n, r));
                return t = null, i;
            }]; u < o; u++) {
                if (n = r.relative[e[u].type]) p = [me(xe(p), n)];
                else {
                    if ((n = r.filter[e[u].type].apply(null, e[u].matches))[b]) {
                        for (i = ++u; i < o; i++) {
                            if (r.relative[e[i].type]) break;
                        }

                        return Te(u > 1 && xe(p), u > 1 && ve(e.slice(0, u - 1).concat({
                            value: " " === e[u - 2].type ? "*" : ""
                        })).replace(B, "$1"), n, u < i && Ce(e.slice(u, i)), i < o && Ce(e = e.slice(i)), i < o && ve(e));
                    }

                    p.push(n);
                }
            }

            return xe(p);
        }

        function Ee(e, t) {
            var n = t.length > 0,
                i = e.length > 0,
                o = function o(_o, a, s, u, c) {
                    var f,
                        h,
                        y,
                        v = 0,
                        m = "0",
                        x = _o && [],
                        b = [],
                        w = l,
                        C = _o || i && r.find.TAG("*", c),
                        E = T += null == w ? 1 : Math.random() || .1,
                        k = C.length;

                    for (c && (l = a === d || a || c); m !== k && null != (f = C[m]); m++) {
                        if (i && f) {
                            h = 0, a || f.ownerDocument === d || (p(f), s = !g);

                            while (y = e[h++]) {
                                if (y(f, a || d, s)) {
                                    u.push(f);
                                    break;
                                }
                            }

                            c && (T = E);
                        }

                        n && ((f = !y && f) && v--, _o && x.push(f));
                    }

                    if (v += m, n && m !== v) {
                        h = 0;

                        while (y = t[h++]) {
                            y(x, b, a, s);
                        }

                        if (_o) {
                            if (v > 0)
                                while (m--) {
                                    x[m] || b[m] || (b[m] = j.call(u));
                                }
                            b = we(b);
                        }

                        L.apply(u, b), c && !_o && b.length > 0 && v + t.length > 1 && oe.uniqueSort(u);
                    }

                    return c && (T = E, l = w), x;
                };

            return n ? se(o) : o;
        }

        return s = oe.compile = function (e, t) {
            var n,
                r = [],
                i = [],
                o = S[e + " "];

            if (!o) {
                t || (t = a(e)), n = t.length;

                while (n--) {
                    (o = Ce(t[n]))[b] ? r.push(o) : i.push(o);
                }

                (o = S(e, Ee(i, r))).selector = e;
            }

            return o;
        }, u = oe.select = function (e, t, n, i) {
            var o,
                u,
                l,
                c,
                f,
                p = "function" == typeof e && e,
                d = !i && a(e = p.selector || e);

            if (n = n || [], 1 === d.length) {
                if ((u = d[0] = d[0].slice(0)).length > 2 && "ID" === (l = u[0]).type && 9 === t.nodeType && g && r.relative[u[1].type]) {
                    if (!(t = (r.find.ID(l.matches[0].replace(Z, ee), t) || [])[0])) return n;
                    p && (t = t.parentNode), e = e.slice(u.shift().value.length);
                }

                o = V.needsContext.test(e) ? 0 : u.length;

                while (o--) {
                    if (l = u[o], r.relative[c = l.type]) break;

                    if ((f = r.find[c]) && (i = f(l.matches[0].replace(Z, ee), K.test(u[0].type) && ge(t.parentNode) || t))) {
                        if (u.splice(o, 1), !(e = i.length && ve(u))) return L.apply(n, i), n;
                        break;
                    }
                }
            }

            return (p || s(e, d))(i, t, !g, n, !t || K.test(e) && ge(t.parentNode) || t), n;
        }, n.sortStable = b.split("").sort(D).join("") === b, n.detectDuplicates = !!f, p(), n.sortDetached = ue(function (e) {
            return 1 & e.compareDocumentPosition(d.createElement("fieldset"));
        }), ue(function (e) {
            return e.innerHTML = "<a href='#'></a>", "#" === e.firstChild.getAttribute("href");
        }) || le("type|href|height|width", function (e, t, n) {
            if (!n) return e.getAttribute(t, "type" === t.toLowerCase() ? 1 : 2);
        }), n.attributes && ue(function (e) {
            return e.innerHTML = "<input/>", e.firstChild.setAttribute("value", ""), "" === e.firstChild.getAttribute("value");
        }) || le("value", function (e, t, n) {
            if (!n && "input" === e.nodeName.toLowerCase()) return e.defaultValue;
        }), ue(function (e) {
            return null == e.getAttribute("disabled");
        }) || le(P, function (e, t, n) {
            var r;
            if (!n) return !0 === e[t] ? t.toLowerCase() : (r = e.getAttributeNode(t)) && r.specified ? r.value : null;
        }), oe;
    }(e);

    w.find = E, w.expr = E.selectors, w.expr[":"] = w.expr.pseudos, w.uniqueSort = w.unique = E.uniqueSort, w.text = E.getText, w.isXMLDoc = E.isXML, w.contains = E.contains, w.escapeSelector = E.escape;

    var k = function k(e, t, n) {
            var r = [],
                i = void 0 !== n;

            while ((e = e[t]) && 9 !== e.nodeType) {
                if (1 === e.nodeType) {
                    if (i && w(e).is(n)) break;
                    r.push(e);
                }
            }

            return r;
        },
        S = function S(e, t) {
            for (var n = []; e; e = e.nextSibling) {
                1 === e.nodeType && e !== t && n.push(e);
            }

            return n;
        },
        D = w.expr.match.needsContext;

    function N(e, t) {
        return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase();
    }

    var A = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

    function j(e, t, n) {
        return g(t) ? w.grep(e, function (e, r) {
            return !!t.call(e, r, e) !== n;
        }) : t.nodeType ? w.grep(e, function (e) {
            return e === t !== n;
        }) : "string" != typeof t ? w.grep(e, function (e) {
            return u.call(t, e) > -1 !== n;
        }) : w.filter(t, e, n);
    }

    w.filter = function (e, t, n) {
        var r = t[0];
        return n && (e = ":not(" + e + ")"), 1 === t.length && 1 === r.nodeType ? w.find.matchesSelector(r, e) ? [r] : [] : w.find.matches(e, w.grep(t, function (e) {
            return 1 === e.nodeType;
        }));
    }, w.fn.extend({
        find: function find(e) {
            var t,
                n,
                r = this.length,
                i = this;
            if ("string" != typeof e) return this.pushStack(w(e).filter(function () {
                for (t = 0; t < r; t++) {
                    if (w.contains(i[t], this)) return !0;
                }
            }));

            for (n = this.pushStack([]), t = 0; t < r; t++) {
                w.find(e, i[t], n);
            }

            return r > 1 ? w.uniqueSort(n) : n;
        },
        filter: function filter(e) {
            return this.pushStack(j(this, e || [], !1));
        },
        not: function not(e) {
            return this.pushStack(j(this, e || [], !0));
        },
        is: function is(e) {
            return !!j(this, "string" == typeof e && D.test(e) ? w(e) : e || [], !1).length;
        }
    });
    var q,
        L = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;
    (w.fn.init = function (e, t, n) {
        var i, o;
        if (!e) return this;

        if (n = n || q, "string" == typeof e) {
            if (!(i = "<" === e[0] && ">" === e[e.length - 1] && e.length >= 3 ? [null, e, null] : L.exec(e)) || !i[1] && t) return !t || t.jquery ? (t || n).find(e) : this.constructor(t).find(e);

            if (i[1]) {
                if (t = t instanceof w ? t[0] : t, w.merge(this, w.parseHTML(i[1], t && t.nodeType ? t.ownerDocument || t : r, !0)), A.test(i[1]) && w.isPlainObject(t))
                    for (i in t) {
                        g(this[i]) ? this[i](t[i]) : this.attr(i, t[i]);
                    }
                return this;
            }

            return (o = r.getElementById(i[2])) && (this[0] = o, this.length = 1), this;
        }

        return e.nodeType ? (this[0] = e, this.length = 1, this) : g(e) ? void 0 !== n.ready ? n.ready(e) : e(w) : w.makeArray(e, this);
    }).prototype = w.fn, q = w(r);
    var H = /^(?:parents|prev(?:Until|All))/,
        O = {
            children: !0,
            contents: !0,
            next: !0,
            prev: !0
        };
    w.fn.extend({
        has: function has(e) {
            var t = w(e, this),
                n = t.length;
            return this.filter(function () {
                for (var e = 0; e < n; e++) {
                    if (w.contains(this, t[e])) return !0;
                }
            });
        },
        closest: function closest(e, t) {
            var n,
                r = 0,
                i = this.length,
                o = [],
                a = "string" != typeof e && w(e);
            if (!D.test(e))
                for (; r < i; r++) {
                    for (n = this[r]; n && n !== t; n = n.parentNode) {
                        if (n.nodeType < 11 && (a ? a.index(n) > -1 : 1 === n.nodeType && w.find.matchesSelector(n, e))) {
                            o.push(n);
                            break;
                        }
                    }
                }
            return this.pushStack(o.length > 1 ? w.uniqueSort(o) : o);
        },
        index: function index(e) {
            return e ? "string" == typeof e ? u.call(w(e), this[0]) : u.call(this, e.jquery ? e[0] : e) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
        },
        add: function add(e, t) {
            return this.pushStack(w.uniqueSort(w.merge(this.get(), w(e, t))));
        },
        addBack: function addBack(e) {
            return this.add(null == e ? this.prevObject : this.prevObject.filter(e));
        }
    });

    function P(e, t) {
        while ((e = e[t]) && 1 !== e.nodeType) {
            ;
        }

        return e;
    }

    w.each({
        parent: function parent(e) {
            var t = e.parentNode;
            return t && 11 !== t.nodeType ? t : null;
        },
        parents: function parents(e) {
            return k(e, "parentNode");
        },
        parentsUntil: function parentsUntil(e, t, n) {
            return k(e, "parentNode", n);
        },
        next: function next(e) {
            return P(e, "nextSibling");
        },
        prev: function prev(e) {
            return P(e, "previousSibling");
        },
        nextAll: function nextAll(e) {
            return k(e, "nextSibling");
        },
        prevAll: function prevAll(e) {
            return k(e, "previousSibling");
        },
        nextUntil: function nextUntil(e, t, n) {
            return k(e, "nextSibling", n);
        },
        prevUntil: function prevUntil(e, t, n) {
            return k(e, "previousSibling", n);
        },
        siblings: function siblings(e) {
            return S((e.parentNode || {}).firstChild, e);
        },
        children: function children(e) {
            return S(e.firstChild);
        },
        contents: function contents(e) {
            return N(e, "iframe") ? e.contentDocument : (N(e, "template") && (e = e.content || e), w.merge([], e.childNodes));
        }
    }, function (e, t) {
        w.fn[e] = function (n, r) {
            var i = w.map(this, t, n);
            return "Until" !== e.slice(-5) && (r = n), r && "string" == typeof r && (i = w.filter(r, i)), this.length > 1 && (O[e] || w.uniqueSort(i), H.test(e) && i.reverse()), this.pushStack(i);
        };
    });
    var M = /[^\x20\t\r\n\f]+/g;

    function R(e) {
        var t = {};
        return w.each(e.match(M) || [], function (e, n) {
            t[n] = !0;
        }), t;
    }

    w.Callbacks = function (e) {
        e = "string" == typeof e ? R(e) : w.extend({}, e);

        var t,
            n,
            r,
            i,
            o = [],
            a = [],
            s = -1,
            u = function u() {
                for (i = i || e.once, r = t = !0; a.length; s = -1) {
                    n = a.shift();

                    while (++s < o.length) {
                        !1 === o[s].apply(n[0], n[1]) && e.stopOnFalse && (s = o.length, n = !1);
                    }
                }

                e.memory || (n = !1), t = !1, i && (o = n ? [] : "");
            },
            l = {
                add: function add() {
                    return o && (n && !t && (s = o.length - 1, a.push(n)), function t(n) {
                        w.each(n, function (n, r) {
                            g(r) ? e.unique && l.has(r) || o.push(r) : r && r.length && "string" !== x(r) && t(r);
                        });
                    }(arguments), n && !t && u()), this;
                },
                remove: function remove() {
                    return w.each(arguments, function (e, t) {
                        var n;

                        while ((n = w.inArray(t, o, n)) > -1) {
                            o.splice(n, 1), n <= s && s--;
                        }
                    }), this;
                },
                has: function has(e) {
                    return e ? w.inArray(e, o) > -1 : o.length > 0;
                },
                empty: function empty() {
                    return o && (o = []), this;
                },
                disable: function disable() {
                    return i = a = [], o = n = "", this;
                },
                disabled: function disabled() {
                    return !o;
                },
                lock: function lock() {
                    return i = a = [], n || t || (o = n = ""), this;
                },
                locked: function locked() {
                    return !!i;
                },
                fireWith: function fireWith(e, n) {
                    return i || (n = [e, (n = n || []).slice ? n.slice() : n], a.push(n), t || u()), this;
                },
                fire: function fire() {
                    return l.fireWith(this, arguments), this;
                },
                fired: function fired() {
                    return !!r;
                }
            };

        return l;
    };

    function I(e) {
        return e;
    }

    function W(e) {
        throw e;
    }

    function $(e, t, n, r) {
        var i;

        try {
            e && g(i = e.promise) ? i.call(e).done(t).fail(n) : e && g(i = e.then) ? i.call(e, t, n) : t.apply(void 0, [e].slice(r));
        } catch (e) {
            n.apply(void 0, [e]);
        }
    }

    w.extend({
        Deferred: function Deferred(t) {
            var n = [
                    ["notify", "progress", w.Callbacks("memory"), w.Callbacks("memory"), 2],
                    ["resolve", "done", w.Callbacks("once memory"), w.Callbacks("once memory"), 0, "resolved"],
                    ["reject", "fail", w.Callbacks("once memory"), w.Callbacks("once memory"), 1, "rejected"]
                ],
                r = "pending",
                i = {
                    state: function state() {
                        return r;
                    },
                    always: function always() {
                        return o.done(arguments).fail(arguments), this;
                    },
                    "catch": function _catch(e) {
                        return i.then(null, e);
                    },
                    pipe: function pipe() {
                        var e = arguments;
                        return w.Deferred(function (t) {
                            w.each(n, function (n, r) {
                                var i = g(e[r[4]]) && e[r[4]];
                                o[r[1]](function () {
                                    var e = i && i.apply(this, arguments);
                                    e && g(e.promise) ? e.promise().progress(t.notify).done(t.resolve).fail(t.reject) : t[r[0] + "With"](this, i ? [e] : arguments);
                                });
                            }), e = null;
                        }).promise();
                    },
                    then: function then(t, r, i) {
                        var o = 0;

                        function a(t, n, r, i) {
                            return function () {
                                var s = this,
                                    u = arguments,
                                    l = function l() {
                                        var e, l;

                                        if (!(t < o)) {
                                            if ((e = r.apply(s, u)) === n.promise()) throw new TypeError("Thenable self-resolution");
                                            l = e && ("object" == _typeof(e) || "function" == typeof e) && e.then, g(l) ? i ? l.call(e, a(o, n, I, i), a(o, n, W, i)) : (o++, l.call(e, a(o, n, I, i), a(o, n, W, i), a(o, n, I, n.notifyWith))) : (r !== I && (s = void 0, u = [e]), (i || n.resolveWith)(s, u));
                                        }
                                    },
                                    c = i ? l : function () {
                                        try {
                                            l();
                                        } catch (e) {
                                            w.Deferred.exceptionHook && w.Deferred.exceptionHook(e, c.stackTrace), t + 1 >= o && (r !== W && (s = void 0, u = [e]), n.rejectWith(s, u));
                                        }
                                    };

                                t ? c() : (w.Deferred.getStackHook && (c.stackTrace = w.Deferred.getStackHook()), e.setTimeout(c));
                            };
                        }

                        return w.Deferred(function (e) {
                            n[0][3].add(a(0, e, g(i) ? i : I, e.notifyWith)), n[1][3].add(a(0, e, g(t) ? t : I)), n[2][3].add(a(0, e, g(r) ? r : W));
                        }).promise();
                    },
                    promise: function promise(e) {
                        return null != e ? w.extend(e, i) : i;
                    }
                },
                o = {};
            return w.each(n, function (e, t) {
                var a = t[2],
                    s = t[5];
                i[t[1]] = a.add, s && a.add(function () {
                    r = s;
                }, n[3 - e][2].disable, n[3 - e][3].disable, n[0][2].lock, n[0][3].lock), a.add(t[3].fire), o[t[0]] = function () {
                    return o[t[0] + "With"](this === o ? void 0 : this, arguments), this;
                }, o[t[0] + "With"] = a.fireWith;
            }), i.promise(o), t && t.call(o, o), o;
        },
        when: function when(e) {
            var t = arguments.length,
                n = t,
                r = Array(n),
                i = o.call(arguments),
                a = w.Deferred(),
                s = function s(e) {
                    return function (n) {
                        r[e] = this, i[e] = arguments.length > 1 ? o.call(arguments) : n, --t || a.resolveWith(r, i);
                    };
                };

            if (t <= 1 && ($(e, a.done(s(n)).resolve, a.reject, !t), "pending" === a.state() || g(i[n] && i[n].then))) return a.then();

            while (n--) {
                $(i[n], s(n), a.reject);
            }

            return a.promise();
        }
    });
    var B = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    w.Deferred.exceptionHook = function (t, n) {
        e.console && e.console.warn && t && B.test(t.name) && e.console.warn("jQuery.Deferred exception: " + t.message, t.stack, n);
    }, w.readyException = function (t) {
        e.setTimeout(function () {
            throw t;
        });
    };
    var F = w.Deferred();
    w.fn.ready = function (e) {
        return F.then(e)["catch"](function (e) {
            w.readyException(e);
        }), this;
    }, w.extend({
        isReady: !1,
        readyWait: 1,
        ready: function ready(e) {
            (!0 === e ? --w.readyWait : w.isReady) || (w.isReady = !0, !0 !== e && --w.readyWait > 0 || F.resolveWith(r, [w]));
        }
    }), w.ready.then = F.then;

    function _() {
        r.removeEventListener("DOMContentLoaded", _), e.removeEventListener("load", _), w.ready();
    }

    "complete" === r.readyState || "loading" !== r.readyState && !r.documentElement.doScroll ? e.setTimeout(w.ready) : (r.addEventListener("DOMContentLoaded", _), e.addEventListener("load", _));

    var z = function z(e, t, n, r, i, o, a) {
            var s = 0,
                u = e.length,
                l = null == n;

            if ("object" === x(n)) {
                i = !0;

                for (s in n) {
                    z(e, t, s, n[s], !0, o, a);
                }
            } else if (void 0 !== r && (i = !0, g(r) || (a = !0), l && (a ? (t.call(e, r), t = null) : (l = t, t = function t(e, _t2, n) {
                return l.call(w(e), n);
            })), t))
                for (; s < u; s++) {
                    t(e[s], n, a ? r : r.call(e[s], s, t(e[s], n)));
                }

            return i ? e : l ? t.call(e) : u ? t(e[0], n) : o;
        },
        X = /^-ms-/,
        U = /-([a-z])/g;

    function V(e, t) {
        return t.toUpperCase();
    }

    function G(e) {
        return e.replace(X, "ms-").replace(U, V);
    }

    var Y = function Y(e) {
        return 1 === e.nodeType || 9 === e.nodeType || !+e.nodeType;
    };

    function Q() {
        this.expando = w.expando + Q.uid++;
    }

    Q.uid = 1, Q.prototype = {
        cache: function cache(e) {
            var t = e[this.expando];
            return t || (t = {}, Y(e) && (e.nodeType ? e[this.expando] = t : Object.defineProperty(e, this.expando, {
                value: t,
                configurable: !0
            }))), t;
        },
        set: function set(e, t, n) {
            var r,
                i = this.cache(e);
            if ("string" == typeof t) i[G(t)] = n;
            else
                for (r in t) {
                    i[G(r)] = t[r];
                }
            return i;
        },
        get: function get(e, t) {
            return void 0 === t ? this.cache(e) : e[this.expando] && e[this.expando][G(t)];
        },
        access: function access(e, t, n) {
            return void 0 === t || t && "string" == typeof t && void 0 === n ? this.get(e, t) : (this.set(e, t, n), void 0 !== n ? n : t);
        },
        remove: function remove(e, t) {
            var n,
                r = e[this.expando];

            if (void 0 !== r) {
                if (void 0 !== t) {
                    n = (t = Array.isArray(t) ? t.map(G) : (t = G(t)) in r ? [t] : t.match(M) || []).length;

                    while (n--) {
                        delete r[t[n]];
                    }
                }

                (void 0 === t || w.isEmptyObject(r)) && (e.nodeType ? e[this.expando] = void 0 : delete e[this.expando]);
            }
        },
        hasData: function hasData(e) {
            var t = e[this.expando];
            return void 0 !== t && !w.isEmptyObject(t);
        }
    };
    var J = new Q(),
        K = new Q(),
        Z = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        ee = /[A-Z]/g;

    function te(e) {
        return "true" === e || "false" !== e && ("null" === e ? null : e === +e + "" ? +e : Z.test(e) ? JSON.parse(e) : e);
    }

    function ne(e, t, n) {
        var r;
        if (void 0 === n && 1 === e.nodeType)
            if (r = "data-" + t.replace(ee, "-$&").toLowerCase(), "string" == typeof (n = e.getAttribute(r))) {
                try {
                    n = te(n);
                } catch (e) {
                }

                K.set(e, t, n);
            } else n = void 0;
        return n;
    }

    w.extend({
        hasData: function hasData(e) {
            return K.hasData(e) || J.hasData(e);
        },
        data: function data(e, t, n) {
            return K.access(e, t, n);
        },
        removeData: function removeData(e, t) {
            K.remove(e, t);
        },
        _data: function _data(e, t, n) {
            return J.access(e, t, n);
        },
        _removeData: function _removeData(e, t) {
            J.remove(e, t);
        }
    }), w.fn.extend({
        data: function data(e, t) {
            var n,
                r,
                i,
                o = this[0],
                a = o && o.attributes;

            if (void 0 === e) {
                if (this.length && (i = K.get(o), 1 === o.nodeType && !J.get(o, "hasDataAttrs"))) {
                    n = a.length;

                    while (n--) {
                        a[n] && 0 === (r = a[n].name).indexOf("data-") && (r = G(r.slice(5)), ne(o, r, i[r]));
                    }

                    J.set(o, "hasDataAttrs", !0);
                }

                return i;
            }

            return "object" == _typeof(e) ? this.each(function () {
                K.set(this, e);
            }) : z(this, function (t) {
                var n;

                if (o && void 0 === t) {
                    if (void 0 !== (n = K.get(o, e))) return n;
                    if (void 0 !== (n = ne(o, e))) return n;
                } else this.each(function () {
                    K.set(this, e, t);
                });
            }, null, t, arguments.length > 1, null, !0);
        },
        removeData: function removeData(e) {
            return this.each(function () {
                K.remove(this, e);
            });
        }
    }), w.extend({
        queue: function queue(e, t, n) {
            var r;
            if (e) return t = (t || "fx") + "queue", r = J.get(e, t), n && (!r || Array.isArray(n) ? r = J.access(e, t, w.makeArray(n)) : r.push(n)), r || [];
        },
        dequeue: function dequeue(e, t) {
            t = t || "fx";

            var n = w.queue(e, t),
                r = n.length,
                i = n.shift(),
                o = w._queueHooks(e, t),
                a = function a() {
                    w.dequeue(e, t);
                };

            "inprogress" === i && (i = n.shift(), r--), i && ("fx" === t && n.unshift("inprogress"), delete o.stop, i.call(e, a, o)), !r && o && o.empty.fire();
        },
        _queueHooks: function _queueHooks(e, t) {
            var n = t + "queueHooks";
            return J.get(e, n) || J.access(e, n, {
                empty: w.Callbacks("once memory").add(function () {
                    J.remove(e, [t + "queue", n]);
                })
            });
        }
    }), w.fn.extend({
        queue: function queue(e, t) {
            var n = 2;
            return "string" != typeof e && (t = e, e = "fx", n--), arguments.length < n ? w.queue(this[0], e) : void 0 === t ? this : this.each(function () {
                var n = w.queue(this, e, t);
                w._queueHooks(this, e), "fx" === e && "inprogress" !== n[0] && w.dequeue(this, e);
            });
        },
        dequeue: function dequeue(e) {
            return this.each(function () {
                w.dequeue(this, e);
            });
        },
        clearQueue: function clearQueue(e) {
            return this.queue(e || "fx", []);
        },
        promise: function promise(e, t) {
            var n,
                r = 1,
                i = w.Deferred(),
                o = this,
                a = this.length,
                s = function s() {
                    --r || i.resolveWith(o, [o]);
                };

            "string" != typeof e && (t = e, e = void 0), e = e || "fx";

            while (a--) {
                (n = J.get(o[a], e + "queueHooks")) && n.empty && (r++, n.empty.add(s));
            }

            return s(), i.promise(t);
        }
    });

    var re = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
        ie = new RegExp("^(?:([+-])=|)(" + re + ")([a-z%]*)$", "i"),
        oe = ["Top", "Right", "Bottom", "Left"],
        ae = function ae(e, t) {
            return "none" === (e = t || e).style.display || "" === e.style.display && w.contains(e.ownerDocument, e) && "none" === w.css(e, "display");
        },
        se = function se(e, t, n, r) {
            var i,
                o,
                a = {};

            for (o in t) {
                a[o] = e.style[o], e.style[o] = t[o];
            }

            i = n.apply(e, r || []);

            for (o in t) {
                e.style[o] = a[o];
            }

            return i;
        };

    function ue(e, t, n, r) {
        var i,
            o,
            a = 20,
            s = r ? function () {
                return r.cur();
            } : function () {
                return w.css(e, t, "");
            },
            u = s(),
            l = n && n[3] || (w.cssNumber[t] ? "" : "px"),
            c = (w.cssNumber[t] || "px" !== l && +u) && ie.exec(w.css(e, t));

        if (c && c[3] !== l) {
            u /= 2, l = l || c[3], c = +u || 1;

            while (a--) {
                w.style(e, t, c + l), (1 - o) * (1 - (o = s() / u || .5)) <= 0 && (a = 0), c /= o;
            }

            c *= 2, w.style(e, t, c + l), n = n || [];
        }

        return n && (c = +c || +u || 0, i = n[1] ? c + (n[1] + 1) * n[2] : +n[2], r && (r.unit = l, r.start = c, r.end = i)), i;
    }

    var le = {};

    function ce(e) {
        var t,
            n = e.ownerDocument,
            r = e.nodeName,
            i = le[r];
        return i || (t = n.body.appendChild(n.createElement(r)), i = w.css(t, "display"), t.parentNode.removeChild(t), "none" === i && (i = "block"), le[r] = i, i);
    }

    function fe(e, t) {
        for (var n, r, i = [], o = 0, a = e.length; o < a; o++) {
            (r = e[o]).style && (n = r.style.display, t ? ("none" === n && (i[o] = J.get(r, "display") || null, i[o] || (r.style.display = "")), "" === r.style.display && ae(r) && (i[o] = ce(r))) : "none" !== n && (i[o] = "none", J.set(r, "display", n)));
        }

        for (o = 0; o < a; o++) {
            null != i[o] && (e[o].style.display = i[o]);
        }

        return e;
    }

    w.fn.extend({
        show: function show() {
            return fe(this, !0);
        },
        hide: function hide() {
            return fe(this);
        },
        toggle: function toggle(e) {
            return "boolean" == typeof e ? e ? this.show() : this.hide() : this.each(function () {
                ae(this) ? w(this).show() : w(this).hide();
            });
        }
    });
    var pe = /^(?:checkbox|radio)$/i,
        de = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i,
        he = /^$|^module$|\/(?:java|ecma)script/i,
        ge = {
            option: [1, "<select multiple='multiple'>", "</select>"],
            thead: [1, "<table>", "</table>"],
            col: [2, "<table><colgroup>", "</colgroup></table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
            _default: [0, "", ""]
        };
    ge.optgroup = ge.option, ge.tbody = ge.tfoot = ge.colgroup = ge.caption = ge.thead, ge.th = ge.td;

    function ye(e, t) {
        var n;
        return n = "undefined" != typeof e.getElementsByTagName ? e.getElementsByTagName(t || "*") : "undefined" != typeof e.querySelectorAll ? e.querySelectorAll(t || "*") : [], void 0 === t || t && N(e, t) ? w.merge([e], n) : n;
    }

    function ve(e, t) {
        for (var n = 0, r = e.length; n < r; n++) {
            J.set(e[n], "globalEval", !t || J.get(t[n], "globalEval"));
        }
    }

    var me = /<|&#?\w+;/;

    function xe(e, t, n, r, i) {
        for (var o, a, s, u, l, c, f = t.createDocumentFragment(), p = [], d = 0, h = e.length; d < h; d++) {
            if ((o = e[d]) || 0 === o)
                if ("object" === x(o)) w.merge(p, o.nodeType ? [o] : o);
                else if (me.test(o)) {
                    a = a || f.appendChild(t.createElement("div")), s = (de.exec(o) || ["", ""])[1].toLowerCase(), u = ge[s] || ge._default, a.innerHTML = u[1] + w.htmlPrefilter(o) + u[2], c = u[0];

                    while (c--) {
                        a = a.lastChild;
                    }

                    w.merge(p, a.childNodes), (a = f.firstChild).textContent = "";
                } else p.push(t.createTextNode(o));
        }

        f.textContent = "", d = 0;

        while (o = p[d++]) {
            if (r && w.inArray(o, r) > -1) i && i.push(o);
            else if (l = w.contains(o.ownerDocument, o), a = ye(f.appendChild(o), "script"), l && ve(a), n) {
                c = 0;

                while (o = a[c++]) {
                    he.test(o.type || "") && n.push(o);
                }
            }
        }

        return f;
    }

    !function () {
        var e = r.createDocumentFragment().appendChild(r.createElement("div")),
            t = r.createElement("input");
        t.setAttribute("type", "radio"), t.setAttribute("checked", "checked"), t.setAttribute("name", "t"), e.appendChild(t), h.checkClone = e.cloneNode(!0).cloneNode(!0).lastChild.checked, e.innerHTML = "<textarea>x</textarea>", h.noCloneChecked = !!e.cloneNode(!0).lastChild.defaultValue;
    }();
    var be = r.documentElement,
        we = /^key/,
        Te = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
        Ce = /^([^.]*)(?:\.(.+)|)/;

    function Ee() {
        return !0;
    }

    function ke() {
        return !1;
    }

    function Se() {
        try {
            return r.activeElement;
        } catch (e) {
        }
    }

    function De(e, t, n, r, i, o) {
        var a, s;

        if ("object" == _typeof(t)) {
            "string" != typeof n && (r = r || n, n = void 0);

            for (s in t) {
                De(e, s, n, r, t[s], o);
            }

            return e;
        }

        if (null == r && null == i ? (i = n, r = n = void 0) : null == i && ("string" == typeof n ? (i = r, r = void 0) : (i = r, r = n, n = void 0)), !1 === i) i = ke;
        else if (!i) return e;
        return 1 === o && (a = i, (i = function i(e) {
            return w().off(e), a.apply(this, arguments);
        }).guid = a.guid || (a.guid = w.guid++)), e.each(function () {
            w.event.add(this, t, i, r, n);
        });
    }

    w.event = {
        global: {},
        add: function add(e, t, n, r, i) {
            var o,
                a,
                s,
                u,
                l,
                c,
                f,
                p,
                d,
                h,
                g,
                y = J.get(e);

            if (y) {
                n.handler && (n = (o = n).handler, i = o.selector), i && w.find.matchesSelector(be, i), n.guid || (n.guid = w.guid++), (u = y.events) || (u = y.events = {}), (a = y.handle) || (a = y.handle = function (t) {
                    return "undefined" != typeof w && w.event.triggered !== t.type ? w.event.dispatch.apply(e, arguments) : void 0;
                }), l = (t = (t || "").match(M) || [""]).length;

                while (l--) {
                    d = g = (s = Ce.exec(t[l]) || [])[1], h = (s[2] || "").split(".").sort(), d && (f = w.event.special[d] || {}, d = (i ? f.delegateType : f.bindType) || d, f = w.event.special[d] || {}, c = w.extend({
                        type: d,
                        origType: g,
                        data: r,
                        handler: n,
                        guid: n.guid,
                        selector: i,
                        needsContext: i && w.expr.match.needsContext.test(i),
                        namespace: h.join(".")
                    }, o), (p = u[d]) || ((p = u[d] = []).delegateCount = 0, f.setup && !1 !== f.setup.call(e, r, h, a) || e.addEventListener && e.addEventListener(d, a)), f.add && (f.add.call(e, c), c.handler.guid || (c.handler.guid = n.guid)), i ? p.splice(p.delegateCount++, 0, c) : p.push(c), w.event.global[d] = !0);
                }
            }
        },
        remove: function remove(e, t, n, r, i) {
            var o,
                a,
                s,
                u,
                l,
                c,
                f,
                p,
                d,
                h,
                g,
                y = J.hasData(e) && J.get(e);

            if (y && (u = y.events)) {
                l = (t = (t || "").match(M) || [""]).length;

                while (l--) {
                    if (s = Ce.exec(t[l]) || [], d = g = s[1], h = (s[2] || "").split(".").sort(), d) {
                        f = w.event.special[d] || {}, p = u[d = (r ? f.delegateType : f.bindType) || d] || [], s = s[2] && new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)"), a = o = p.length;

                        while (o--) {
                            c = p[o], !i && g !== c.origType || n && n.guid !== c.guid || s && !s.test(c.namespace) || r && r !== c.selector && ("**" !== r || !c.selector) || (p.splice(o, 1), c.selector && p.delegateCount--, f.remove && f.remove.call(e, c));
                        }

                        a && !p.length && (f.teardown && !1 !== f.teardown.call(e, h, y.handle) || w.removeEvent(e, d, y.handle), delete u[d]);
                    } else
                        for (d in u) {
                            w.event.remove(e, d + t[l], n, r, !0);
                        }
                }

                w.isEmptyObject(u) && J.remove(e, "handle events");
            }
        },
        dispatch: function dispatch(e) {
            var t = w.event.fix(e),
                n,
                r,
                i,
                o,
                a,
                s,
                u = new Array(arguments.length),
                l = (J.get(this, "events") || {})[t.type] || [],
                c = w.event.special[t.type] || {};

            for (u[0] = t, n = 1; n < arguments.length; n++) {
                u[n] = arguments[n];
            }

            if (t.delegateTarget = this, !c.preDispatch || !1 !== c.preDispatch.call(this, t)) {
                s = w.event.handlers.call(this, t, l), n = 0;

                while ((o = s[n++]) && !t.isPropagationStopped()) {
                    t.currentTarget = o.elem, r = 0;

                    while ((a = o.handlers[r++]) && !t.isImmediatePropagationStopped()) {
                        t.rnamespace && !t.rnamespace.test(a.namespace) || (t.handleObj = a, t.data = a.data, void 0 !== (i = ((w.event.special[a.origType] || {}).handle || a.handler).apply(o.elem, u)) && !1 === (t.result = i) && (t.preventDefault(), t.stopPropagation()));
                    }
                }

                return c.postDispatch && c.postDispatch.call(this, t), t.result;
            }
        },
        handlers: function handlers(e, t) {
            var n,
                r,
                i,
                o,
                a,
                s = [],
                u = t.delegateCount,
                l = e.target;
            if (u && l.nodeType && !("click" === e.type && e.button >= 1))
                for (; l !== this; l = l.parentNode || this) {
                    if (1 === l.nodeType && ("click" !== e.type || !0 !== l.disabled)) {
                        for (o = [], a = {}, n = 0; n < u; n++) {
                            void 0 === a[i = (r = t[n]).selector + " "] && (a[i] = r.needsContext ? w(i, this).index(l) > -1 : w.find(i, this, null, [l]).length), a[i] && o.push(r);
                        }

                        o.length && s.push({
                            elem: l,
                            handlers: o
                        });
                    }
                }
            return l = this, u < t.length && s.push({
                elem: l,
                handlers: t.slice(u)
            }), s;
        },
        addProp: function addProp(e, t) {
            Object.defineProperty(w.Event.prototype, e, {
                enumerable: !0,
                configurable: !0,
                get: g(t) ? function () {
                    if (this.originalEvent) return t(this.originalEvent);
                } : function () {
                    if (this.originalEvent) return this.originalEvent[e];
                },
                set: function set(t) {
                    Object.defineProperty(this, e, {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: t
                    });
                }
            });
        },
        fix: function fix(e) {
            return e[w.expando] ? e : new w.Event(e);
        },
        special: {
            load: {
                noBubble: !0
            },
            focus: {
                trigger: function trigger() {
                    if (this !== Se() && this.focus) return this.focus(), !1;
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function trigger() {
                    if (this === Se() && this.blur) return this.blur(), !1;
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function trigger() {
                    if ("checkbox" === this.type && this.click && N(this, "input")) return this.click(), !1;
                },
                _default: function _default(e) {
                    return N(e.target, "a");
                }
            },
            beforeunload: {
                postDispatch: function postDispatch(e) {
                    void 0 !== e.result && e.originalEvent && (e.originalEvent.returnValue = e.result);
                }
            }
        }
    }, w.removeEvent = function (e, t, n) {
        e.removeEventListener && e.removeEventListener(t, n);
    }, w.Event = function (e, t) {
        if (!(this instanceof w.Event)) return new w.Event(e, t);
        e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && !1 === e.returnValue ? Ee : ke, this.target = e.target && 3 === e.target.nodeType ? e.target.parentNode : e.target, this.currentTarget = e.currentTarget, this.relatedTarget = e.relatedTarget) : this.type = e, t && w.extend(this, t), this.timeStamp = e && e.timeStamp || Date.now(), this[w.expando] = !0;
    }, w.Event.prototype = {
        constructor: w.Event,
        isDefaultPrevented: ke,
        isPropagationStopped: ke,
        isImmediatePropagationStopped: ke,
        isSimulated: !1,
        preventDefault: function preventDefault() {
            var e = this.originalEvent;
            this.isDefaultPrevented = Ee, e && !this.isSimulated && e.preventDefault();
        },
        stopPropagation: function stopPropagation() {
            var e = this.originalEvent;
            this.isPropagationStopped = Ee, e && !this.isSimulated && e.stopPropagation();
        },
        stopImmediatePropagation: function stopImmediatePropagation() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = Ee, e && !this.isSimulated && e.stopImmediatePropagation(), this.stopPropagation();
        }
    }, w.each({
        altKey: !0,
        bubbles: !0,
        cancelable: !0,
        changedTouches: !0,
        ctrlKey: !0,
        detail: !0,
        eventPhase: !0,
        metaKey: !0,
        pageX: !0,
        pageY: !0,
        shiftKey: !0,
        view: !0,
        "char": !0,
        charCode: !0,
        key: !0,
        keyCode: !0,
        button: !0,
        buttons: !0,
        clientX: !0,
        clientY: !0,
        offsetX: !0,
        offsetY: !0,
        pointerId: !0,
        pointerType: !0,
        screenX: !0,
        screenY: !0,
        targetTouches: !0,
        toElement: !0,
        touches: !0,
        which: function which(e) {
            var t = e.button;
            return null == e.which && we.test(e.type) ? null != e.charCode ? e.charCode : e.keyCode : !e.which && void 0 !== t && Te.test(e.type) ? 1 & t ? 1 : 2 & t ? 3 : 4 & t ? 2 : 0 : e.which;
        }
    }, w.event.addProp), w.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function (e, t) {
        w.event.special[e] = {
            delegateType: t,
            bindType: t,
            handle: function handle(e) {
                var n,
                    r = this,
                    i = e.relatedTarget,
                    o = e.handleObj;
                return i && (i === r || w.contains(r, i)) || (e.type = o.origType, n = o.handler.apply(this, arguments), e.type = t), n;
            }
        };
    }), w.fn.extend({
        on: function on(e, t, n, r) {
            return De(this, e, t, n, r);
        },
        one: function one(e, t, n, r) {
            return De(this, e, t, n, r, 1);
        },
        off: function off(e, t, n) {
            var r, i;
            if (e && e.preventDefault && e.handleObj) return r = e.handleObj, w(e.delegateTarget).off(r.namespace ? r.origType + "." + r.namespace : r.origType, r.selector, r.handler), this;

            if ("object" == _typeof(e)) {
                for (i in e) {
                    this.off(i, t, e[i]);
                }

                return this;
            }

            return !1 !== t && "function" != typeof t || (n = t, t = void 0), !1 === n && (n = ke), this.each(function () {
                w.event.remove(this, e, n, t);
            });
        }
    });
    var Ne = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
        Ae = /<script|<style|<link/i,
        je = /checked\s*(?:[^=]|=\s*.checked.)/i,
        qe = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

    function Le(e, t) {
        return N(e, "table") && N(11 !== t.nodeType ? t : t.firstChild, "tr") ? w(e).children("tbody")[0] || e : e;
    }

    function He(e) {
        return e.type = (null !== e.getAttribute("type")) + "/" + e.type, e;
    }

    function Oe(e) {
        return "true/" === (e.type || "").slice(0, 5) ? e.type = e.type.slice(5) : e.removeAttribute("type"), e;
    }

    function Pe(e, t) {
        var n, r, i, o, a, s, u, l;

        if (1 === t.nodeType) {
            if (J.hasData(e) && (o = J.access(e), a = J.set(t, o), l = o.events)) {
                delete a.handle, a.events = {};

                for (i in l) {
                    for (n = 0, r = l[i].length; n < r; n++) {
                        w.event.add(t, i, l[i][n]);
                    }
                }
            }

            K.hasData(e) && (s = K.access(e), u = w.extend({}, s), K.set(t, u));
        }
    }

    function Me(e, t) {
        var n = t.nodeName.toLowerCase();
        "input" === n && pe.test(e.type) ? t.checked = e.checked : "input" !== n && "textarea" !== n || (t.defaultValue = e.defaultValue);
    }

    function Re(e, t, n, r) {
        t = a.apply([], t);
        var i,
            o,
            s,
            u,
            l,
            c,
            f = 0,
            p = e.length,
            d = p - 1,
            y = t[0],
            v = g(y);
        if (v || p > 1 && "string" == typeof y && !h.checkClone && je.test(y)) return e.each(function (i) {
            var o = e.eq(i);
            v && (t[0] = y.call(this, i, o.html())), Re(o, t, n, r);
        });

        if (p && (i = xe(t, e[0].ownerDocument, !1, e, r), o = i.firstChild, 1 === i.childNodes.length && (i = o), o || r)) {
            for (u = (s = w.map(ye(i, "script"), He)).length; f < p; f++) {
                l = i, f !== d && (l = w.clone(l, !0, !0), u && w.merge(s, ye(l, "script"))), n.call(e[f], l, f);
            }

            if (u)
                for (c = s[s.length - 1].ownerDocument, w.map(s, Oe), f = 0; f < u; f++) {
                    l = s[f], he.test(l.type || "") && !J.access(l, "globalEval") && w.contains(c, l) && (l.src && "module" !== (l.type || "").toLowerCase() ? w._evalUrl && w._evalUrl(l.src) : m(l.textContent.replace(qe, ""), c, l));
                }
        }

        return e;
    }

    function Ie(e, t, n) {
        for (var r, i = t ? w.filter(t, e) : e, o = 0; null != (r = i[o]); o++) {
            n || 1 !== r.nodeType || w.cleanData(ye(r)), r.parentNode && (n && w.contains(r.ownerDocument, r) && ve(ye(r, "script")), r.parentNode.removeChild(r));
        }

        return e;
    }

    w.extend({
        htmlPrefilter: function htmlPrefilter(e) {
            return e.replace(Ne, "<$1></$2>");
        },
        clone: function clone(e, t, n) {
            var r,
                i,
                o,
                a,
                s = e.cloneNode(!0),
                u = w.contains(e.ownerDocument, e);
            if (!(h.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || w.isXMLDoc(e)))
                for (a = ye(s), r = 0, i = (o = ye(e)).length; r < i; r++) {
                    Me(o[r], a[r]);
                }
            if (t)
                if (n)
                    for (o = o || ye(e), a = a || ye(s), r = 0, i = o.length; r < i; r++) {
                        Pe(o[r], a[r]);
                    } else Pe(e, s);
            return (a = ye(s, "script")).length > 0 && ve(a, !u && ye(e, "script")), s;
        },
        cleanData: function cleanData(e) {
            for (var t, n, r, i = w.event.special, o = 0; void 0 !== (n = e[o]); o++) {
                if (Y(n)) {
                    if (t = n[J.expando]) {
                        if (t.events)
                            for (r in t.events) {
                                i[r] ? w.event.remove(n, r) : w.removeEvent(n, r, t.handle);
                            }
                        n[J.expando] = void 0;
                    }

                    n[K.expando] && (n[K.expando] = void 0);
                }
            }
        }
    }), w.fn.extend({
        detach: function detach(e) {
            return Ie(this, e, !0);
        },
        remove: function remove(e) {
            return Ie(this, e);
        },
        text: function text(e) {
            return z(this, function (e) {
                return void 0 === e ? w.text(this) : this.empty().each(function () {
                    1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = e);
                });
            }, null, e, arguments.length);
        },
        append: function append() {
            return Re(this, arguments, function (e) {
                1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || Le(this, e).appendChild(e);
            });
        },
        prepend: function prepend() {
            return Re(this, arguments, function (e) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var t = Le(this, e);
                    t.insertBefore(e, t.firstChild);
                }
            });
        },
        before: function before() {
            return Re(this, arguments, function (e) {
                this.parentNode && this.parentNode.insertBefore(e, this);
            });
        },
        after: function after() {
            return Re(this, arguments, function (e) {
                this.parentNode && this.parentNode.insertBefore(e, this.nextSibling);
            });
        },
        empty: function empty() {
            for (var e, t = 0; null != (e = this[t]); t++) {
                1 === e.nodeType && (w.cleanData(ye(e, !1)), e.textContent = "");
            }

            return this;
        },
        clone: function clone(e, t) {
            return e = null != e && e, t = null == t ? e : t, this.map(function () {
                return w.clone(this, e, t);
            });
        },
        html: function html(e) {
            return z(this, function (e) {
                var t = this[0] || {},
                    n = 0,
                    r = this.length;
                if (void 0 === e && 1 === t.nodeType) return t.innerHTML;

                if ("string" == typeof e && !Ae.test(e) && !ge[(de.exec(e) || ["", ""])[1].toLowerCase()]) {
                    e = w.htmlPrefilter(e);

                    try {
                        for (; n < r; n++) {
                            1 === (t = this[n] || {}).nodeType && (w.cleanData(ye(t, !1)), t.innerHTML = e);
                        }

                        t = 0;
                    } catch (e) {
                    }
                }

                t && this.empty().append(e);
            }, null, e, arguments.length);
        },
        replaceWith: function replaceWith() {
            var e = [];
            return Re(this, arguments, function (t) {
                var n = this.parentNode;
                w.inArray(this, e) < 0 && (w.cleanData(ye(this)), n && n.replaceChild(t, this));
            }, e);
        }
    }), w.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function (e, t) {
        w.fn[e] = function (e) {
            for (var n, r = [], i = w(e), o = i.length - 1, a = 0; a <= o; a++) {
                n = a === o ? this : this.clone(!0), w(i[a])[t](n), s.apply(r, n.get());
            }

            return this.pushStack(r);
        };
    });

    var We = new RegExp("^(" + re + ")(?!px)[a-z%]+$", "i"),
        $e = function $e(t) {
            var n = t.ownerDocument.defaultView;
            return n && n.opener || (n = e), n.getComputedStyle(t);
        },
        Be = new RegExp(oe.join("|"), "i");

    !function () {
        function t() {
            if (c) {
                l.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0", c.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%", be.appendChild(l).appendChild(c);
                var t = e.getComputedStyle(c);
                i = "1%" !== t.top, u = 12 === n(t.marginLeft), c.style.right = "60%", s = 36 === n(t.right), o = 36 === n(t.width), c.style.position = "absolute", a = 36 === c.offsetWidth || "absolute", be.removeChild(l), c = null;
            }
        }

        function n(e) {
            return Math.round(parseFloat(e));
        }

        var i,
            o,
            a,
            s,
            u,
            l = r.createElement("div"),
            c = r.createElement("div");
        c.style && (c.style.backgroundClip = "content-box", c.cloneNode(!0).style.backgroundClip = "", h.clearCloneStyle = "content-box" === c.style.backgroundClip, w.extend(h, {
            boxSizingReliable: function boxSizingReliable() {
                return t(), o;
            },
            pixelBoxStyles: function pixelBoxStyles() {
                return t(), s;
            },
            pixelPosition: function pixelPosition() {
                return t(), i;
            },
            reliableMarginLeft: function reliableMarginLeft() {
                return t(), u;
            },
            scrollboxSize: function scrollboxSize() {
                return t(), a;
            }
        }));
    }();

    function Fe(e, t, n) {
        var r,
            i,
            o,
            a,
            s = e.style;
        return (n = n || $e(e)) && ("" !== (a = n.getPropertyValue(t) || n[t]) || w.contains(e.ownerDocument, e) || (a = w.style(e, t)), !h.pixelBoxStyles() && We.test(a) && Be.test(t) && (r = s.width, i = s.minWidth, o = s.maxWidth, s.minWidth = s.maxWidth = s.width = a, a = n.width, s.width = r, s.minWidth = i, s.maxWidth = o)), void 0 !== a ? a + "" : a;
    }

    function _e(e, t) {
        return {
            get: function get() {
                if (!e()) return (this.get = t).apply(this, arguments);
                delete this.get;
            }
        };
    }

    var ze = /^(none|table(?!-c[ea]).+)/,
        Xe = /^--/,
        Ue = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
        },
        Ve = {
            letterSpacing: "0",
            fontWeight: "400"
        },
        Ge = ["Webkit", "Moz", "ms"],
        Ye = r.createElement("div").style;

    function Qe(e) {
        if (e in Ye) return e;
        var t = e[0].toUpperCase() + e.slice(1),
            n = Ge.length;

        while (n--) {
            if ((e = Ge[n] + t) in Ye) return e;
        }
    }

    function Je(e) {
        var t = w.cssProps[e];
        return t || (t = w.cssProps[e] = Qe(e) || e), t;
    }

    function Ke(e, t, n) {
        var r = ie.exec(t);
        return r ? Math.max(0, r[2] - (n || 0)) + (r[3] || "px") : t;
    }

    function Ze(e, t, n, r, i, o) {
        var a = "width" === t ? 1 : 0,
            s = 0,
            u = 0;
        if (n === (r ? "border" : "content")) return 0;

        for (; a < 4; a += 2) {
            "margin" === n && (u += w.css(e, n + oe[a], !0, i)), r ? ("content" === n && (u -= w.css(e, "padding" + oe[a], !0, i)), "margin" !== n && (u -= w.css(e, "border" + oe[a] + "Width", !0, i))) : (u += w.css(e, "padding" + oe[a], !0, i), "padding" !== n ? u += w.css(e, "border" + oe[a] + "Width", !0, i) : s += w.css(e, "border" + oe[a] + "Width", !0, i));
        }

        return !r && o >= 0 && (u += Math.max(0, Math.ceil(e["offset" + t[0].toUpperCase() + t.slice(1)] - o - u - s - .5))), u;
    }

    function et(e, t, n) {
        var r = $e(e),
            i = Fe(e, t, r),
            o = "border-box" === w.css(e, "boxSizing", !1, r),
            a = o;

        if (We.test(i)) {
            if (!n) return i;
            i = "auto";
        }

        return a = a && (h.boxSizingReliable() || i === e.style[t]), ("auto" === i || !parseFloat(i) && "inline" === w.css(e, "display", !1, r)) && (i = e["offset" + t[0].toUpperCase() + t.slice(1)], a = !0), (i = parseFloat(i) || 0) + Ze(e, t, n || (o ? "border" : "content"), a, r, i) + "px";
    }

    w.extend({
        cssHooks: {
            opacity: {
                get: function get(e, t) {
                    if (t) {
                        var n = Fe(e, "opacity");
                        return "" === n ? "1" : n;
                    }
                }
            }
        },
        cssNumber: {
            animationIterationCount: !0,
            columnCount: !0,
            fillOpacity: !0,
            flexGrow: !0,
            flexShrink: !0,
            fontWeight: !0,
            lineHeight: !0,
            opacity: !0,
            order: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: {},
        style: function style(e, t, n, r) {
            if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {
                var i,
                    o,
                    a,
                    s = G(t),
                    u = Xe.test(t),
                    l = e.style;
                if (u || (t = Je(s)), a = w.cssHooks[t] || w.cssHooks[s], void 0 === n) return a && "get" in a && void 0 !== (i = a.get(e, !1, r)) ? i : l[t];
                "string" == (o = _typeof(n)) && (i = ie.exec(n)) && i[1] && (n = ue(e, t, i), o = "number"), null != n && n === n && ("number" === o && (n += i && i[3] || (w.cssNumber[s] ? "" : "px")), h.clearCloneStyle || "" !== n || 0 !== t.indexOf("background") || (l[t] = "inherit"), a && "set" in a && void 0 === (n = a.set(e, n, r)) || (u ? l.setProperty(t, n) : l[t] = n));
            }
        },
        css: function css(e, t, n, r) {
            var i,
                o,
                a,
                s = G(t);
            return Xe.test(t) || (t = Je(s)), (a = w.cssHooks[t] || w.cssHooks[s]) && "get" in a && (i = a.get(e, !0, n)), void 0 === i && (i = Fe(e, t, r)), "normal" === i && t in Ve && (i = Ve[t]), "" === n || n ? (o = parseFloat(i), !0 === n || isFinite(o) ? o || 0 : i) : i;
        }
    }), w.each(["height", "width"], function (e, t) {
        w.cssHooks[t] = {
            get: function get(e, n, r) {
                if (n) return !ze.test(w.css(e, "display")) || e.getClientRects().length && e.getBoundingClientRect().width ? et(e, t, r) : se(e, Ue, function () {
                    return et(e, t, r);
                });
            },
            set: function set(e, n, r) {
                var i,
                    o = $e(e),
                    a = "border-box" === w.css(e, "boxSizing", !1, o),
                    s = r && Ze(e, t, r, a, o);
                return a && h.scrollboxSize() === o.position && (s -= Math.ceil(e["offset" + t[0].toUpperCase() + t.slice(1)] - parseFloat(o[t]) - Ze(e, t, "border", !1, o) - .5)), s && (i = ie.exec(n)) && "px" !== (i[3] || "px") && (e.style[t] = n, n = w.css(e, t)), Ke(e, n, s);
            }
        };
    }), w.cssHooks.marginLeft = _e(h.reliableMarginLeft, function (e, t) {
        if (t) return (parseFloat(Fe(e, "marginLeft")) || e.getBoundingClientRect().left - se(e, {
            marginLeft: 0
        }, function () {
            return e.getBoundingClientRect().left;
        })) + "px";
    }), w.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function (e, t) {
        w.cssHooks[e + t] = {
            expand: function expand(n) {
                for (var r = 0, i = {}, o = "string" == typeof n ? n.split(" ") : [n]; r < 4; r++) {
                    i[e + oe[r] + t] = o[r] || o[r - 2] || o[0];
                }

                return i;
            }
        }, "margin" !== e && (w.cssHooks[e + t].set = Ke);
    }), w.fn.extend({
        css: function css(e, t) {
            return z(this, function (e, t, n) {
                var r,
                    i,
                    o = {},
                    a = 0;

                if (Array.isArray(t)) {
                    for (r = $e(e), i = t.length; a < i; a++) {
                        o[t[a]] = w.css(e, t[a], !1, r);
                    }

                    return o;
                }

                return void 0 !== n ? w.style(e, t, n) : w.css(e, t);
            }, e, t, arguments.length > 1);
        }
    });

    function tt(e, t, n, r, i) {
        return new tt.prototype.init(e, t, n, r, i);
    }

    w.Tween = tt, tt.prototype = {
        constructor: tt,
        init: function init(e, t, n, r, i, o) {
            this.elem = e, this.prop = n, this.easing = i || w.easing._default, this.options = t, this.start = this.now = this.cur(), this.end = r, this.unit = o || (w.cssNumber[n] ? "" : "px");
        },
        cur: function cur() {
            var e = tt.propHooks[this.prop];
            return e && e.get ? e.get(this) : tt.propHooks._default.get(this);
        },
        run: function run(e) {
            var t,
                n = tt.propHooks[this.prop];
            return this.options.duration ? this.pos = t = w.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : this.pos = t = e, this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), n && n.set ? n.set(this) : tt.propHooks._default.set(this), this;
        }
    }, tt.prototype.init.prototype = tt.prototype, tt.propHooks = {
        _default: {
            get: function get(e) {
                var t;
                return 1 !== e.elem.nodeType || null != e.elem[e.prop] && null == e.elem.style[e.prop] ? e.elem[e.prop] : (t = w.css(e.elem, e.prop, "")) && "auto" !== t ? t : 0;
            },
            set: function set(e) {
                w.fx.step[e.prop] ? w.fx.step[e.prop](e) : 1 !== e.elem.nodeType || null == e.elem.style[w.cssProps[e.prop]] && !w.cssHooks[e.prop] ? e.elem[e.prop] = e.now : w.style(e.elem, e.prop, e.now + e.unit);
            }
        }
    }, tt.propHooks.scrollTop = tt.propHooks.scrollLeft = {
        set: function set(e) {
            e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now);
        }
    }, w.easing = {
        linear: function linear(e) {
            return e;
        },
        swing: function swing(e) {
            return .5 - Math.cos(e * Math.PI) / 2;
        },
        _default: "swing"
    }, w.fx = tt.prototype.init, w.fx.step = {};
    var nt,
        rt,
        it = /^(?:toggle|show|hide)$/,
        ot = /queueHooks$/;

    function at() {
        rt && (!1 === r.hidden && e.requestAnimationFrame ? e.requestAnimationFrame(at) : e.setTimeout(at, w.fx.interval), w.fx.tick());
    }

    function st() {
        return e.setTimeout(function () {
            nt = void 0;
        }), nt = Date.now();
    }

    function ut(e, t) {
        var n,
            r = 0,
            i = {
                height: e
            };

        for (t = t ? 1 : 0; r < 4; r += 2 - t) {
            i["margin" + (n = oe[r])] = i["padding" + n] = e;
        }

        return t && (i.opacity = i.width = e), i;
    }

    function lt(e, t, n) {
        for (var r, i = (pt.tweeners[t] || []).concat(pt.tweeners["*"]), o = 0, a = i.length; o < a; o++) {
            if (r = i[o].call(n, t, e)) return r;
        }
    }

    function ct(e, t, n) {
        var r,
            i,
            o,
            a,
            s,
            u,
            l,
            c,
            f = "width" in t || "height" in t,
            p = this,
            d = {},
            h = e.style,
            g = e.nodeType && ae(e),
            y = J.get(e, "fxshow");
        n.queue || (null == (a = w._queueHooks(e, "fx")).unqueued && (a.unqueued = 0, s = a.empty.fire, a.empty.fire = function () {
            a.unqueued || s();
        }), a.unqueued++, p.always(function () {
            p.always(function () {
                a.unqueued--, w.queue(e, "fx").length || a.empty.fire();
            });
        }));

        for (r in t) {
            if (i = t[r], it.test(i)) {
                if (delete t[r], o = o || "toggle" === i, i === (g ? "hide" : "show")) {
                    if ("show" !== i || !y || void 0 === y[r]) continue;
                    g = !0;
                }

                d[r] = y && y[r] || w.style(e, r);
            }
        }

        if ((u = !w.isEmptyObject(t)) || !w.isEmptyObject(d)) {
            f && 1 === e.nodeType && (n.overflow = [h.overflow, h.overflowX, h.overflowY], null == (l = y && y.display) && (l = J.get(e, "display")), "none" === (c = w.css(e, "display")) && (l ? c = l : (fe([e], !0), l = e.style.display || l, c = w.css(e, "display"), fe([e]))), ("inline" === c || "inline-block" === c && null != l) && "none" === w.css(e, "float") && (u || (p.done(function () {
                h.display = l;
            }), null == l && (c = h.display, l = "none" === c ? "" : c)), h.display = "inline-block")), n.overflow && (h.overflow = "hidden", p.always(function () {
                h.overflow = n.overflow[0], h.overflowX = n.overflow[1], h.overflowY = n.overflow[2];
            })), u = !1;

            for (r in d) {
                u || (y ? "hidden" in y && (g = y.hidden) : y = J.access(e, "fxshow", {
                    display: l
                }), o && (y.hidden = !g), g && fe([e], !0), p.done(function () {
                    g || fe([e]), J.remove(e, "fxshow");

                    for (r in d) {
                        w.style(e, r, d[r]);
                    }
                })), u = lt(g ? y[r] : 0, r, p), r in y || (y[r] = u.start, g && (u.end = u.start, u.start = 0));
            }
        }
    }

    function ft(e, t) {
        var n, r, i, o, a;

        for (n in e) {
            if (r = G(n), i = t[r], o = e[n], Array.isArray(o) && (i = o[1], o = e[n] = o[0]), n !== r && (e[r] = o, delete e[n]), (a = w.cssHooks[r]) && "expand" in a) {
                o = a.expand(o), delete e[r];

                for (n in o) {
                    n in e || (e[n] = o[n], t[n] = i);
                }
            } else t[r] = i;
        }
    }

    function pt(e, t, n) {
        var r,
            i,
            o = 0,
            a = pt.prefilters.length,
            s = w.Deferred().always(function () {
                delete u.elem;
            }),
            u = function u() {
                if (i) return !1;

                for (var t = nt || st(), n = Math.max(0, l.startTime + l.duration - t), r = 1 - (n / l.duration || 0), o = 0, a = l.tweens.length; o < a; o++) {
                    l.tweens[o].run(r);
                }

                return s.notifyWith(e, [l, r, n]), r < 1 && a ? n : (a || s.notifyWith(e, [l, 1, 0]), s.resolveWith(e, [l]), !1);
            },
            l = s.promise({
                elem: e,
                props: w.extend({}, t),
                opts: w.extend(!0, {
                    specialEasing: {},
                    easing: w.easing._default
                }, n),
                originalProperties: t,
                originalOptions: n,
                startTime: nt || st(),
                duration: n.duration,
                tweens: [],
                createTween: function createTween(t, n) {
                    var r = w.Tween(e, l.opts, t, n, l.opts.specialEasing[t] || l.opts.easing);
                    return l.tweens.push(r), r;
                },
                stop: function stop(t) {
                    var n = 0,
                        r = t ? l.tweens.length : 0;
                    if (i) return this;

                    for (i = !0; n < r; n++) {
                        l.tweens[n].run(1);
                    }

                    return t ? (s.notifyWith(e, [l, 1, 0]), s.resolveWith(e, [l, t])) : s.rejectWith(e, [l, t]), this;
                }
            }),
            c = l.props;

        for (ft(c, l.opts.specialEasing); o < a; o++) {
            if (r = pt.prefilters[o].call(l, e, c, l.opts)) return g(r.stop) && (w._queueHooks(l.elem, l.opts.queue).stop = r.stop.bind(r)), r;
        }

        return w.map(c, lt, l), g(l.opts.start) && l.opts.start.call(e, l), l.progress(l.opts.progress).done(l.opts.done, l.opts.complete).fail(l.opts.fail).always(l.opts.always), w.fx.timer(w.extend(u, {
            elem: e,
            anim: l,
            queue: l.opts.queue
        })), l;
    }

    w.Animation = w.extend(pt, {
        tweeners: {
            "*": [function (e, t) {
                var n = this.createTween(e, t);
                return ue(n.elem, e, ie.exec(t), n), n;
            }]
        },
        tweener: function tweener(e, t) {
            g(e) ? (t = e, e = ["*"]) : e = e.match(M);

            for (var n, r = 0, i = e.length; r < i; r++) {
                n = e[r], pt.tweeners[n] = pt.tweeners[n] || [], pt.tweeners[n].unshift(t);
            }
        },
        prefilters: [ct],
        prefilter: function prefilter(e, t) {
            t ? pt.prefilters.unshift(e) : pt.prefilters.push(e);
        }
    }), w.speed = function (e, t, n) {
        var r = e && "object" == _typeof(e) ? w.extend({}, e) : {
            complete: n || !n && t || g(e) && e,
            duration: e,
            easing: n && t || t && !g(t) && t
        };
        return w.fx.off ? r.duration = 0 : "number" != typeof r.duration && (r.duration in w.fx.speeds ? r.duration = w.fx.speeds[r.duration] : r.duration = w.fx.speeds._default), null != r.queue && !0 !== r.queue || (r.queue = "fx"), r.old = r.complete, r.complete = function () {
            g(r.old) && r.old.call(this), r.queue && w.dequeue(this, r.queue);
        }, r;
    }, w.fn.extend({
        fadeTo: function fadeTo(e, t, n, r) {
            return this.filter(ae).css("opacity", 0).show().end().animate({
                opacity: t
            }, e, n, r);
        },
        animate: function animate(e, t, n, r) {
            var i = w.isEmptyObject(e),
                o = w.speed(t, n, r),
                a = function a() {
                    var t = pt(this, w.extend({}, e), o);
                    (i || J.get(this, "finish")) && t.stop(!0);
                };

            return a.finish = a, i || !1 === o.queue ? this.each(a) : this.queue(o.queue, a);
        },
        stop: function stop(e, t, n) {
            var r = function r(e) {
                var t = e.stop;
                delete e.stop, t(n);
            };

            return "string" != typeof e && (n = t, t = e, e = void 0), t && !1 !== e && this.queue(e || "fx", []), this.each(function () {
                var t = !0,
                    i = null != e && e + "queueHooks",
                    o = w.timers,
                    a = J.get(this);
                if (i) a[i] && a[i].stop && r(a[i]);
                else
                    for (i in a) {
                        a[i] && a[i].stop && ot.test(i) && r(a[i]);
                    }

                for (i = o.length; i--;) {
                    o[i].elem !== this || null != e && o[i].queue !== e || (o[i].anim.stop(n), t = !1, o.splice(i, 1));
                }

                !t && n || w.dequeue(this, e);
            });
        },
        finish: function finish(e) {
            return !1 !== e && (e = e || "fx"), this.each(function () {
                var t,
                    n = J.get(this),
                    r = n[e + "queue"],
                    i = n[e + "queueHooks"],
                    o = w.timers,
                    a = r ? r.length : 0;

                for (n.finish = !0, w.queue(this, e, []), i && i.stop && i.stop.call(this, !0), t = o.length; t--;) {
                    o[t].elem === this && o[t].queue === e && (o[t].anim.stop(!0), o.splice(t, 1));
                }

                for (t = 0; t < a; t++) {
                    r[t] && r[t].finish && r[t].finish.call(this);
                }

                delete n.finish;
            });
        }
    }), w.each(["toggle", "show", "hide"], function (e, t) {
        var n = w.fn[t];

        w.fn[t] = function (e, r, i) {
            return null == e || "boolean" == typeof e ? n.apply(this, arguments) : this.animate(ut(t, !0), e, r, i);
        };
    }), w.each({
        slideDown: ut("show"),
        slideUp: ut("hide"),
        slideToggle: ut("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function (e, t) {
        w.fn[e] = function (e, n, r) {
            return this.animate(t, e, n, r);
        };
    }), w.timers = [], w.fx.tick = function () {
        var e,
            t = 0,
            n = w.timers;

        for (nt = Date.now(); t < n.length; t++) {
            (e = n[t])() || n[t] !== e || n.splice(t--, 1);
        }

        n.length || w.fx.stop(), nt = void 0;
    }, w.fx.timer = function (e) {
        w.timers.push(e), w.fx.start();
    }, w.fx.interval = 13, w.fx.start = function () {
        rt || (rt = !0, at());
    }, w.fx.stop = function () {
        rt = null;
    }, w.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    }, w.fn.delay = function (t, n) {
        return t = w.fx ? w.fx.speeds[t] || t : t, n = n || "fx", this.queue(n, function (n, r) {
            var i = e.setTimeout(n, t);

            r.stop = function () {
                e.clearTimeout(i);
            };
        });
    },
        function () {
            var e = r.createElement("input"),
                t = r.createElement("select").appendChild(r.createElement("option"));
            e.type = "checkbox", h.checkOn = "" !== e.value, h.optSelected = t.selected, (e = r.createElement("input")).value = "t", e.type = "radio", h.radioValue = "t" === e.value;
        }();
    var dt,
        ht = w.expr.attrHandle;
    w.fn.extend({
        attr: function attr(e, t) {
            return z(this, w.attr, e, t, arguments.length > 1);
        },
        removeAttr: function removeAttr(e) {
            return this.each(function () {
                w.removeAttr(this, e);
            });
        }
    }), w.extend({
        attr: function attr(e, t, n) {
            var r,
                i,
                o = e.nodeType;
            if (3 !== o && 8 !== o && 2 !== o) return "undefined" == typeof e.getAttribute ? w.prop(e, t, n) : (1 === o && w.isXMLDoc(e) || (i = w.attrHooks[t.toLowerCase()] || (w.expr.match.bool.test(t) ? dt : void 0)), void 0 !== n ? null === n ? void w.removeAttr(e, t) : i && "set" in i && void 0 !== (r = i.set(e, n, t)) ? r : (e.setAttribute(t, n + ""), n) : i && "get" in i && null !== (r = i.get(e, t)) ? r : null == (r = w.find.attr(e, t)) ? void 0 : r);
        },
        attrHooks: {
            type: {
                set: function set(e, t) {
                    if (!h.radioValue && "radio" === t && N(e, "input")) {
                        var n = e.value;
                        return e.setAttribute("type", t), n && (e.value = n), t;
                    }
                }
            }
        },
        removeAttr: function removeAttr(e, t) {
            var n,
                r = 0,
                i = t && t.match(M);
            if (i && 1 === e.nodeType)
                while (n = i[r++]) {
                    e.removeAttribute(n);
                }
        }
    }), dt = {
        set: function set(e, t, n) {
            return !1 === t ? w.removeAttr(e, n) : e.setAttribute(n, n), n;
        }
    }, w.each(w.expr.match.bool.source.match(/\w+/g), function (e, t) {
        var n = ht[t] || w.find.attr;

        ht[t] = function (e, t, r) {
            var i,
                o,
                a = t.toLowerCase();
            return r || (o = ht[a], ht[a] = i, i = null != n(e, t, r) ? a : null, ht[a] = o), i;
        };
    });
    var gt = /^(?:input|select|textarea|button)$/i,
        yt = /^(?:a|area)$/i;
    w.fn.extend({
        prop: function prop(e, t) {
            return z(this, w.prop, e, t, arguments.length > 1);
        },
        removeProp: function removeProp(e) {
            return this.each(function () {
                delete this[w.propFix[e] || e];
            });
        }
    }), w.extend({
        prop: function prop(e, t, n) {
            var r,
                i,
                o = e.nodeType;
            if (3 !== o && 8 !== o && 2 !== o) return 1 === o && w.isXMLDoc(e) || (t = w.propFix[t] || t, i = w.propHooks[t]), void 0 !== n ? i && "set" in i && void 0 !== (r = i.set(e, n, t)) ? r : e[t] = n : i && "get" in i && null !== (r = i.get(e, t)) ? r : e[t];
        },
        propHooks: {
            tabIndex: {
                get: function get(e) {
                    var t = w.find.attr(e, "tabindex");
                    return t ? parseInt(t, 10) : gt.test(e.nodeName) || yt.test(e.nodeName) && e.href ? 0 : -1;
                }
            }
        },
        propFix: {
            "for": "htmlFor",
            "class": "className"
        }
    }), h.optSelected || (w.propHooks.selected = {
        get: function get(e) {
            var t = e.parentNode;
            return t && t.parentNode && t.parentNode.selectedIndex, null;
        },
        set: function set(e) {
            var t = e.parentNode;
            t && (t.selectedIndex, t.parentNode && t.parentNode.selectedIndex);
        }
    }), w.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
        w.propFix[this.toLowerCase()] = this;
    });

    function vt(e) {
        return (e.match(M) || []).join(" ");
    }

    function mt(e) {
        return e.getAttribute && e.getAttribute("class") || "";
    }

    function xt(e) {
        return Array.isArray(e) ? e : "string" == typeof e ? e.match(M) || [] : [];
    }

    w.fn.extend({
        addClass: function addClass(e) {
            var t,
                n,
                r,
                i,
                o,
                a,
                s,
                u = 0;
            if (g(e)) return this.each(function (t) {
                w(this).addClass(e.call(this, t, mt(this)));
            });
            if ((t = xt(e)).length)
                while (n = this[u++]) {
                    if (i = mt(n), r = 1 === n.nodeType && " " + vt(i) + " ") {
                        a = 0;

                        while (o = t[a++]) {
                            r.indexOf(" " + o + " ") < 0 && (r += o + " ");
                        }

                        i !== (s = vt(r)) && n.setAttribute("class", s);
                    }
                }
            return this;
        },
        removeClass: function removeClass(e) {
            var t,
                n,
                r,
                i,
                o,
                a,
                s,
                u = 0;
            if (g(e)) return this.each(function (t) {
                w(this).removeClass(e.call(this, t, mt(this)));
            });
            if (!arguments.length) return this.attr("class", "");
            if ((t = xt(e)).length)
                while (n = this[u++]) {
                    if (i = mt(n), r = 1 === n.nodeType && " " + vt(i) + " ") {
                        a = 0;

                        while (o = t[a++]) {
                            while (r.indexOf(" " + o + " ") > -1) {
                                r = r.replace(" " + o + " ", " ");
                            }
                        }

                        i !== (s = vt(r)) && n.setAttribute("class", s);
                    }
                }
            return this;
        },
        toggleClass: function toggleClass(e, t) {
            var n = _typeof(e),
                r = "string" === n || Array.isArray(e);

            return "boolean" == typeof t && r ? t ? this.addClass(e) : this.removeClass(e) : g(e) ? this.each(function (n) {
                w(this).toggleClass(e.call(this, n, mt(this), t), t);
            }) : this.each(function () {
                var t, i, o, a;

                if (r) {
                    i = 0, o = w(this), a = xt(e);

                    while (t = a[i++]) {
                        o.hasClass(t) ? o.removeClass(t) : o.addClass(t);
                    }
                } else void 0 !== e && "boolean" !== n || ((t = mt(this)) && J.set(this, "__className__", t), this.setAttribute && this.setAttribute("class", t || !1 === e ? "" : J.get(this, "__className__") || ""));
            });
        },
        hasClass: function hasClass(e) {
            var t,
                n,
                r = 0;
            t = " " + e + " ";

            while (n = this[r++]) {
                if (1 === n.nodeType && (" " + vt(mt(n)) + " ").indexOf(t) > -1) return !0;
            }

            return !1;
        }
    });
    var bt = /\r/g;
    w.fn.extend({
        val: function val(e) {
            var t,
                n,
                r,
                i = this[0];
            {
                if (arguments.length) return r = g(e), this.each(function (n) {
                    var i;
                    1 === this.nodeType && (null == (i = r ? e.call(this, n, w(this).val()) : e) ? i = "" : "number" == typeof i ? i += "" : Array.isArray(i) && (i = w.map(i, function (e) {
                        return null == e ? "" : e + "";
                    })), (t = w.valHooks[this.type] || w.valHooks[this.nodeName.toLowerCase()]) && "set" in t && void 0 !== t.set(this, i, "value") || (this.value = i));
                });
                if (i) return (t = w.valHooks[i.type] || w.valHooks[i.nodeName.toLowerCase()]) && "get" in t && void 0 !== (n = t.get(i, "value")) ? n : "string" == typeof (n = i.value) ? n.replace(bt, "") : null == n ? "" : n;
            }
        }
    }), w.extend({
        valHooks: {
            option: {
                get: function get(e) {
                    var t = w.find.attr(e, "value");
                    return null != t ? t : vt(w.text(e));
                }
            },
            select: {
                get: function get(e) {
                    var t,
                        n,
                        r,
                        i = e.options,
                        o = e.selectedIndex,
                        a = "select-one" === e.type,
                        s = a ? null : [],
                        u = a ? o + 1 : i.length;

                    for (r = o < 0 ? u : a ? o : 0; r < u; r++) {
                        if (((n = i[r]).selected || r === o) && !n.disabled && (!n.parentNode.disabled || !N(n.parentNode, "optgroup"))) {
                            if (t = w(n).val(), a) return t;
                            s.push(t);
                        }
                    }

                    return s;
                },
                set: function set(e, t) {
                    var n,
                        r,
                        i = e.options,
                        o = w.makeArray(t),
                        a = i.length;

                    while (a--) {
                        ((r = i[a]).selected = w.inArray(w.valHooks.option.get(r), o) > -1) && (n = !0);
                    }

                    return n || (e.selectedIndex = -1), o;
                }
            }
        }
    }), w.each(["radio", "checkbox"], function () {
        w.valHooks[this] = {
            set: function set(e, t) {
                if (Array.isArray(t)) return e.checked = w.inArray(w(e).val(), t) > -1;
            }
        }, h.checkOn || (w.valHooks[this].get = function (e) {
            return null === e.getAttribute("value") ? "on" : e.value;
        });
    }), h.focusin = "onfocusin" in e;

    var wt = /^(?:focusinfocus|focusoutblur)$/,
        Tt = function Tt(e) {
            e.stopPropagation();
        };

    w.extend(w.event, {
        trigger: function trigger(t, n, i, o) {
            var a,
                s,
                u,
                l,
                c,
                p,
                d,
                h,
                v = [i || r],
                m = f.call(t, "type") ? t.type : t,
                x = f.call(t, "namespace") ? t.namespace.split(".") : [];

            if (s = h = u = i = i || r, 3 !== i.nodeType && 8 !== i.nodeType && !wt.test(m + w.event.triggered) && (m.indexOf(".") > -1 && (m = (x = m.split(".")).shift(), x.sort()), c = m.indexOf(":") < 0 && "on" + m, t = t[w.expando] ? t : new w.Event(m, "object" == _typeof(t) && t), t.isTrigger = o ? 2 : 3, t.namespace = x.join("."), t.rnamespace = t.namespace ? new RegExp("(^|\\.)" + x.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, t.result = void 0, t.target || (t.target = i), n = null == n ? [t] : w.makeArray(n, [t]), d = w.event.special[m] || {}, o || !d.trigger || !1 !== d.trigger.apply(i, n))) {
                if (!o && !d.noBubble && !y(i)) {
                    for (l = d.delegateType || m, wt.test(l + m) || (s = s.parentNode); s; s = s.parentNode) {
                        v.push(s), u = s;
                    }

                    u === (i.ownerDocument || r) && v.push(u.defaultView || u.parentWindow || e);
                }

                a = 0;

                while ((s = v[a++]) && !t.isPropagationStopped()) {
                    h = s, t.type = a > 1 ? l : d.bindType || m, (p = (J.get(s, "events") || {})[t.type] && J.get(s, "handle")) && p.apply(s, n), (p = c && s[c]) && p.apply && Y(s) && (t.result = p.apply(s, n), !1 === t.result && t.preventDefault());
                }

                return t.type = m, o || t.isDefaultPrevented() || d._default && !1 !== d._default.apply(v.pop(), n) || !Y(i) || c && g(i[m]) && !y(i) && ((u = i[c]) && (i[c] = null), w.event.triggered = m, t.isPropagationStopped() && h.addEventListener(m, Tt), i[m](), t.isPropagationStopped() && h.removeEventListener(m, Tt), w.event.triggered = void 0, u && (i[c] = u)), t.result;
            }
        },
        simulate: function simulate(e, t, n) {
            var r = w.extend(new w.Event(), n, {
                type: e,
                isSimulated: !0
            });
            w.event.trigger(r, null, t);
        }
    }), w.fn.extend({
        trigger: function trigger(e, t) {
            return this.each(function () {
                w.event.trigger(e, t, this);
            });
        },
        triggerHandler: function triggerHandler(e, t) {
            var n = this[0];
            if (n) return w.event.trigger(e, t, n, !0);
        }
    }), h.focusin || w.each({
        focus: "focusin",
        blur: "focusout"
    }, function (e, t) {
        var n = function n(e) {
            w.event.simulate(t, e.target, w.event.fix(e));
        };

        w.event.special[t] = {
            setup: function setup() {
                var r = this.ownerDocument || this,
                    i = J.access(r, t);
                i || r.addEventListener(e, n, !0), J.access(r, t, (i || 0) + 1);
            },
            teardown: function teardown() {
                var r = this.ownerDocument || this,
                    i = J.access(r, t) - 1;
                i ? J.access(r, t, i) : (r.removeEventListener(e, n, !0), J.remove(r, t));
            }
        };
    });
    var Ct = e.location,
        Et = Date.now(),
        kt = /\?/;

    w.parseXML = function (t) {
        var n;
        if (!t || "string" != typeof t) return null;

        try {
            n = new e.DOMParser().parseFromString(t, "text/xml");
        } catch (e) {
            n = void 0;
        }

        return n && !n.getElementsByTagName("parsererror").length || w.error("Invalid XML: " + t), n;
    };

    var St = /\[\]$/,
        Dt = /\r?\n/g,
        Nt = /^(?:submit|button|image|reset|file)$/i,
        At = /^(?:input|select|textarea|keygen)/i;

    function jt(e, t, n, r) {
        var i;
        if (Array.isArray(t)) w.each(t, function (t, i) {
            n || St.test(e) ? r(e, i) : jt(e + "[" + ("object" == _typeof(i) && null != i ? t : "") + "]", i, n, r);
        });
        else if (n || "object" !== x(t)) r(e, t);
        else
            for (i in t) {
                jt(e + "[" + i + "]", t[i], n, r);
            }
    }

    w.param = function (e, t) {
        var n,
            r = [],
            i = function i(e, t) {
                var n = g(t) ? t() : t;
                r[r.length] = encodeURIComponent(e) + "=" + encodeURIComponent(null == n ? "" : n);
            };

        if (Array.isArray(e) || e.jquery && !w.isPlainObject(e)) w.each(e, function () {
            i(this.name, this.value);
        });
        else
            for (n in e) {
                jt(n, e[n], t, i);
            }
        return r.join("&");
    }, w.fn.extend({
        serialize: function serialize() {
            return w.param(this.serializeArray());
        },
        serializeArray: function serializeArray() {
            return this.map(function () {
                var e = w.prop(this, "elements");
                return e ? w.makeArray(e) : this;
            }).filter(function () {
                var e = this.type;
                return this.name && !w(this).is(":disabled") && At.test(this.nodeName) && !Nt.test(e) && (this.checked || !pe.test(e));
            }).map(function (e, t) {
                var n = w(this).val();
                return null == n ? null : Array.isArray(n) ? w.map(n, function (e) {
                    return {
                        name: t.name,
                        value: e.replace(Dt, "\r\n")
                    };
                }) : {
                    name: t.name,
                    value: n.replace(Dt, "\r\n")
                };
            }).get();
        }
    });
    var qt = /%20/g,
        Lt = /#.*$/,
        Ht = /([?&])_=[^&]*/,
        Ot = /^(.*?):[ \t]*([^\r\n]*)$/gm,
        Pt = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        Mt = /^(?:GET|HEAD)$/,
        Rt = /^\/\//,
        It = {},
        Wt = {},
        $t = "*/".concat("*"),
        Bt = r.createElement("a");
    Bt.href = Ct.href;

    function Ft(e) {
        return function (t, n) {
            "string" != typeof t && (n = t, t = "*");
            var r,
                i = 0,
                o = t.toLowerCase().match(M) || [];
            if (g(n))
                while (r = o[i++]) {
                    "+" === r[0] ? (r = r.slice(1) || "*", (e[r] = e[r] || []).unshift(n)) : (e[r] = e[r] || []).push(n);
                }
        };
    }

    function _t(e, t, n, r) {
        var i = {},
            o = e === Wt;

        function a(s) {
            var u;
            return i[s] = !0, w.each(e[s] || [], function (e, s) {
                var l = s(t, n, r);
                return "string" != typeof l || o || i[l] ? o ? !(u = l) : void 0 : (t.dataTypes.unshift(l), a(l), !1);
            }), u;
        }

        return a(t.dataTypes[0]) || !i["*"] && a("*");
    }

    function zt(e, t) {
        var n,
            r,
            i = w.ajaxSettings.flatOptions || {};

        for (n in t) {
            void 0 !== t[n] && ((i[n] ? e : r || (r = {}))[n] = t[n]);
        }

        return r && w.extend(!0, e, r), e;
    }

    function Xt(e, t, n) {
        var r,
            i,
            o,
            a,
            s = e.contents,
            u = e.dataTypes;

        while ("*" === u[0]) {
            u.shift(), void 0 === r && (r = e.mimeType || t.getResponseHeader("Content-Type"));
        }

        if (r)
            for (i in s) {
                if (s[i] && s[i].test(r)) {
                    u.unshift(i);
                    break;
                }
            }
        if (u[0] in n) o = u[0];
        else {
            for (i in n) {
                if (!u[0] || e.converters[i + " " + u[0]]) {
                    o = i;
                    break;
                }

                a || (a = i);
            }

            o = o || a;
        }
        if (o) return o !== u[0] && u.unshift(o), n[o];
    }

    function Ut(e, t, n, r) {
        var i,
            o,
            a,
            s,
            u,
            l = {},
            c = e.dataTypes.slice();
        if (c[1])
            for (a in e.converters) {
                l[a.toLowerCase()] = e.converters[a];
            }
        o = c.shift();

        while (o) {
            if (e.responseFields[o] && (n[e.responseFields[o]] = t), !u && r && e.dataFilter && (t = e.dataFilter(t, e.dataType)), u = o, o = c.shift())
                if ("*" === o) o = u;
                else if ("*" !== u && u !== o) {
                    if (!(a = l[u + " " + o] || l["* " + o]))
                        for (i in l) {
                            if ((s = i.split(" "))[1] === o && (a = l[u + " " + s[0]] || l["* " + s[0]])) {
                                !0 === a ? a = l[i] : !0 !== l[i] && (o = s[0], c.unshift(s[1]));
                                break;
                            }
                        }
                    if (!0 !== a)
                        if (a && e["throws"]) t = a(t);
                        else try {
                            t = a(t);
                        } catch (e) {
                            return {
                                state: "parsererror",
                                error: a ? e : "No conversion from " + u + " to " + o
                            };
                        }
                }
        }

        return {
            state: "success",
            data: t
        };
    }

    w.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: Ct.href,
            type: "GET",
            isLocal: Pt.test(Ct.protocol),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": $t,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": !0,
                "text json": JSON.parse,
                "text xml": w.parseXML
            },
            flatOptions: {
                url: !0,
                context: !0
            }
        },
        ajaxSetup: function ajaxSetup(e, t) {
            return t ? zt(zt(e, w.ajaxSettings), t) : zt(w.ajaxSettings, e);
        },
        ajaxPrefilter: Ft(It),
        ajaxTransport: Ft(Wt),
        ajax: function ajax(t, n) {
            "object" == _typeof(t) && (n = t, t = void 0), n = n || {};
            var i,
                o,
                a,
                s,
                u,
                l,
                c,
                f,
                p,
                d,
                h = w.ajaxSetup({}, n),
                g = h.context || h,
                y = h.context && (g.nodeType || g.jquery) ? w(g) : w.event,
                v = w.Deferred(),
                m = w.Callbacks("once memory"),
                x = h.statusCode || {},
                b = {},
                T = {},
                C = "canceled",
                E = {
                    readyState: 0,
                    getResponseHeader: function getResponseHeader(e) {
                        var t;

                        if (c) {
                            if (!s) {
                                s = {};

                                while (t = Ot.exec(a)) {
                                    s[t[1].toLowerCase()] = t[2];
                                }
                            }

                            t = s[e.toLowerCase()];
                        }

                        return null == t ? null : t;
                    },
                    getAllResponseHeaders: function getAllResponseHeaders() {
                        return c ? a : null;
                    },
                    setRequestHeader: function setRequestHeader(e, t) {
                        return null == c && (e = T[e.toLowerCase()] = T[e.toLowerCase()] || e, b[e] = t), this;
                    },
                    overrideMimeType: function overrideMimeType(e) {
                        return null == c && (h.mimeType = e), this;
                    },
                    statusCode: function statusCode(e) {
                        var t;
                        if (e)
                            if (c) E.always(e[E.status]);
                            else
                                for (t in e) {
                                    x[t] = [x[t], e[t]];
                                }
                        return this;
                    },
                    abort: function abort(e) {
                        var t = e || C;
                        return i && i.abort(t), k(0, t), this;
                    }
                };

            if (v.promise(E), h.url = ((t || h.url || Ct.href) + "").replace(Rt, Ct.protocol + "//"), h.type = n.method || n.type || h.method || h.type, h.dataTypes = (h.dataType || "*").toLowerCase().match(M) || [""], null == h.crossDomain) {
                l = r.createElement("a");

                try {
                    l.href = h.url, l.href = l.href, h.crossDomain = Bt.protocol + "//" + Bt.host != l.protocol + "//" + l.host;
                } catch (e) {
                    h.crossDomain = !0;
                }
            }

            if (h.data && h.processData && "string" != typeof h.data && (h.data = w.param(h.data, h.traditional)), _t(It, h, n, E), c) return E;
            (f = w.event && h.global) && 0 == w.active++ && w.event.trigger("ajaxStart"), h.type = h.type.toUpperCase(), h.hasContent = !Mt.test(h.type), o = h.url.replace(Lt, ""), h.hasContent ? h.data && h.processData && 0 === (h.contentType || "").indexOf("application/x-www-form-urlencoded") && (h.data = h.data.replace(qt, "+")) : (d = h.url.slice(o.length), h.data && (h.processData || "string" == typeof h.data) && (o += (kt.test(o) ? "&" : "?") + h.data, delete h.data), !1 === h.cache && (o = o.replace(Ht, "$1"), d = (kt.test(o) ? "&" : "?") + "_=" + Et++ + d), h.url = o + d), h.ifModified && (w.lastModified[o] && E.setRequestHeader("If-Modified-Since", w.lastModified[o]), w.etag[o] && E.setRequestHeader("If-None-Match", w.etag[o])), (h.data && h.hasContent && !1 !== h.contentType || n.contentType) && E.setRequestHeader("Content-Type", h.contentType), E.setRequestHeader("Accept", h.dataTypes[0] && h.accepts[h.dataTypes[0]] ? h.accepts[h.dataTypes[0]] + ("*" !== h.dataTypes[0] ? ", " + $t + "; q=0.01" : "") : h.accepts["*"]);

            for (p in h.headers) {
                E.setRequestHeader(p, h.headers[p]);
            }

            if (h.beforeSend && (!1 === h.beforeSend.call(g, E, h) || c)) return E.abort();

            if (C = "abort", m.add(h.complete), E.done(h.success), E.fail(h.error), i = _t(Wt, h, n, E)) {
                if (E.readyState = 1, f && y.trigger("ajaxSend", [E, h]), c) return E;
                h.async && h.timeout > 0 && (u = e.setTimeout(function () {
                    E.abort("timeout");
                }, h.timeout));

                try {
                    c = !1, i.send(b, k);
                } catch (e) {
                    if (c) throw e;
                    k(-1, e);
                }
            } else k(-1, "No Transport");

            function k(t, n, r, s) {
                var l,
                    p,
                    d,
                    b,
                    T,
                    C = n;
                c || (c = !0, u && e.clearTimeout(u), i = void 0, a = s || "", E.readyState = t > 0 ? 4 : 0, l = t >= 200 && t < 300 || 304 === t, r && (b = Xt(h, E, r)), b = Ut(h, b, E, l), l ? (h.ifModified && ((T = E.getResponseHeader("Last-Modified")) && (w.lastModified[o] = T), (T = E.getResponseHeader("etag")) && (w.etag[o] = T)), 204 === t || "HEAD" === h.type ? C = "nocontent" : 304 === t ? C = "notmodified" : (C = b.state, p = b.data, l = !(d = b.error))) : (d = C, !t && C || (C = "error", t < 0 && (t = 0))), E.status = t, E.statusText = (n || C) + "", l ? v.resolveWith(g, [p, C, E]) : v.rejectWith(g, [E, C, d]), E.statusCode(x), x = void 0, f && y.trigger(l ? "ajaxSuccess" : "ajaxError", [E, h, l ? p : d]), m.fireWith(g, [E, C]), f && (y.trigger("ajaxComplete", [E, h]), --w.active || w.event.trigger("ajaxStop")));
            }

            return E;
        },
        getJSON: function getJSON(e, t, n) {
            return w.get(e, t, n, "json");
        },
        getScript: function getScript(e, t) {
            return w.get(e, void 0, t, "script");
        }
    }), w.each(["get", "post"], function (e, t) {
        w[t] = function (e, n, r, i) {
            return g(n) && (i = i || r, r = n, n = void 0), w.ajax(w.extend({
                url: e,
                type: t,
                dataType: i,
                data: n,
                success: r
            }, w.isPlainObject(e) && e));
        };
    }), w._evalUrl = function (e) {
        return w.ajax({
            url: e,
            type: "GET",
            dataType: "script",
            cache: !0,
            async: !1,
            global: !1,
            "throws": !0
        });
    }, w.fn.extend({
        wrapAll: function wrapAll(e) {
            var t;
            return this[0] && (g(e) && (e = e.call(this[0])), t = w(e, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && t.insertBefore(this[0]), t.map(function () {
                var e = this;

                while (e.firstElementChild) {
                    e = e.firstElementChild;
                }

                return e;
            }).append(this)), this;
        },
        wrapInner: function wrapInner(e) {
            return g(e) ? this.each(function (t) {
                w(this).wrapInner(e.call(this, t));
            }) : this.each(function () {
                var t = w(this),
                    n = t.contents();
                n.length ? n.wrapAll(e) : t.append(e);
            });
        },
        wrap: function wrap(e) {
            var t = g(e);
            return this.each(function (n) {
                w(this).wrapAll(t ? e.call(this, n) : e);
            });
        },
        unwrap: function unwrap(e) {
            return this.parent(e).not("body").each(function () {
                w(this).replaceWith(this.childNodes);
            }), this;
        }
    }), w.expr.pseudos.hidden = function (e) {
        return !w.expr.pseudos.visible(e);
    }, w.expr.pseudos.visible = function (e) {
        return !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length);
    }, w.ajaxSettings.xhr = function () {
        try {
            return new e.XMLHttpRequest();
        } catch (e) {
        }
    };
    var Vt = {
            0: 200,
            1223: 204
        },
        Gt = w.ajaxSettings.xhr();
    h.cors = !!Gt && "withCredentials" in Gt, h.ajax = Gt = !!Gt, w.ajaxTransport(function (t) {
        var _n, r;

        if (h.cors || Gt && !t.crossDomain) return {
            send: function send(i, o) {
                var a,
                    s = t.xhr();
                if (s.open(t.type, t.url, t.async, t.username, t.password), t.xhrFields)
                    for (a in t.xhrFields) {
                        s[a] = t.xhrFields[a];
                    }
                t.mimeType && s.overrideMimeType && s.overrideMimeType(t.mimeType), t.crossDomain || i["X-Requested-With"] || (i["X-Requested-With"] = "XMLHttpRequest");

                for (a in i) {
                    s.setRequestHeader(a, i[a]);
                }

                _n = function n(e) {
                    return function () {
                        _n && (_n = r = s.onload = s.onerror = s.onabort = s.ontimeout = s.onreadystatechange = null, "abort" === e ? s.abort() : "error" === e ? "number" != typeof s.status ? o(0, "error") : o(s.status, s.statusText) : o(Vt[s.status] || s.status, s.statusText, "text" !== (s.responseType || "text") || "string" != typeof s.responseText ? {
                            binary: s.response
                        } : {
                            text: s.responseText
                        }, s.getAllResponseHeaders()));
                    };
                }, s.onload = _n(), r = s.onerror = s.ontimeout = _n("error"), void 0 !== s.onabort ? s.onabort = r : s.onreadystatechange = function () {
                    4 === s.readyState && e.setTimeout(function () {
                        _n && r();
                    });
                }, _n = _n("abort");

                try {
                    s.send(t.hasContent && t.data || null);
                } catch (e) {
                    if (_n) throw e;
                }
            },
            abort: function abort() {
                _n && _n();
            }
        };
    }), w.ajaxPrefilter(function (e) {
        e.crossDomain && (e.contents.script = !1);
    }), w.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /\b(?:java|ecma)script\b/
        },
        converters: {
            "text script": function textScript(e) {
                return w.globalEval(e), e;
            }
        }
    }), w.ajaxPrefilter("script", function (e) {
        void 0 === e.cache && (e.cache = !1), e.crossDomain && (e.type = "GET");
    }), w.ajaxTransport("script", function (e) {
        if (e.crossDomain) {
            var t, _n2;

            return {
                send: function send(i, o) {
                    t = w("<script>").prop({
                        charset: e.scriptCharset,
                        src: e.url
                    }).on("load error", _n2 = function n(e) {
                        t.remove(), _n2 = null, e && o("error" === e.type ? 404 : 200, e.type);
                    }), r.head.appendChild(t[0]);
                },
                abort: function abort() {
                    _n2 && _n2();
                }
            };
        }
    });
    var Yt = [],
        Qt = /(=)\?(?=&|$)|\?\?/;
    w.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function jsonpCallback() {
            var e = Yt.pop() || w.expando + "_" + Et++;
            return this[e] = !0, e;
        }
    }), w.ajaxPrefilter("json jsonp", function (t, n, r) {
        var i,
            o,
            a,
            s = !1 !== t.jsonp && (Qt.test(t.url) ? "url" : "string" == typeof t.data && 0 === (t.contentType || "").indexOf("application/x-www-form-urlencoded") && Qt.test(t.data) && "data");
        if (s || "jsonp" === t.dataTypes[0]) return i = t.jsonpCallback = g(t.jsonpCallback) ? t.jsonpCallback() : t.jsonpCallback, s ? t[s] = t[s].replace(Qt, "$1" + i) : !1 !== t.jsonp && (t.url += (kt.test(t.url) ? "&" : "?") + t.jsonp + "=" + i), t.converters["script json"] = function () {
            return a || w.error(i + " was not called"), a[0];
        }, t.dataTypes[0] = "json", o = e[i], e[i] = function () {
            a = arguments;
        }, r.always(function () {
            void 0 === o ? w(e).removeProp(i) : e[i] = o, t[i] && (t.jsonpCallback = n.jsonpCallback, Yt.push(i)), a && g(o) && o(a[0]), a = o = void 0;
        }), "script";
    }), h.createHTMLDocument = function () {
        var e = r.implementation.createHTMLDocument("").body;
        return e.innerHTML = "<form></form><form></form>", 2 === e.childNodes.length;
    }(), w.parseHTML = function (e, t, n) {
        if ("string" != typeof e) return [];
        "boolean" == typeof t && (n = t, t = !1);
        var i, o, a;
        return t || (h.createHTMLDocument ? ((i = (t = r.implementation.createHTMLDocument("")).createElement("base")).href = r.location.href, t.head.appendChild(i)) : t = r), o = A.exec(e), a = !n && [], o ? [t.createElement(o[1])] : (o = xe([e], t, a), a && a.length && w(a).remove(), w.merge([], o.childNodes));
    }, w.fn.load = function (e, t, n) {
        var r,
            i,
            o,
            a = this,
            s = e.indexOf(" ");
        return s > -1 && (r = vt(e.slice(s)), e = e.slice(0, s)), g(t) ? (n = t, t = void 0) : t && "object" == _typeof(t) && (i = "POST"), a.length > 0 && w.ajax({
            url: e,
            type: i || "GET",
            dataType: "html",
            data: t
        }).done(function (e) {
            o = arguments, a.html(r ? w("<div>").append(w.parseHTML(e)).find(r) : e);
        }).always(n && function (e, t) {
            a.each(function () {
                n.apply(this, o || [e.responseText, t, e]);
            });
        }), this;
    }, w.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (e, t) {
        w.fn[t] = function (e) {
            return this.on(t, e);
        };
    }), w.expr.pseudos.animated = function (e) {
        return w.grep(w.timers, function (t) {
            return e === t.elem;
        }).length;
    }, w.offset = {
        setOffset: function setOffset(e, t, n) {
            var r,
                i,
                o,
                a,
                s,
                u,
                l,
                c = w.css(e, "position"),
                f = w(e),
                p = {};
            "static" === c && (e.style.position = "relative"), s = f.offset(), o = w.css(e, "top"), u = w.css(e, "left"), (l = ("absolute" === c || "fixed" === c) && (o + u).indexOf("auto") > -1) ? (a = (r = f.position()).top, i = r.left) : (a = parseFloat(o) || 0, i = parseFloat(u) || 0), g(t) && (t = t.call(e, n, w.extend({}, s))), null != t.top && (p.top = t.top - s.top + a), null != t.left && (p.left = t.left - s.left + i), "using" in t ? t.using.call(e, p) : f.css(p);
        }
    }, w.fn.extend({
        offset: function offset(e) {
            if (arguments.length) return void 0 === e ? this : this.each(function (t) {
                w.offset.setOffset(this, e, t);
            });
            var t,
                n,
                r = this[0];
            if (r) return r.getClientRects().length ? (t = r.getBoundingClientRect(), n = r.ownerDocument.defaultView, {
                top: t.top + n.pageYOffset,
                left: t.left + n.pageXOffset
            }) : {
                top: 0,
                left: 0
            };
        },
        position: function position() {
            if (this[0]) {
                var e,
                    t,
                    n,
                    r = this[0],
                    i = {
                        top: 0,
                        left: 0
                    };
                if ("fixed" === w.css(r, "position")) t = r.getBoundingClientRect();
                else {
                    t = this.offset(), n = r.ownerDocument, e = r.offsetParent || n.documentElement;

                    while (e && (e === n.body || e === n.documentElement) && "static" === w.css(e, "position")) {
                        e = e.parentNode;
                    }

                    e && e !== r && 1 === e.nodeType && ((i = w(e).offset()).top += w.css(e, "borderTopWidth", !0), i.left += w.css(e, "borderLeftWidth", !0));
                }
                return {
                    top: t.top - i.top - w.css(r, "marginTop", !0),
                    left: t.left - i.left - w.css(r, "marginLeft", !0)
                };
            }
        },
        offsetParent: function offsetParent() {
            return this.map(function () {
                var e = this.offsetParent;

                while (e && "static" === w.css(e, "position")) {
                    e = e.offsetParent;
                }

                return e || be;
            });
        }
    }), w.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function (e, t) {
        var n = "pageYOffset" === t;

        w.fn[e] = function (r) {
            return z(this, function (e, r, i) {
                var o;
                if (y(e) ? o = e : 9 === e.nodeType && (o = e.defaultView), void 0 === i) return o ? o[t] : e[r];
                o ? o.scrollTo(n ? o.pageXOffset : i, n ? i : o.pageYOffset) : e[r] = i;
            }, e, r, arguments.length);
        };
    }), w.each(["top", "left"], function (e, t) {
        w.cssHooks[t] = _e(h.pixelPosition, function (e, n) {
            if (n) return n = Fe(e, t), We.test(n) ? w(e).position()[t] + "px" : n;
        });
    }), w.each({
        Height: "height",
        Width: "width"
    }, function (e, t) {
        w.each({
            padding: "inner" + e,
            content: t,
            "": "outer" + e
        }, function (n, r) {
            w.fn[r] = function (i, o) {
                var a = arguments.length && (n || "boolean" != typeof i),
                    s = n || (!0 === i || !0 === o ? "margin" : "border");
                return z(this, function (t, n, i) {
                    var o;
                    return y(t) ? 0 === r.indexOf("outer") ? t["inner" + e] : t.document.documentElement["client" + e] : 9 === t.nodeType ? (o = t.documentElement, Math.max(t.body["scroll" + e], o["scroll" + e], t.body["offset" + e], o["offset" + e], o["client" + e])) : void 0 === i ? w.css(t, n, s) : w.style(t, n, i, s);
                }, t, a ? i : void 0, a);
            };
        });
    }), w.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function (e, t) {
        w.fn[t] = function (e, n) {
            return arguments.length > 0 ? this.on(t, null, e, n) : this.trigger(t);
        };
    }), w.fn.extend({
        hover: function hover(e, t) {
            return this.mouseenter(e).mouseleave(t || e);
        }
    }), w.fn.extend({
        bind: function bind(e, t, n) {
            return this.on(e, null, t, n);
        },
        unbind: function unbind(e, t) {
            return this.off(e, null, t);
        },
        delegate: function delegate(e, t, n, r) {
            return this.on(t, e, n, r);
        },
        undelegate: function undelegate(e, t, n) {
            return 1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", n);
        }
    }), w.proxy = function (e, t) {
        var n, r, i;
        if ("string" == typeof t && (n = e[t], t = e, e = n), g(e)) return r = o.call(arguments, 2), i = function i() {
            return e.apply(t || this, r.concat(o.call(arguments)));
        }, i.guid = e.guid = e.guid || w.guid++, i;
    }, w.holdReady = function (e) {
        e ? w.readyWait++ : w.ready(!0);
    }, w.isArray = Array.isArray, w.parseJSON = JSON.parse, w.nodeName = N, w.isFunction = g, w.isWindow = y, w.camelCase = G, w.type = x, w.now = Date.now, w.isNumeric = function (e) {
        var t = w.type(e);
        return ("number" === t || "string" === t) && !isNaN(e - parseFloat(e));
    }, "function" == typeof define && define.amd && define("jquery", [], function () {
        return w;
    });
    var Jt = e.jQuery,
        Kt = e.$;
    return w.noConflict = function (t) {
        return e.$ === w && (e.$ = Kt), t && e.jQuery === w && (e.jQuery = Jt), w;
    }, t || (e.jQuery = e.$ = w), w;
});
"use strict";

function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
            return typeof obj;
        };
    } else {
        _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
    }
    return _typeof(obj);
}

/*!
 * Flickity PACKAGED v2.1.2
 * Touch, responsive, flickable carousels
 *
 * Licensed GPLv3 for open source use
 * or Flickity Commercial License for commercial use
 *
 * https://flickity.metafizzy.co
 * Copyright 2015-2018 Metafizzy
 */
!function (t, e) {
    "function" == typeof define && define.amd ? define("jquery-bridget/jquery-bridget", ["jquery"], function (i) {
        return e(t, i);
    }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e(t, require("jquery")) : t.jQueryBridget = e(t, t.jQuery);
}(window, function (t, e) {
    "use strict";

    function i(i, o, a) {
        function l(t, e, n) {
            var s,
                o = "$()." + i + '("' + e + '")';
            return t.each(function (t, l) {
                var h = a.data(l, i);
                if (!h) return void r(i + " not initialized. Cannot call methods, i.e. " + o);
                var c = h[e];
                if (!c || "_" == e.charAt(0)) return void r(o + " is not a valid method");
                var d = c.apply(h, n);
                s = void 0 === s ? d : s;
            }), void 0 !== s ? s : t;
        }

        function h(t, e) {
            t.each(function (t, n) {
                var s = a.data(n, i);
                s ? (s.option(e), s._init()) : (s = new o(n, e), a.data(n, i, s));
            });
        }

        a = a || e || t.jQuery, a && (o.prototype.option || (o.prototype.option = function (t) {
            a.isPlainObject(t) && (this.options = a.extend(!0, this.options, t));
        }), a.fn[i] = function (t) {
            if ("string" == typeof t) {
                var e = s.call(arguments, 1);
                return l(this, t, e);
            }

            return h(this, t), this;
        }, n(a));
    }

    function n(t) {
        !t || t && t.bridget || (t.bridget = i);
    }

    var s = Array.prototype.slice,
        o = t.console,
        r = "undefined" == typeof o ? function () {
        } : function (t) {
            o.error(t);
        };
    return n(e || t.jQuery), i;
}),
    function (t, e) {
        "function" == typeof define && define.amd ? define("ev-emitter/ev-emitter", e) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e() : t.EvEmitter = e();
    }("undefined" != typeof window ? window : void 0, function () {
        function t() {
        }

        var e = t.prototype;
        return e.on = function (t, e) {
            if (t && e) {
                var i = this._events = this._events || {},
                    n = i[t] = i[t] || [];
                return n.indexOf(e) == -1 && n.push(e), this;
            }
        }, e.once = function (t, e) {
            if (t && e) {
                this.on(t, e);
                var i = this._onceEvents = this._onceEvents || {},
                    n = i[t] = i[t] || {};
                return n[e] = !0, this;
            }
        }, e.off = function (t, e) {
            var i = this._events && this._events[t];

            if (i && i.length) {
                var n = i.indexOf(e);
                return n != -1 && i.splice(n, 1), this;
            }
        }, e.emitEvent = function (t, e) {
            var i = this._events && this._events[t];

            if (i && i.length) {
                i = i.slice(0), e = e || [];

                for (var n = this._onceEvents && this._onceEvents[t], s = 0; s < i.length; s++) {
                    var o = i[s],
                        r = n && n[o];
                    r && (this.off(t, o), delete n[o]), o.apply(this, e);
                }

                return this;
            }
        }, e.allOff = function () {
            delete this._events, delete this._onceEvents;
        }, t;
    }),
    function (t, e) {
        "function" == typeof define && define.amd ? define("get-size/get-size", e) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e() : t.getSize = e();
    }(window, function () {
        "use strict";

        function t(t) {
            var e = parseFloat(t),
                i = t.indexOf("%") == -1 && !isNaN(e);
            return i && e;
        }

        function e() {
        }

        function i() {
            for (var t = {
                width: 0,
                height: 0,
                innerWidth: 0,
                innerHeight: 0,
                outerWidth: 0,
                outerHeight: 0
            }, e = 0; e < h; e++) {
                var i = l[e];
                t[i] = 0;
            }

            return t;
        }

        function n(t) {
            var e = getComputedStyle(t);
            return e || a("Style returned " + e + ". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"), e;
        }

        function s() {
            if (!c) {
                c = !0;
                var e = document.createElement("div");
                e.style.width = "200px", e.style.padding = "1px 2px 3px 4px", e.style.borderStyle = "solid", e.style.borderWidth = "1px 2px 3px 4px", e.style.boxSizing = "border-box";
                var i = document.body || document.documentElement;
                i.appendChild(e);
                var s = n(e);
                r = 200 == Math.round(t(s.width)), o.isBoxSizeOuter = r, i.removeChild(e);
            }
        }

        function o(e) {
            if (s(), "string" == typeof e && (e = document.querySelector(e)), e && "object" == _typeof(e) && e.nodeType) {
                var o = n(e);
                if ("none" == o.display) return i();
                var a = {};
                a.width = e.offsetWidth, a.height = e.offsetHeight;

                for (var c = a.isBorderBox = "border-box" == o.boxSizing, d = 0; d < h; d++) {
                    var u = l[d],
                        f = o[u],
                        p = parseFloat(f);
                    a[u] = isNaN(p) ? 0 : p;
                }

                var g = a.paddingLeft + a.paddingRight,
                    v = a.paddingTop + a.paddingBottom,
                    m = a.marginLeft + a.marginRight,
                    y = a.marginTop + a.marginBottom,
                    b = a.borderLeftWidth + a.borderRightWidth,
                    E = a.borderTopWidth + a.borderBottomWidth,
                    S = c && r,
                    C = t(o.width);
                C !== !1 && (a.width = C + (S ? 0 : g + b));
                var x = t(o.height);
                return x !== !1 && (a.height = x + (S ? 0 : v + E)), a.innerWidth = a.width - (g + b), a.innerHeight = a.height - (v + E), a.outerWidth = a.width + m, a.outerHeight = a.height + y, a;
            }
        }

        var r,
            a = "undefined" == typeof console ? e : function (t) {
                console.error(t);
            },
            l = ["paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "marginLeft", "marginRight", "marginTop", "marginBottom", "borderLeftWidth", "borderRightWidth", "borderTopWidth", "borderBottomWidth"],
            h = l.length,
            c = !1;
        return o;
    }),
    function (t, e) {
        "use strict";

        "function" == typeof define && define.amd ? define("desandro-matches-selector/matches-selector", e) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e() : t.matchesSelector = e();
    }(window, function () {
        "use strict";

        var t = function () {
            var t = window.Element.prototype;
            if (t.matches) return "matches";
            if (t.matchesSelector) return "matchesSelector";

            for (var e = ["webkit", "moz", "ms", "o"], i = 0; i < e.length; i++) {
                var n = e[i],
                    s = n + "MatchesSelector";
                if (t[s]) return s;
            }
        }();

        return function (e, i) {
            return e[t](i);
        };
    }),
    function (t, e) {
        "function" == typeof define && define.amd ? define("fizzy-ui-utils/utils", ["desandro-matches-selector/matches-selector"], function (i) {
            return e(t, i);
        }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e(t, require("desandro-matches-selector")) : t.fizzyUIUtils = e(t, t.matchesSelector);
    }(window, function (t, e) {
        var i = {};
        i.extend = function (t, e) {
            for (var i in e) {
                t[i] = e[i];
            }

            return t;
        }, i.modulo = function (t, e) {
            return (t % e + e) % e;
        };
        var n = Array.prototype.slice;
        i.makeArray = function (t) {
            if (Array.isArray(t)) return t;
            if (null === t || void 0 === t) return [];
            var e = "object" == _typeof(t) && "number" == typeof t.length;
            return e ? n.call(t) : [t];
        }, i.removeFrom = function (t, e) {
            var i = t.indexOf(e);
            i != -1 && t.splice(i, 1);
        }, i.getParent = function (t, i) {
            for (; t.parentNode && t != document.body;) {
                if (t = t.parentNode, e(t, i)) return t;
            }
        }, i.getQueryElement = function (t) {
            return "string" == typeof t ? document.querySelector(t) : t;
        }, i.handleEvent = function (t) {
            var e = "on" + t.type;
            this[e] && this[e](t);
        }, i.filterFindElements = function (t, n) {
            t = i.makeArray(t);
            var s = [];
            return t.forEach(function (t) {
                if (t instanceof HTMLElement) {
                    if (!n) return void s.push(t);
                    e(t, n) && s.push(t);

                    for (var i = t.querySelectorAll(n), o = 0; o < i.length; o++) {
                        s.push(i[o]);
                    }
                }
            }), s;
        }, i.debounceMethod = function (t, e, i) {
            i = i || 100;
            var n = t.prototype[e],
                s = e + "Timeout";

            t.prototype[e] = function () {
                var t = this[s];
                clearTimeout(t);
                var e = arguments,
                    o = this;
                this[s] = setTimeout(function () {
                    n.apply(o, e), delete o[s];
                }, i);
            };
        }, i.docReady = function (t) {
            var e = document.readyState;
            "complete" == e || "interactive" == e ? setTimeout(t) : document.addEventListener("DOMContentLoaded", t);
        }, i.toDashed = function (t) {
            return t.replace(/(.)([A-Z])/g, function (t, e, i) {
                return e + "-" + i;
            }).toLowerCase();
        };
        var s = t.console;
        return i.htmlInit = function (e, n) {
            i.docReady(function () {
                var o = i.toDashed(n),
                    r = "data-" + o,
                    a = document.querySelectorAll("[" + r + "]"),
                    l = document.querySelectorAll(".js-" + o),
                    h = i.makeArray(a).concat(i.makeArray(l)),
                    c = r + "-options",
                    d = t.jQuery;
                h.forEach(function (t) {
                    var i,
                        o = t.getAttribute(r) || t.getAttribute(c);

                    try {
                        i = o && JSON.parse(o);
                    } catch (a) {
                        return void (s && s.error("Error parsing " + r + " on " + t.className + ": " + a));
                    }

                    var l = new e(t, i);
                    d && d.data(t, n, l);
                });
            });
        }, i;
    }),
    function (t, e) {
        "function" == typeof define && define.amd ? define("flickity/js/cell", ["get-size/get-size"], function (i) {
            return e(t, i);
        }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e(t, require("get-size")) : (t.Flickity = t.Flickity || {}, t.Flickity.Cell = e(t, t.getSize));
    }(window, function (t, e) {
        function i(t, e) {
            this.element = t, this.parent = e, this.create();
        }

        var n = i.prototype;
        return n.create = function () {
            this.element.style.position = "absolute", this.element.setAttribute("aria-selected", "false"), this.x = 0, this.shift = 0;
        }, n.destroy = function () {
            this.element.style.position = "";
            var t = this.parent.originSide;
            this.element.removeAttribute("aria-selected"), this.element.style[t] = "";
        }, n.getSize = function () {
            this.size = e(this.element);
        }, n.setPosition = function (t) {
            this.x = t, this.updateTarget(), this.renderPosition(t);
        }, n.updateTarget = n.setDefaultTarget = function () {
            var t = "left" == this.parent.originSide ? "marginLeft" : "marginRight";
            this.target = this.x + this.size[t] + this.size.width * this.parent.cellAlign;
        }, n.renderPosition = function (t) {
            var e = this.parent.originSide;
            this.element.style[e] = this.parent.getPositionValue(t);
        }, n.wrapShift = function (t) {
            this.shift = t, this.renderPosition(this.x + this.parent.slideableWidth * t);
        }, n.remove = function () {
            this.element.parentNode.removeChild(this.element);
        }, i;
    }),
    function (t, e) {
        "function" == typeof define && define.amd ? define("flickity/js/slide", e) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e() : (t.Flickity = t.Flickity || {}, t.Flickity.Slide = e());
    }(window, function () {
        "use strict";

        function t(t) {
            this.parent = t, this.isOriginLeft = "left" == t.originSide, this.cells = [], this.outerWidth = 0, this.height = 0;
        }

        var e = t.prototype;
        return e.addCell = function (t) {
            if (this.cells.push(t), this.outerWidth += t.size.outerWidth, this.height = Math.max(t.size.outerHeight, this.height), 1 == this.cells.length) {
                this.x = t.x;
                var e = this.isOriginLeft ? "marginLeft" : "marginRight";
                this.firstMargin = t.size[e];
            }
        }, e.updateTarget = function () {
            var t = this.isOriginLeft ? "marginRight" : "marginLeft",
                e = this.getLastCell(),
                i = e ? e.size[t] : 0,
                n = this.outerWidth - (this.firstMargin + i);
            this.target = this.x + this.firstMargin + n * this.parent.cellAlign;
        }, e.getLastCell = function () {
            return this.cells[this.cells.length - 1];
        }, e.select = function () {
            this.changeSelected(!0);
        }, e.unselect = function () {
            this.changeSelected(!1);
        }, e.changeSelected = function (t) {
            var e = t ? "add" : "remove";
            this.cells.forEach(function (i) {
                i.element.classList[e]("is-selected"), i.element.setAttribute("aria-selected", t.toString());
            });
        }, e.getCellElements = function () {
            return this.cells.map(function (t) {
                return t.element;
            });
        }, t;
    }),
    function (t, e) {
        "function" == typeof define && define.amd ? define("flickity/js/animate", ["fizzy-ui-utils/utils"], function (i) {
            return e(t, i);
        }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e(t, require("fizzy-ui-utils")) : (t.Flickity = t.Flickity || {}, t.Flickity.animatePrototype = e(t, t.fizzyUIUtils));
    }(window, function (t, e) {
        var i = {};
        return i.startAnimation = function () {
            this.isAnimating || (this.isAnimating = !0, this.restingFrames = 0, this.animate());
        }, i.animate = function () {
            this.applyDragForce(), this.applySelectedAttraction();
            var t = this.x;

            if (this.integratePhysics(), this.positionSlider(), this.settle(t), this.isAnimating) {
                var e = this;
                requestAnimationFrame(function () {
                    e.animate();
                });
            }
        }, i.positionSlider = function () {
            var t = this.x;
            this.options.wrapAround && this.cells.length > 1 && (t = e.modulo(t, this.slideableWidth), t -= this.slideableWidth, this.shiftWrapCells(t)), t += this.cursorPosition, t = this.options.rightToLeft ? -t : t;
            var i = this.getPositionValue(t);
            this.slider.style.transform = this.isAnimating ? "translate3d(" + i + ",0,0)" : "translateX(" + i + ")";
            var n = this.slides[0];

            if (n) {
                var s = -this.x - n.target,
                    o = s / this.slidesWidth;
                this.dispatchEvent("scroll", null, [o, s]);
            }
        }, i.positionSliderAtSelected = function () {
            this.cells.length && (this.x = -this.selectedSlide.target, this.velocity = 0, this.positionSlider());
        }, i.getPositionValue = function (t) {
            return this.options.percentPosition ? .01 * Math.round(t / this.size.innerWidth * 1e4) + "%" : Math.round(t) + "px";
        }, i.settle = function (t) {
            this.isPointerDown || Math.round(100 * this.x) != Math.round(100 * t) || this.restingFrames++, this.restingFrames > 2 && (this.isAnimating = !1, delete this.isFreeScrolling, this.positionSlider(), this.dispatchEvent("settle", null, [this.selectedIndex]));
        }, i.shiftWrapCells = function (t) {
            var e = this.cursorPosition + t;

            this._shiftCells(this.beforeShiftCells, e, -1);

            var i = this.size.innerWidth - (t + this.slideableWidth + this.cursorPosition);

            this._shiftCells(this.afterShiftCells, i, 1);
        }, i._shiftCells = function (t, e, i) {
            for (var n = 0; n < t.length; n++) {
                var s = t[n],
                    o = e > 0 ? i : 0;
                s.wrapShift(o), e -= s.size.outerWidth;
            }
        }, i._unshiftCells = function (t) {
            if (t && t.length)
                for (var e = 0; e < t.length; e++) {
                    t[e].wrapShift(0);
                }
        }, i.integratePhysics = function () {
            this.x += this.velocity, this.velocity *= this.getFrictionFactor();
        }, i.applyForce = function (t) {
            this.velocity += t;
        }, i.getFrictionFactor = function () {
            return 1 - this.options[this.isFreeScrolling ? "freeScrollFriction" : "friction"];
        }, i.getRestingPosition = function () {
            return this.x + this.velocity / (1 - this.getFrictionFactor());
        }, i.applyDragForce = function () {
            if (this.isDraggable && this.isPointerDown) {
                var t = this.dragX - this.x,
                    e = t - this.velocity;
                this.applyForce(e);
            }
        }, i.applySelectedAttraction = function () {
            var t = this.isDraggable && this.isPointerDown;

            if (!t && !this.isFreeScrolling && this.slides.length) {
                var e = this.selectedSlide.target * -1 - this.x,
                    i = e * this.options.selectedAttraction;
                this.applyForce(i);
            }
        }, i;
    }),
    function (t, e) {
        if ("function" == typeof define && define.amd) define("flickity/js/flickity", ["ev-emitter/ev-emitter", "get-size/get-size", "fizzy-ui-utils/utils", "./cell", "./slide", "./animate"], function (i, n, s, o, r, a) {
            return e(t, i, n, s, o, r, a);
        });
        else if ("object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports) module.exports = e(t, require("ev-emitter"), require("get-size"), require("fizzy-ui-utils"), require("./cell"), require("./slide"), require("./animate"));
        else {
            var i = t.Flickity;
            t.Flickity = e(t, t.EvEmitter, t.getSize, t.fizzyUIUtils, i.Cell, i.Slide, i.animatePrototype);
        }
    }(window, function (t, e, i, n, s, o, r) {
        function a(t, e) {
            for (t = n.makeArray(t); t.length;) {
                e.appendChild(t.shift());
            }
        }

        function l(t, e) {
            var i = n.getQueryElement(t);
            if (!i) return void (d && d.error("Bad element for Flickity: " + (i || t)));

            if (this.element = i, this.element.flickityGUID) {
                var s = f[this.element.flickityGUID];
                return s.option(e), s;
            }

            h && (this.$element = h(this.element)), this.options = n.extend({}, this.constructor.defaults), this.option(e), this._create();
        }

        var h = t.jQuery,
            c = t.getComputedStyle,
            d = t.console,
            u = 0,
            f = {};
        l.defaults = {
            accessibility: !0,
            cellAlign: "center",
            freeScrollFriction: .075,
            friction: .28,
            namespaceJQueryEvents: !0,
            percentPosition: !0,
            resize: !0,
            selectedAttraction: .025,
            setGallerySize: !0
        }, l.createMethods = [];
        var p = l.prototype;
        n.extend(p, e.prototype), p._create = function () {
            var e = this.guid = ++u;
            this.element.flickityGUID = e, f[e] = this, this.selectedIndex = 0, this.restingFrames = 0, this.x = 0, this.velocity = 0, this.originSide = this.options.rightToLeft ? "right" : "left", this.viewport = document.createElement("div"), this.viewport.className = "flickity-viewport", this._createSlider(), (this.options.resize || this.options.watchCSS) && t.addEventListener("resize", this);

            for (var i in this.options.on) {
                var n = this.options.on[i];
                this.on(i, n);
            }

            l.createMethods.forEach(function (t) {
                this[t]();
            }, this), this.options.watchCSS ? this.watchCSS() : this.activate();
        }, p.option = function (t) {
            n.extend(this.options, t);
        }, p.activate = function () {
            if (!this.isActive) {
                this.isActive = !0, this.element.classList.add("flickity-enabled"), this.options.rightToLeft && this.element.classList.add("flickity-rtl"), this.getSize();

                var t = this._filterFindCellElements(this.element.children);

                a(t, this.slider), this.viewport.appendChild(this.slider), this.element.appendChild(this.viewport), this.reloadCells(), this.options.accessibility && (this.element.tabIndex = 0, this.element.addEventListener("keydown", this)), this.emitEvent("activate");
                var e,
                    i = this.options.initialIndex;
                e = this.isInitActivated ? this.selectedIndex : void 0 !== i && this.cells[i] ? i : 0, this.select(e, !1, !0), this.isInitActivated = !0, this.dispatchEvent("ready");
            }
        }, p._createSlider = function () {
            var t = document.createElement("div");
            t.className = "flickity-slider", t.style[this.originSide] = 0, this.slider = t;
        }, p._filterFindCellElements = function (t) {
            return n.filterFindElements(t, this.options.cellSelector);
        }, p.reloadCells = function () {
            this.cells = this._makeCells(this.slider.children), this.positionCells(), this._getWrapShiftCells(), this.setGallerySize();
        }, p._makeCells = function (t) {
            var e = this._filterFindCellElements(t),
                i = e.map(function (t) {
                    return new s(t, this);
                }, this);

            return i;
        }, p.getLastCell = function () {
            return this.cells[this.cells.length - 1];
        }, p.getLastSlide = function () {
            return this.slides[this.slides.length - 1];
        }, p.positionCells = function () {
            this._sizeCells(this.cells), this._positionCells(0);
        }, p._positionCells = function (t) {
            t = t || 0, this.maxCellHeight = t ? this.maxCellHeight || 0 : 0;
            var e = 0;

            if (t > 0) {
                var i = this.cells[t - 1];
                e = i.x + i.size.outerWidth;
            }

            for (var n = this.cells.length, s = t; s < n; s++) {
                var o = this.cells[s];
                o.setPosition(e), e += o.size.outerWidth, this.maxCellHeight = Math.max(o.size.outerHeight, this.maxCellHeight);
            }

            this.slideableWidth = e, this.updateSlides(), this._containSlides(), this.slidesWidth = n ? this.getLastSlide().target - this.slides[0].target : 0;
        }, p._sizeCells = function (t) {
            t.forEach(function (t) {
                t.getSize();
            });
        }, p.updateSlides = function () {
            if (this.slides = [], this.cells.length) {
                var t = new o(this);
                this.slides.push(t);

                var e = "left" == this.originSide,
                    i = e ? "marginRight" : "marginLeft",
                    n = this._getCanCellFit();

                this.cells.forEach(function (e, s) {
                    if (!t.cells.length) return void t.addCell(e);
                    var r = t.outerWidth - t.firstMargin + (e.size.outerWidth - e.size[i]);
                    n.call(this, s, r) ? t.addCell(e) : (t.updateTarget(), t = new o(this), this.slides.push(t), t.addCell(e));
                }, this), t.updateTarget(), this.updateSelectedSlide();
            }
        }, p._getCanCellFit = function () {
            var t = this.options.groupCells;
            if (!t) return function () {
                return !1;
            };

            if ("number" == typeof t) {
                var e = parseInt(t, 10);
                return function (t) {
                    return t % e !== 0;
                };
            }

            var i = "string" == typeof t && t.match(/^(\d+)%$/),
                n = i ? parseInt(i[1], 10) / 100 : 1;
            return function (t, e) {
                return e <= (this.size.innerWidth + 1) * n;
            };
        }, p._init = p.reposition = function () {
            this.positionCells(), this.positionSliderAtSelected();
        }, p.getSize = function () {
            this.size = i(this.element), this.setCellAlign(), this.cursorPosition = this.size.innerWidth * this.cellAlign;
        };
        var g = {
            center: {
                left: .5,
                right: .5
            },
            left: {
                left: 0,
                right: 1
            },
            right: {
                right: 0,
                left: 1
            }
        };
        return p.setCellAlign = function () {
            var t = g[this.options.cellAlign];
            this.cellAlign = t ? t[this.originSide] : this.options.cellAlign;
        }, p.setGallerySize = function () {
            if (this.options.setGallerySize) {
                var t = this.options.adaptiveHeight && this.selectedSlide ? this.selectedSlide.height : this.maxCellHeight;
                this.viewport.style.height = t + "px";
            }
        }, p._getWrapShiftCells = function () {
            if (this.options.wrapAround) {
                this._unshiftCells(this.beforeShiftCells), this._unshiftCells(this.afterShiftCells);
                var t = this.cursorPosition,
                    e = this.cells.length - 1;
                this.beforeShiftCells = this._getGapCells(t, e, -1), t = this.size.innerWidth - this.cursorPosition, this.afterShiftCells = this._getGapCells(t, 0, 1);
            }
        }, p._getGapCells = function (t, e, i) {
            for (var n = []; t > 0;) {
                var s = this.cells[e];
                if (!s) break;
                n.push(s), e += i, t -= s.size.outerWidth;
            }

            return n;
        }, p._containSlides = function () {
            if (this.options.contain && !this.options.wrapAround && this.cells.length) {
                var t = this.options.rightToLeft,
                    e = t ? "marginRight" : "marginLeft",
                    i = t ? "marginLeft" : "marginRight",
                    n = this.slideableWidth - this.getLastCell().size[i],
                    s = n < this.size.innerWidth,
                    o = this.cursorPosition + this.cells[0].size[e],
                    r = n - this.size.innerWidth * (1 - this.cellAlign);
                this.slides.forEach(function (t) {
                    s ? t.target = n * this.cellAlign : (t.target = Math.max(t.target, o), t.target = Math.min(t.target, r));
                }, this);
            }
        }, p.dispatchEvent = function (t, e, i) {
            var n = e ? [e].concat(i) : i;

            if (this.emitEvent(t, n), h && this.$element) {
                t += this.options.namespaceJQueryEvents ? ".flickity" : "";
                var s = t;

                if (e) {
                    var o = h.Event(e);
                    o.type = t, s = o;
                }

                this.$element.trigger(s, i);
            }
        }, p.select = function (t, e, i) {
            if (this.isActive && (t = parseInt(t, 10), this._wrapSelect(t), (this.options.wrapAround || e) && (t = n.modulo(t, this.slides.length)), this.slides[t])) {
                var s = this.selectedIndex;
                this.selectedIndex = t, this.updateSelectedSlide(), i ? this.positionSliderAtSelected() : this.startAnimation(), this.options.adaptiveHeight && this.setGallerySize(), this.dispatchEvent("select", null, [t]), t != s && this.dispatchEvent("change", null, [t]), this.dispatchEvent("cellSelect");
            }
        }, p._wrapSelect = function (t) {
            var e = this.slides.length,
                i = this.options.wrapAround && e > 1;
            if (!i) return t;
            var s = n.modulo(t, e),
                o = Math.abs(s - this.selectedIndex),
                r = Math.abs(s + e - this.selectedIndex),
                a = Math.abs(s - e - this.selectedIndex);
            !this.isDragSelect && r < o ? t += e : !this.isDragSelect && a < o && (t -= e), t < 0 ? this.x -= this.slideableWidth : t >= e && (this.x += this.slideableWidth);
        }, p.previous = function (t, e) {
            this.select(this.selectedIndex - 1, t, e);
        }, p.next = function (t, e) {
            this.select(this.selectedIndex + 1, t, e);
        }, p.updateSelectedSlide = function () {
            var t = this.slides[this.selectedIndex];
            t && (this.unselectSelectedSlide(), this.selectedSlide = t, t.select(), this.selectedCells = t.cells, this.selectedElements = t.getCellElements(), this.selectedCell = t.cells[0], this.selectedElement = this.selectedElements[0]);
        }, p.unselectSelectedSlide = function () {
            this.selectedSlide && this.selectedSlide.unselect();
        }, p.selectCell = function (t, e, i) {
            var n = this.queryCell(t);

            if (n) {
                var s = this.getCellSlideIndex(n);
                this.select(s, e, i);
            }
        }, p.getCellSlideIndex = function (t) {
            for (var e = 0; e < this.slides.length; e++) {
                var i = this.slides[e],
                    n = i.cells.indexOf(t);
                if (n != -1) return e;
            }
        }, p.getCell = function (t) {
            for (var e = 0; e < this.cells.length; e++) {
                var i = this.cells[e];
                if (i.element == t) return i;
            }
        }, p.getCells = function (t) {
            t = n.makeArray(t);
            var e = [];
            return t.forEach(function (t) {
                var i = this.getCell(t);
                i && e.push(i);
            }, this), e;
        }, p.getCellElements = function () {
            return this.cells.map(function (t) {
                return t.element;
            });
        }, p.getParentCell = function (t) {
            var e = this.getCell(t);
            return e ? e : (t = n.getParent(t, ".flickity-slider > *"), this.getCell(t));
        }, p.getAdjacentCellElements = function (t, e) {
            if (!t) return this.selectedSlide.getCellElements();
            e = void 0 === e ? this.selectedIndex : e;
            var i = this.slides.length;
            if (1 + 2 * t >= i) return this.getCellElements();

            for (var s = [], o = e - t; o <= e + t; o++) {
                var r = this.options.wrapAround ? n.modulo(o, i) : o,
                    a = this.slides[r];
                a && (s = s.concat(a.getCellElements()));
            }

            return s;
        }, p.queryCell = function (t) {
            return "number" == typeof t ? this.cells[t] : ("string" == typeof t && (t = this.element.querySelector(t)), this.getCell(t));
        }, p.uiChange = function () {
            this.emitEvent("uiChange");
        }, p.childUIPointerDown = function (t) {
            this.emitEvent("childUIPointerDown", [t]);
        }, p.onresize = function () {
            this.watchCSS(), this.resize();
        }, n.debounceMethod(l, "onresize", 150), p.resize = function () {
            if (this.isActive) {
                this.getSize(), this.options.wrapAround && (this.x = n.modulo(this.x, this.slideableWidth)), this.positionCells(), this._getWrapShiftCells(), this.setGallerySize(), this.emitEvent("resize");
                var t = this.selectedElements && this.selectedElements[0];
                this.selectCell(t, !1, !0);
            }
        }, p.watchCSS = function () {
            var t = this.options.watchCSS;

            if (t) {
                var e = c(this.element, ":after").content;
                e.indexOf("flickity") != -1 ? this.activate() : this.deactivate();
            }
        }, p.onkeydown = function (t) {
            var e = document.activeElement && document.activeElement != this.element;

            if (this.options.accessibility && !e) {
                var i = l.keyboardHandlers[t.keyCode];
                i && i.call(this);
            }
        }, l.keyboardHandlers = {
            37: function _() {
                var t = this.options.rightToLeft ? "next" : "previous";
                this.uiChange(), this[t]();
            },
            39: function _() {
                var t = this.options.rightToLeft ? "previous" : "next";
                this.uiChange(), this[t]();
            }
        }, p.focus = function () {
            var e = t.pageYOffset;
            this.element.focus({
                preventScroll: !0
            }), t.pageYOffset != e && t.scrollTo(t.pageXOffset, e);
        }, p.deactivate = function () {
            this.isActive && (this.element.classList.remove("flickity-enabled"), this.element.classList.remove("flickity-rtl"), this.unselectSelectedSlide(), this.cells.forEach(function (t) {
                t.destroy();
            }), this.element.removeChild(this.viewport), a(this.slider.children, this.element), this.options.accessibility && (this.element.removeAttribute("tabIndex"), this.element.removeEventListener("keydown", this)), this.isActive = !1, this.emitEvent("deactivate"));
        }, p.destroy = function () {
            this.deactivate(), t.removeEventListener("resize", this), this.emitEvent("destroy"), h && this.$element && h.removeData(this.element, "flickity"), delete this.element.flickityGUID, delete f[this.guid];
        }, n.extend(p, r), l.data = function (t) {
            t = n.getQueryElement(t);
            var e = t && t.flickityGUID;
            return e && f[e];
        }, n.htmlInit(l, "flickity"), h && h.bridget && h.bridget("flickity", l), l.setJQuery = function (t) {
            h = t;
        }, l.Cell = s, l;
    }),
    function (t, e) {
        "function" == typeof define && define.amd ? define("unipointer/unipointer", ["ev-emitter/ev-emitter"], function (i) {
            return e(t, i);
        }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e(t, require("ev-emitter")) : t.Unipointer = e(t, t.EvEmitter);
    }(window, function (t, e) {
        function i() {
        }

        function n() {
        }

        var s = n.prototype = Object.create(e.prototype);
        s.bindStartEvent = function (t) {
            this._bindStartEvent(t, !0);
        }, s.unbindStartEvent = function (t) {
            this._bindStartEvent(t, !1);
        }, s._bindStartEvent = function (e, i) {
            i = void 0 === i || i;
            var n = i ? "addEventListener" : "removeEventListener",
                s = "mousedown";
            t.PointerEvent ? s = "pointerdown" : "ontouchstart" in t && (s = "touchstart"), e[n](s, this);
        }, s.handleEvent = function (t) {
            var e = "on" + t.type;
            this[e] && this[e](t);
        }, s.getTouch = function (t) {
            for (var e = 0; e < t.length; e++) {
                var i = t[e];
                if (i.identifier == this.pointerIdentifier) return i;
            }
        }, s.onmousedown = function (t) {
            var e = t.button;
            e && 0 !== e && 1 !== e || this._pointerDown(t, t);
        }, s.ontouchstart = function (t) {
            this._pointerDown(t, t.changedTouches[0]);
        }, s.onpointerdown = function (t) {
            this._pointerDown(t, t);
        }, s._pointerDown = function (t, e) {
            t.button || this.isPointerDown || (this.isPointerDown = !0, this.pointerIdentifier = void 0 !== e.pointerId ? e.pointerId : e.identifier, this.pointerDown(t, e));
        }, s.pointerDown = function (t, e) {
            this._bindPostStartEvents(t), this.emitEvent("pointerDown", [t, e]);
        };
        var o = {
            mousedown: ["mousemove", "mouseup"],
            touchstart: ["touchmove", "touchend", "touchcancel"],
            pointerdown: ["pointermove", "pointerup", "pointercancel"]
        };
        return s._bindPostStartEvents = function (e) {
            if (e) {
                var i = o[e.type];
                i.forEach(function (e) {
                    t.addEventListener(e, this);
                }, this), this._boundPointerEvents = i;
            }
        }, s._unbindPostStartEvents = function () {
            this._boundPointerEvents && (this._boundPointerEvents.forEach(function (e) {
                t.removeEventListener(e, this);
            }, this), delete this._boundPointerEvents);
        }, s.onmousemove = function (t) {
            this._pointerMove(t, t);
        }, s.onpointermove = function (t) {
            t.pointerId == this.pointerIdentifier && this._pointerMove(t, t);
        }, s.ontouchmove = function (t) {
            var e = this.getTouch(t.changedTouches);
            e && this._pointerMove(t, e);
        }, s._pointerMove = function (t, e) {
            this.pointerMove(t, e);
        }, s.pointerMove = function (t, e) {
            this.emitEvent("pointerMove", [t, e]);
        }, s.onmouseup = function (t) {
            this._pointerUp(t, t);
        }, s.onpointerup = function (t) {
            t.pointerId == this.pointerIdentifier && this._pointerUp(t, t);
        }, s.ontouchend = function (t) {
            var e = this.getTouch(t.changedTouches);
            e && this._pointerUp(t, e);
        }, s._pointerUp = function (t, e) {
            this._pointerDone(), this.pointerUp(t, e);
        }, s.pointerUp = function (t, e) {
            this.emitEvent("pointerUp", [t, e]);
        }, s._pointerDone = function () {
            this._pointerReset(), this._unbindPostStartEvents(), this.pointerDone();
        }, s._pointerReset = function () {
            this.isPointerDown = !1, delete this.pointerIdentifier;
        }, s.pointerDone = i, s.onpointercancel = function (t) {
            t.pointerId == this.pointerIdentifier && this._pointerCancel(t, t);
        }, s.ontouchcancel = function (t) {
            var e = this.getTouch(t.changedTouches);
            e && this._pointerCancel(t, e);
        }, s._pointerCancel = function (t, e) {
            this._pointerDone(), this.pointerCancel(t, e);
        }, s.pointerCancel = function (t, e) {
            this.emitEvent("pointerCancel", [t, e]);
        }, n.getPointerPoint = function (t) {
            return {
                x: t.pageX,
                y: t.pageY
            };
        }, n;
    }),
    function (t, e) {
        "function" == typeof define && define.amd ? define("unidragger/unidragger", ["unipointer/unipointer"], function (i) {
            return e(t, i);
        }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e(t, require("unipointer")) : t.Unidragger = e(t, t.Unipointer);
    }(window, function (t, e) {
        function i() {
        }

        var n = i.prototype = Object.create(e.prototype);
        n.bindHandles = function () {
            this._bindHandles(!0);
        }, n.unbindHandles = function () {
            this._bindHandles(!1);
        }, n._bindHandles = function (e) {
            e = void 0 === e || e;

            for (var i = e ? "addEventListener" : "removeEventListener", n = e ? this._touchActionValue : "", s = 0; s < this.handles.length; s++) {
                var o = this.handles[s];
                this._bindStartEvent(o, e), o[i]("click", this), t.PointerEvent && (o.style.touchAction = n);
            }
        }, n._touchActionValue = "none", n.pointerDown = function (t, e) {
            var i = this.okayPointerDown(t);
            i && (this.pointerDownPointer = e, t.preventDefault(), this.pointerDownBlur(), this._bindPostStartEvents(t), this.emitEvent("pointerDown", [t, e]));
        };
        var s = {
                TEXTAREA: !0,
                INPUT: !0,
                SELECT: !0,
                OPTION: !0
            },
            o = {
                radio: !0,
                checkbox: !0,
                button: !0,
                submit: !0,
                image: !0,
                file: !0
            };
        return n.okayPointerDown = function (t) {
            var e = s[t.target.nodeName],
                i = o[t.target.type],
                n = !e || i;
            return n || this._pointerReset(), n;
        }, n.pointerDownBlur = function () {
            var t = document.activeElement,
                e = t && t.blur && t != document.body;
            e && t.blur();
        }, n.pointerMove = function (t, e) {
            var i = this._dragPointerMove(t, e);

            this.emitEvent("pointerMove", [t, e, i]), this._dragMove(t, e, i);
        }, n._dragPointerMove = function (t, e) {
            var i = {
                x: e.pageX - this.pointerDownPointer.pageX,
                y: e.pageY - this.pointerDownPointer.pageY
            };
            return !this.isDragging && this.hasDragStarted(i) && this._dragStart(t, e), i;
        }, n.hasDragStarted = function (t) {
            return Math.abs(t.x) > 3 || Math.abs(t.y) > 3;
        }, n.pointerUp = function (t, e) {
            this.emitEvent("pointerUp", [t, e]), this._dragPointerUp(t, e);
        }, n._dragPointerUp = function (t, e) {
            this.isDragging ? this._dragEnd(t, e) : this._staticClick(t, e);
        }, n._dragStart = function (t, e) {
            this.isDragging = !0, this.isPreventingClicks = !0, this.dragStart(t, e);
        }, n.dragStart = function (t, e) {
            this.emitEvent("dragStart", [t, e]);
        }, n._dragMove = function (t, e, i) {
            this.isDragging && this.dragMove(t, e, i);
        }, n.dragMove = function (t, e, i) {
            t.preventDefault(), this.emitEvent("dragMove", [t, e, i]);
        }, n._dragEnd = function (t, e) {
            this.isDragging = !1, setTimeout(function () {
                delete this.isPreventingClicks;
            }.bind(this)), this.dragEnd(t, e);
        }, n.dragEnd = function (t, e) {
            this.emitEvent("dragEnd", [t, e]);
        }, n.onclick = function (t) {
            this.isPreventingClicks && t.preventDefault();
        }, n._staticClick = function (t, e) {
            this.isIgnoringMouseUp && "mouseup" == t.type || (this.staticClick(t, e), "mouseup" != t.type && (this.isIgnoringMouseUp = !0, setTimeout(function () {
                delete this.isIgnoringMouseUp;
            }.bind(this), 400)));
        }, n.staticClick = function (t, e) {
            this.emitEvent("staticClick", [t, e]);
        }, i.getPointerPoint = e.getPointerPoint, i;
    }),
    function (t, e) {
        "function" == typeof define && define.amd ? define("flickity/js/drag", ["./flickity", "unidragger/unidragger", "fizzy-ui-utils/utils"], function (i, n, s) {
            return e(t, i, n, s);
        }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e(t, require("./flickity"), require("unidragger"), require("fizzy-ui-utils")) : t.Flickity = e(t, t.Flickity, t.Unidragger, t.fizzyUIUtils);
    }(window, function (t, e, i, n) {
        function s() {
            return {
                x: t.pageXOffset,
                y: t.pageYOffset
            };
        }

        n.extend(e.defaults, {
            draggable: ">1",
            dragThreshold: 3
        }), e.createMethods.push("_createDrag");
        var o = e.prototype;
        n.extend(o, i.prototype), o._touchActionValue = "pan-y";
        var r = "createTouch" in document,
            a = !1;
        o._createDrag = function () {
            this.on("activate", this.onActivateDrag), this.on("uiChange", this._uiChangeDrag), this.on("childUIPointerDown", this._childUIPointerDownDrag), this.on("deactivate", this.onDeactivateDrag), this.on("cellChange", this.updateDraggable), r && !a && (t.addEventListener("touchmove", function () {
            }), a = !0);
        }, o.onActivateDrag = function () {
            this.handles = [this.viewport], this.bindHandles(), this.updateDraggable();
        }, o.onDeactivateDrag = function () {
            this.unbindHandles(), this.element.classList.remove("is-draggable");
        }, o.updateDraggable = function () {
            ">1" == this.options.draggable ? this.isDraggable = this.slides.length > 1 : this.isDraggable = this.options.draggable, this.isDraggable ? this.element.classList.add("is-draggable") : this.element.classList.remove("is-draggable");
        }, o.bindDrag = function () {
            this.options.draggable = !0, this.updateDraggable();
        }, o.unbindDrag = function () {
            this.options.draggable = !1, this.updateDraggable();
        }, o._uiChangeDrag = function () {
            delete this.isFreeScrolling;
        }, o._childUIPointerDownDrag = function (t) {
            t.preventDefault(), this.pointerDownFocus(t);
        }, o.pointerDown = function (e, i) {
            if (!this.isDraggable) return void this._pointerDownDefault(e, i);
            var n = this.okayPointerDown(e);
            n && (this._pointerDownPreventDefault(e), this.pointerDownFocus(e), document.activeElement != this.element && this.pointerDownBlur(), this.dragX = this.x, this.viewport.classList.add("is-pointer-down"), this.pointerDownScroll = s(), t.addEventListener("scroll", this), this._pointerDownDefault(e, i));
        }, o._pointerDownDefault = function (t, e) {
            this.pointerDownPointer = e, this._bindPostStartEvents(t), this.dispatchEvent("pointerDown", t, [e]);
        };
        var l = {
            INPUT: !0,
            TEXTAREA: !0,
            SELECT: !0
        };
        return o.pointerDownFocus = function (t) {
            var e = l[t.target.nodeName];
            e || this.focus();
        }, o._pointerDownPreventDefault = function (t) {
            var e = "touchstart" == t.type,
                i = "touch" == t.pointerType,
                n = l[t.target.nodeName];
            e || i || n || t.preventDefault();
        }, o.hasDragStarted = function (t) {
            return Math.abs(t.x) > this.options.dragThreshold;
        }, o.pointerUp = function (t, e) {
            delete this.isTouchScrolling, this.viewport.classList.remove("is-pointer-down"), this.dispatchEvent("pointerUp", t, [e]), this._dragPointerUp(t, e);
        }, o.pointerDone = function () {
            t.removeEventListener("scroll", this), delete this.pointerDownScroll;
        }, o.dragStart = function (e, i) {
            this.isDraggable && (this.dragStartPosition = this.x, this.startAnimation(), t.removeEventListener("scroll", this), this.dispatchEvent("dragStart", e, [i]));
        }, o.pointerMove = function (t, e) {
            var i = this._dragPointerMove(t, e);

            this.dispatchEvent("pointerMove", t, [e, i]), this._dragMove(t, e, i);
        }, o.dragMove = function (t, e, i) {
            if (this.isDraggable) {
                t.preventDefault(), this.previousDragX = this.dragX;
                var n = this.options.rightToLeft ? -1 : 1;
                this.options.wrapAround && (i.x = i.x % this.slideableWidth);
                var s = this.dragStartPosition + i.x * n;

                if (!this.options.wrapAround && this.slides.length) {
                    var o = Math.max(-this.slides[0].target, this.dragStartPosition);
                    s = s > o ? .5 * (s + o) : s;
                    var r = Math.min(-this.getLastSlide().target, this.dragStartPosition);
                    s = s < r ? .5 * (s + r) : s;
                }

                this.dragX = s, this.dragMoveTime = new Date(), this.dispatchEvent("dragMove", t, [e, i]);
            }
        }, o.dragEnd = function (t, e) {
            if (this.isDraggable) {
                this.options.freeScroll && (this.isFreeScrolling = !0);
                var i = this.dragEndRestingSelect();

                if (this.options.freeScroll && !this.options.wrapAround) {
                    var n = this.getRestingPosition();
                    this.isFreeScrolling = -n > this.slides[0].target && -n < this.getLastSlide().target;
                } else this.options.freeScroll || i != this.selectedIndex || (i += this.dragEndBoostSelect());

                delete this.previousDragX, this.isDragSelect = this.options.wrapAround, this.select(i), delete this.isDragSelect, this.dispatchEvent("dragEnd", t, [e]);
            }
        }, o.dragEndRestingSelect = function () {
            var t = this.getRestingPosition(),
                e = Math.abs(this.getSlideDistance(-t, this.selectedIndex)),
                i = this._getClosestResting(t, e, 1),
                n = this._getClosestResting(t, e, -1),
                s = i.distance < n.distance ? i.index : n.index;

            return s;
        }, o._getClosestResting = function (t, e, i) {
            for (var n = this.selectedIndex, s = 1 / 0, o = this.options.contain && !this.options.wrapAround ? function (t, e) {
                return t <= e;
            } : function (t, e) {
                return t < e;
            }; o(e, s) && (n += i, s = e, e = this.getSlideDistance(-t, n), null !== e);) {
                e = Math.abs(e);
            }

            return {
                distance: s,
                index: n - i
            };
        }, o.getSlideDistance = function (t, e) {
            var i = this.slides.length,
                s = this.options.wrapAround && i > 1,
                o = s ? n.modulo(e, i) : e,
                r = this.slides[o];
            if (!r) return null;
            var a = s ? this.slideableWidth * Math.floor(e / i) : 0;
            return t - (r.target + a);
        }, o.dragEndBoostSelect = function () {
            if (void 0 === this.previousDragX || !this.dragMoveTime || new Date() - this.dragMoveTime > 100) return 0;
            var t = this.getSlideDistance(-this.dragX, this.selectedIndex),
                e = this.previousDragX - this.dragX;
            return t > 0 && e > 0 ? 1 : t < 0 && e < 0 ? -1 : 0;
        }, o.staticClick = function (t, e) {
            var i = this.getParentCell(t.target),
                n = i && i.element,
                s = i && this.cells.indexOf(i);
            this.dispatchEvent("staticClick", t, [e, n, s]);
        }, o.onscroll = function () {
            var t = s(),
                e = this.pointerDownScroll.x - t.x,
                i = this.pointerDownScroll.y - t.y;
            (Math.abs(e) > 3 || Math.abs(i) > 3) && this._pointerDone();
        }, e;
    }),
    function (t, e) {
        "function" == typeof define && define.amd ? define("tap-listener/tap-listener", ["unipointer/unipointer"], function (i) {
            return e(t, i);
        }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e(t, require("unipointer")) : t.TapListener = e(t, t.Unipointer);
    }(window, function (t, e) {
        function i(t) {
            this.bindTap(t);
        }

        var n = i.prototype = Object.create(e.prototype);
        return n.bindTap = function (t) {
            t && (this.unbindTap(), this.tapElement = t, this._bindStartEvent(t, !0));
        }, n.unbindTap = function () {
            this.tapElement && (this._bindStartEvent(this.tapElement, !0), delete this.tapElement);
        }, n.pointerUp = function (i, n) {
            if (!this.isIgnoringMouseUp || "mouseup" != i.type) {
                var s = e.getPointerPoint(n),
                    o = this.tapElement.getBoundingClientRect(),
                    r = t.pageXOffset,
                    a = t.pageYOffset,
                    l = s.x >= o.left + r && s.x <= o.right + r && s.y >= o.top + a && s.y <= o.bottom + a;

                if (l && this.emitEvent("tap", [i, n]), "mouseup" != i.type) {
                    this.isIgnoringMouseUp = !0;
                    var h = this;
                    setTimeout(function () {
                        delete h.isIgnoringMouseUp;
                    }, 400);
                }
            }
        }, n.destroy = function () {
            this.pointerDone(), this.unbindTap();
        }, i;
    }),
    function (t, e) {
        "function" == typeof define && define.amd ? define("flickity/js/prev-next-button", ["./flickity", "tap-listener/tap-listener", "fizzy-ui-utils/utils"], function (i, n, s) {
            return e(t, i, n, s);
        }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e(t, require("./flickity"), require("tap-listener"), require("fizzy-ui-utils")) : e(t, t.Flickity, t.TapListener, t.fizzyUIUtils);
    }(window, function (t, e, i, n) {
        "use strict";

        function s(t, e) {
            this.direction = t, this.parent = e, this._create();
        }

        function o(t) {
            return "string" == typeof t ? t : "M " + t.x0 + ",50 L " + t.x1 + "," + (t.y1 + 50) + " L " + t.x2 + "," + (t.y2 + 50) + " L " + t.x3 + ",50  L " + t.x2 + "," + (50 - t.y2) + " L " + t.x1 + "," + (50 - t.y1) + " Z";
        }

        var r = "http://www.w3.org/2000/svg";
        s.prototype = Object.create(i.prototype), s.prototype._create = function () {
            this.isEnabled = !0, this.isPrevious = this.direction == -1;
            var t = this.parent.options.rightToLeft ? 1 : -1;
            this.isLeft = this.direction == t;
            var e = this.element = document.createElement("button");
            e.className = "flickity-button flickity-prev-next-button", e.className += this.isPrevious ? " previous" : " next", e.setAttribute("type", "button"), this.disable(), e.setAttribute("aria-label", this.isPrevious ? "Previous" : "Next");
            var i = this.createSVG();
            e.appendChild(i), this.on("tap", this.onTap), this.parent.on("select", this.update.bind(this)), this.on("pointerDown", this.parent.childUIPointerDown.bind(this.parent));
        }, s.prototype.activate = function () {
            this.bindTap(this.element), this.element.addEventListener("click", this), this.parent.element.appendChild(this.element);
        }, s.prototype.deactivate = function () {
            this.parent.element.removeChild(this.element), i.prototype.destroy.call(this), this.element.removeEventListener("click", this);
        }, s.prototype.createSVG = function () {
            var t = document.createElementNS(r, "svg");
            t.setAttribute("class", "flickity-button-icon"), t.setAttribute("viewBox", "0 0 100 100");
            var e = document.createElementNS(r, "path"),
                i = o(this.parent.options.arrowShape);
            return e.setAttribute("d", i), e.setAttribute("class", "arrow"), this.isLeft || e.setAttribute("transform", "translate(100, 100) rotate(180) "), t.appendChild(e), t;
        }, s.prototype.onTap = function () {
            if (this.isEnabled) {
                this.parent.uiChange();
                var t = this.isPrevious ? "previous" : "next";
                this.parent[t]();
            }
        }, s.prototype.handleEvent = n.handleEvent, s.prototype.onclick = function (t) {
            var e = document.activeElement;
            e && e == this.element && this.onTap(t, t);
        }, s.prototype.enable = function () {
            this.isEnabled || (this.element.disabled = !1, this.isEnabled = !0);
        }, s.prototype.disable = function () {
            this.isEnabled && (this.element.disabled = !0, this.isEnabled = !1);
        }, s.prototype.update = function () {
            var t = this.parent.slides;
            if (this.parent.options.wrapAround && t.length > 1) return void this.enable();
            var e = t.length ? t.length - 1 : 0,
                i = this.isPrevious ? 0 : e,
                n = this.parent.selectedIndex == i ? "disable" : "enable";
            this[n]();
        }, s.prototype.destroy = function () {
            this.deactivate();
        }, n.extend(e.defaults, {
            prevNextButtons: !0,
            arrowShape: {
                x0: 10,
                x1: 60,
                y1: 50,
                x2: 70,
                y2: 40,
                x3: 30
            }
        }), e.createMethods.push("_createPrevNextButtons");
        var a = e.prototype;
        return a._createPrevNextButtons = function () {
            this.options.prevNextButtons && (this.prevButton = new s(-1, this), this.nextButton = new s(1, this), this.on("activate", this.activatePrevNextButtons));
        }, a.activatePrevNextButtons = function () {
            this.prevButton.activate(), this.nextButton.activate(), this.on("deactivate", this.deactivatePrevNextButtons);
        }, a.deactivatePrevNextButtons = function () {
            this.prevButton.deactivate(), this.nextButton.deactivate(), this.off("deactivate", this.deactivatePrevNextButtons);
        }, e.PrevNextButton = s, e;
    }),
    function (t, e) {
        "function" == typeof define && define.amd ? define("flickity/js/page-dots", ["./flickity", "tap-listener/tap-listener", "fizzy-ui-utils/utils"], function (i, n, s) {
            return e(t, i, n, s);
        }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e(t, require("./flickity"), require("tap-listener"), require("fizzy-ui-utils")) : e(t, t.Flickity, t.TapListener, t.fizzyUIUtils);
    }(window, function (t, e, i, n) {
        function s(t) {
            this.parent = t, this._create();
        }

        s.prototype = new i(), s.prototype._create = function () {
            this.holder = document.createElement("ol"), this.holder.className = "flickity-page-dots", this.dots = [], this.on("tap", this.onTap), this.on("pointerDown", this.parent.childUIPointerDown.bind(this.parent));
        }, s.prototype.activate = function () {
            this.setDots(), this.bindTap(this.holder), this.parent.element.appendChild(this.holder);
        }, s.prototype.deactivate = function () {
            this.parent.element.removeChild(this.holder), i.prototype.destroy.call(this);
        }, s.prototype.setDots = function () {
            var t = this.parent.slides.length - this.dots.length;
            t > 0 ? this.addDots(t) : t < 0 && this.removeDots(-t);
        }, s.prototype.addDots = function (t) {
            for (var e = document.createDocumentFragment(), i = [], n = this.dots.length, s = n + t, o = n; o < s; o++) {
                var r = document.createElement("li");
                r.className = "dot", r.setAttribute("aria-label", "Page dot " + (o + 1)), e.appendChild(r), i.push(r);
            }

            this.holder.appendChild(e), this.dots = this.dots.concat(i);
        }, s.prototype.removeDots = function (t) {
            var e = this.dots.splice(this.dots.length - t, t);
            e.forEach(function (t) {
                this.holder.removeChild(t);
            }, this);
        }, s.prototype.updateSelected = function () {
            this.selectedDot && (this.selectedDot.className = "dot", this.selectedDot.removeAttribute("aria-current")), this.dots.length && (this.selectedDot = this.dots[this.parent.selectedIndex], this.selectedDot.className = "dot is-selected", this.selectedDot.setAttribute("aria-current", "step"));
        }, s.prototype.onTap = function (t) {
            var e = t.target;

            if ("LI" == e.nodeName) {
                this.parent.uiChange();
                var i = this.dots.indexOf(e);
                this.parent.select(i);
            }
        }, s.prototype.destroy = function () {
            this.deactivate();
        }, e.PageDots = s, n.extend(e.defaults, {
            pageDots: !0
        }), e.createMethods.push("_createPageDots");
        var o = e.prototype;
        return o._createPageDots = function () {
            this.options.pageDots && (this.pageDots = new s(this), this.on("activate", this.activatePageDots), this.on("select", this.updateSelectedPageDots), this.on("cellChange", this.updatePageDots), this.on("resize", this.updatePageDots), this.on("deactivate", this.deactivatePageDots));
        }, o.activatePageDots = function () {
            this.pageDots.activate();
        }, o.updateSelectedPageDots = function () {
            this.pageDots.updateSelected();
        }, o.updatePageDots = function () {
            this.pageDots.setDots();
        }, o.deactivatePageDots = function () {
            this.pageDots.deactivate();
        }, e.PageDots = s, e;
    }),
    function (t, e) {
        "function" == typeof define && define.amd ? define("flickity/js/player", ["ev-emitter/ev-emitter", "fizzy-ui-utils/utils", "./flickity"], function (t, i, n) {
            return e(t, i, n);
        }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e(require("ev-emitter"), require("fizzy-ui-utils"), require("./flickity")) : e(t.EvEmitter, t.fizzyUIUtils, t.Flickity);
    }(window, function (t, e, i) {
        function n(t) {
            this.parent = t, this.state = "stopped", this.onVisibilityChange = this.visibilityChange.bind(this), this.onVisibilityPlay = this.visibilityPlay.bind(this);
        }

        n.prototype = Object.create(t.prototype), n.prototype.play = function () {
            if ("playing" != this.state) {
                var t = document.hidden;
                if (t) return void document.addEventListener("visibilitychange", this.onVisibilityPlay);
                this.state = "playing", document.addEventListener("visibilitychange", this.onVisibilityChange), this.tick();
            }
        }, n.prototype.tick = function () {
            if ("playing" == this.state) {
                var t = this.parent.options.autoPlay;
                t = "number" == typeof t ? t : 3e3;
                var e = this;
                this.clear(), this.timeout = setTimeout(function () {
                    e.parent.next(!0), e.tick();
                }, t);
            }
        }, n.prototype.stop = function () {
            this.state = "stopped", this.clear(), document.removeEventListener("visibilitychange", this.onVisibilityChange);
        }, n.prototype.clear = function () {
            clearTimeout(this.timeout);
        }, n.prototype.pause = function () {
            "playing" == this.state && (this.state = "paused", this.clear());
        }, n.prototype.unpause = function () {
            "paused" == this.state && this.play();
        }, n.prototype.visibilityChange = function () {
            var t = document.hidden;
            this[t ? "pause" : "unpause"]();
        }, n.prototype.visibilityPlay = function () {
            this.play(), document.removeEventListener("visibilitychange", this.onVisibilityPlay);
        }, e.extend(i.defaults, {
            pauseAutoPlayOnHover: !0
        }), i.createMethods.push("_createPlayer");
        var s = i.prototype;
        return s._createPlayer = function () {
            this.player = new n(this), this.on("activate", this.activatePlayer), this.on("uiChange", this.stopPlayer), this.on("pointerDown", this.stopPlayer), this.on("deactivate", this.deactivatePlayer);
        }, s.activatePlayer = function () {
            this.options.autoPlay && (this.player.play(), this.element.addEventListener("mouseenter", this));
        }, s.playPlayer = function () {
            this.player.play();
        }, s.stopPlayer = function () {
            this.player.stop();
        }, s.pausePlayer = function () {
            this.player.pause();
        }, s.unpausePlayer = function () {
            this.player.unpause();
        }, s.deactivatePlayer = function () {
            this.player.stop(), this.element.removeEventListener("mouseenter", this);
        }, s.onmouseenter = function () {
            this.options.pauseAutoPlayOnHover && (this.player.pause(), this.element.addEventListener("mouseleave", this));
        }, s.onmouseleave = function () {
            this.player.unpause(), this.element.removeEventListener("mouseleave", this);
        }, i.Player = n, i;
    }),
    function (t, e) {
        "function" == typeof define && define.amd ? define("flickity/js/add-remove-cell", ["./flickity", "fizzy-ui-utils/utils"], function (i, n) {
            return e(t, i, n);
        }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e(t, require("./flickity"), require("fizzy-ui-utils")) : e(t, t.Flickity, t.fizzyUIUtils);
    }(window, function (t, e, i) {
        function n(t) {
            var e = document.createDocumentFragment();
            return t.forEach(function (t) {
                e.appendChild(t.element);
            }), e;
        }

        var s = e.prototype;
        return s.insert = function (t, e) {
            var i = this._makeCells(t);

            if (i && i.length) {
                var s = this.cells.length;
                e = void 0 === e ? s : e;
                var o = n(i),
                    r = e == s;
                if (r) this.slider.appendChild(o);
                else {
                    var a = this.cells[e].element;
                    this.slider.insertBefore(o, a);
                }
                if (0 === e) this.cells = i.concat(this.cells);
                else if (r) this.cells = this.cells.concat(i);
                else {
                    var l = this.cells.splice(e, s - e);
                    this.cells = this.cells.concat(i).concat(l);
                }
                this._sizeCells(i), this.cellChange(e, !0);
            }
        }, s.append = function (t) {
            this.insert(t, this.cells.length);
        }, s.prepend = function (t) {
            this.insert(t, 0);
        }, s.remove = function (t) {
            var e = this.getCells(t);

            if (e && e.length) {
                var n = this.cells.length - 1;
                e.forEach(function (t) {
                    t.remove();
                    var e = this.cells.indexOf(t);
                    n = Math.min(e, n), i.removeFrom(this.cells, t);
                }, this), this.cellChange(n, !0);
            }
        }, s.cellSizeChange = function (t) {
            var e = this.getCell(t);

            if (e) {
                e.getSize();
                var i = this.cells.indexOf(e);
                this.cellChange(i);
            }
        }, s.cellChange = function (t, e) {
            var i = this.selectedElement;
            this._positionCells(t), this._getWrapShiftCells(), this.setGallerySize();
            var n = this.getCell(i);
            n && (this.selectedIndex = this.getCellSlideIndex(n)), this.selectedIndex = Math.min(this.slides.length - 1, this.selectedIndex), this.emitEvent("cellChange", [t]), this.select(this.selectedIndex), e && this.positionSliderAtSelected();
        }, e;
    }),
    function (t, e) {
        "function" == typeof define && define.amd ? define("flickity/js/lazyload", ["./flickity", "fizzy-ui-utils/utils"], function (i, n) {
            return e(t, i, n);
        }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e(t, require("./flickity"), require("fizzy-ui-utils")) : e(t, t.Flickity, t.fizzyUIUtils);
    }(window, function (t, e, i) {
        "use strict";

        function n(t) {
            if ("IMG" == t.nodeName) {
                var e = t.getAttribute("data-flickity-lazyload"),
                    n = t.getAttribute("data-flickity-lazyload-src"),
                    s = t.getAttribute("data-flickity-lazyload-srcset");
                if (e || n || s) return [t];
            }

            var o = "img[data-flickity-lazyload], img[data-flickity-lazyload-src], img[data-flickity-lazyload-srcset]",
                r = t.querySelectorAll(o);
            return i.makeArray(r);
        }

        function s(t, e) {
            this.img = t, this.flickity = e, this.load();
        }

        e.createMethods.push("_createLazyload");
        var o = e.prototype;
        return o._createLazyload = function () {
            this.on("select", this.lazyLoad);
        }, o.lazyLoad = function () {
            var t = this.options.lazyLoad;

            if (t) {
                var e = "number" == typeof t ? t : 0,
                    i = this.getAdjacentCellElements(e),
                    o = [];
                i.forEach(function (t) {
                    var e = n(t);
                    o = o.concat(e);
                }), o.forEach(function (t) {
                    new s(t, this);
                }, this);
            }
        }, s.prototype.handleEvent = i.handleEvent, s.prototype.load = function () {
            this.img.addEventListener("load", this), this.img.addEventListener("error", this);
            var t = this.img.getAttribute("data-flickity-lazyload") || this.img.getAttribute("data-flickity-lazyload-src"),
                e = this.img.getAttribute("data-flickity-lazyload-srcset");
            this.img.src = t, e && this.img.setAttribute("srcset", e), this.img.removeAttribute("data-flickity-lazyload"), this.img.removeAttribute("data-flickity-lazyload-src"), this.img.removeAttribute("data-flickity-lazyload-srcset");
        }, s.prototype.onload = function (t) {
            this.complete(t, "flickity-lazyloaded");
        }, s.prototype.onerror = function (t) {
            this.complete(t, "flickity-lazyerror");
        }, s.prototype.complete = function (t, e) {
            this.img.removeEventListener("load", this), this.img.removeEventListener("error", this);
            var i = this.flickity.getParentCell(this.img),
                n = i && i.element;
            this.flickity.cellSizeChange(n), this.img.classList.add(e), this.flickity.dispatchEvent("lazyLoad", t, n);
        }, e.LazyLoader = s, e;
    }),
    function (t, e) {
        "function" == typeof define && define.amd ? define("flickity/js/index", ["./flickity", "./drag", "./prev-next-button", "./page-dots", "./player", "./add-remove-cell", "./lazyload"], e) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports && (module.exports = e(require("./flickity"), require("./drag"), require("./prev-next-button"), require("./page-dots"), require("./player"), require("./add-remove-cell"), require("./lazyload")));
    }(window, function (t) {
        return t;
    }),
    function (t, e) {
        "function" == typeof define && define.amd ? define("flickity-as-nav-for/as-nav-for", ["flickity/js/index", "fizzy-ui-utils/utils"], e) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e(require("flickity"), require("fizzy-ui-utils")) : t.Flickity = e(t.Flickity, t.fizzyUIUtils);
    }(window, function (t, e) {
        function i(t, e, i) {
            return (e - t) * i + t;
        }

        t.createMethods.push("_createAsNavFor");
        var n = t.prototype;
        return n._createAsNavFor = function () {
            this.on("activate", this.activateAsNavFor), this.on("deactivate", this.deactivateAsNavFor), this.on("destroy", this.destroyAsNavFor);
            var t = this.options.asNavFor;

            if (t) {
                var e = this;
                setTimeout(function () {
                    e.setNavCompanion(t);
                });
            }
        }, n.setNavCompanion = function (i) {
            i = e.getQueryElement(i);
            var n = t.data(i);

            if (n && n != this) {
                this.navCompanion = n;
                var s = this;
                this.onNavCompanionSelect = function () {
                    s.navCompanionSelect();
                }, n.on("select", this.onNavCompanionSelect), this.on("staticClick", this.onNavStaticClick), this.navCompanionSelect(!0);
            }
        }, n.navCompanionSelect = function (t) {
            if (this.navCompanion) {
                var e = this.navCompanion.selectedCells[0],
                    n = this.navCompanion.cells.indexOf(e),
                    s = n + this.navCompanion.selectedCells.length - 1,
                    o = Math.floor(i(n, s, this.navCompanion.cellAlign));

                if (this.selectCell(o, !1, t), this.removeNavSelectedElements(), !(o >= this.cells.length)) {
                    var r = this.cells.slice(n, s + 1);
                    this.navSelectedElements = r.map(function (t) {
                        return t.element;
                    }), this.changeNavSelectedClass("add");
                }
            }
        }, n.changeNavSelectedClass = function (t) {
            this.navSelectedElements.forEach(function (e) {
                e.classList[t]("is-nav-selected");
            });
        }, n.activateAsNavFor = function () {
            this.navCompanionSelect(!0);
        }, n.removeNavSelectedElements = function () {
            this.navSelectedElements && (this.changeNavSelectedClass("remove"), delete this.navSelectedElements);
        }, n.onNavStaticClick = function (t, e, i, n) {
            "number" == typeof n && this.navCompanion.selectCell(n);
        }, n.deactivateAsNavFor = function () {
            this.removeNavSelectedElements();
        }, n.destroyAsNavFor = function () {
            this.navCompanion && (this.navCompanion.off("select", this.onNavCompanionSelect), this.off("staticClick", this.onNavStaticClick), delete this.navCompanion);
        }, t;
    }),
    function (t, e) {
        "use strict";

        "function" == typeof define && define.amd ? define("imagesloaded/imagesloaded", ["ev-emitter/ev-emitter"], function (i) {
            return e(t, i);
        }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e(t, require("ev-emitter")) : t.imagesLoaded = e(t, t.EvEmitter);
    }("undefined" != typeof window ? window : void 0, function (t, e) {
        function i(t, e) {
            for (var i in e) {
                t[i] = e[i];
            }

            return t;
        }

        function n(t) {
            if (Array.isArray(t)) return t;
            var e = "object" == _typeof(t) && "number" == typeof t.length;
            return e ? h.call(t) : [t];
        }

        function s(t, e, o) {
            if (!(this instanceof s)) return new s(t, e, o);
            var r = t;
            return "string" == typeof t && (r = document.querySelectorAll(t)), r ? (this.elements = n(r), this.options = i({}, this.options), "function" == typeof e ? o = e : i(this.options, e), o && this.on("always", o), this.getImages(), a && (this.jqDeferred = new a.Deferred()), void setTimeout(this.check.bind(this))) : void l.error("Bad element for imagesLoaded " + (r || t));
        }

        function o(t) {
            this.img = t;
        }

        function r(t, e) {
            this.url = t, this.element = e, this.img = new Image();
        }

        var a = t.jQuery,
            l = t.console,
            h = Array.prototype.slice;
        s.prototype = Object.create(e.prototype), s.prototype.options = {}, s.prototype.getImages = function () {
            this.images = [], this.elements.forEach(this.addElementImages, this);
        }, s.prototype.addElementImages = function (t) {
            "IMG" == t.nodeName && this.addImage(t), this.options.background === !0 && this.addElementBackgroundImages(t);
            var e = t.nodeType;

            if (e && c[e]) {
                for (var i = t.querySelectorAll("img"), n = 0; n < i.length; n++) {
                    var s = i[n];
                    this.addImage(s);
                }

                if ("string" == typeof this.options.background) {
                    var o = t.querySelectorAll(this.options.background);

                    for (n = 0; n < o.length; n++) {
                        var r = o[n];
                        this.addElementBackgroundImages(r);
                    }
                }
            }
        };
        var c = {
            1: !0,
            9: !0,
            11: !0
        };
        return s.prototype.addElementBackgroundImages = function (t) {
            var e = getComputedStyle(t);
            if (e)
                for (var i = /url\((['"])?(.*?)\1\)/gi, n = i.exec(e.backgroundImage); null !== n;) {
                    var s = n && n[2];
                    s && this.addBackground(s, t), n = i.exec(e.backgroundImage);
                }
        }, s.prototype.addImage = function (t) {
            var e = new o(t);
            this.images.push(e);
        }, s.prototype.addBackground = function (t, e) {
            var i = new r(t, e);
            this.images.push(i);
        }, s.prototype.check = function () {
            function t(t, i, n) {
                setTimeout(function () {
                    e.progress(t, i, n);
                });
            }

            var e = this;
            return this.progressedCount = 0, this.hasAnyBroken = !1, this.images.length ? void this.images.forEach(function (e) {
                e.once("progress", t), e.check();
            }) : void this.complete();
        }, s.prototype.progress = function (t, e, i) {
            this.progressedCount++, this.hasAnyBroken = this.hasAnyBroken || !t.isLoaded, this.emitEvent("progress", [this, t, e]), this.jqDeferred && this.jqDeferred.notify && this.jqDeferred.notify(this, t), this.progressedCount == this.images.length && this.complete(), this.options.debug && l && l.log("progress: " + i, t, e);
        }, s.prototype.complete = function () {
            var t = this.hasAnyBroken ? "fail" : "done";

            if (this.isComplete = !0, this.emitEvent(t, [this]), this.emitEvent("always", [this]), this.jqDeferred) {
                var e = this.hasAnyBroken ? "reject" : "resolve";
                this.jqDeferred[e](this);
            }
        }, o.prototype = Object.create(e.prototype), o.prototype.check = function () {
            var t = this.getIsImageComplete();
            return t ? void this.confirm(0 !== this.img.naturalWidth, "naturalWidth") : (this.proxyImage = new Image(), this.proxyImage.addEventListener("load", this), this.proxyImage.addEventListener("error", this), this.img.addEventListener("load", this), this.img.addEventListener("error", this), void (this.proxyImage.src = this.img.src));
        }, o.prototype.getIsImageComplete = function () {
            return this.img.complete && this.img.naturalWidth;
        }, o.prototype.confirm = function (t, e) {
            this.isLoaded = t, this.emitEvent("progress", [this, this.img, e]);
        }, o.prototype.handleEvent = function (t) {
            var e = "on" + t.type;
            this[e] && this[e](t);
        }, o.prototype.onload = function () {
            this.confirm(!0, "onload"), this.unbindEvents();
        }, o.prototype.onerror = function () {
            this.confirm(!1, "onerror"), this.unbindEvents();
        }, o.prototype.unbindEvents = function () {
            this.proxyImage.removeEventListener("load", this), this.proxyImage.removeEventListener("error", this), this.img.removeEventListener("load", this), this.img.removeEventListener("error", this);
        }, r.prototype = Object.create(o.prototype), r.prototype.check = function () {
            this.img.addEventListener("load", this), this.img.addEventListener("error", this), this.img.src = this.url;
            var t = this.getIsImageComplete();
            t && (this.confirm(0 !== this.img.naturalWidth, "naturalWidth"), this.unbindEvents());
        }, r.prototype.unbindEvents = function () {
            this.img.removeEventListener("load", this), this.img.removeEventListener("error", this);
        }, r.prototype.confirm = function (t, e) {
            this.isLoaded = t, this.emitEvent("progress", [this, this.element, e]);
        }, s.makeJQueryPlugin = function (e) {
            e = e || t.jQuery, e && (a = e, a.fn.imagesLoaded = function (t, e) {
                var i = new s(this, t, e);
                return i.jqDeferred.promise(a(this));
            });
        }, s.makeJQueryPlugin(), s;
    }),
    function (t, e) {
        "function" == typeof define && define.amd ? define(["flickity/js/index", "imagesloaded/imagesloaded"], function (i, n) {
            return e(t, i, n);
        }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e(t, require("flickity"), require("imagesloaded")) : t.Flickity = e(t, t.Flickity, t.imagesLoaded);
    }(window, function (t, e, i) {
        "use strict";

        e.createMethods.push("_createImagesLoaded");
        var n = e.prototype;
        return n._createImagesLoaded = function () {
            this.on("activate", this.imagesLoaded);
        }, n.imagesLoaded = function () {
            function t(t, i) {
                var n = e.getParentCell(i.img);
                e.cellSizeChange(n && n.element), e.options.freeScroll || e.positionSliderAtSelected();
            }

            if (this.options.imagesLoaded) {
                var e = this;
                i(this.slider).on("progress", t);
            }
        }, e;
    });
"use strict";

function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
            return typeof obj;
        };
    } else {
        _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
    }
    return _typeof(obj);
}

/**
 * jQuery Bar Rating Plugin v1.2.2
 *
 * http://github.com/antennaio/jquery-bar-rating
 *
 * Copyright (c) 2012-2016 Kazik Pietruszewski
 *
 * This plugin is available under the MIT license.
 * http://www.opensource.org/licenses/mit-license.php
 */
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD
        define(['jquery'], factory);
    } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === 'object' && module.exports) {
        // Node/CommonJS
        module.exports = factory(require('jquery'));
    } else {
        // browser globals
        factory(jQuery);
    }
})(function ($) {
    var BarRating = function () {
        function BarRating() {
            var self = this; // wrap element in a wrapper div

            var wrapElement = function wrapElement() {
                var classes = ['br-wrapper'];

                if (self.options.theme !== '') {
                    classes.push('br-theme-' + self.options.theme);
                }

                self.$elem.wrap($('<div />', {
                    'class': classes.join(' ')
                }));
            }; // unwrap element


            var unwrapElement = function unwrapElement() {
                self.$elem.unwrap();
            }; // find option by value


            var findOption = function findOption(value) {
                if ($.isNumeric(value)) {
                    value = Math.floor(value);
                }

                return $('option[value="' + value + '"]', self.$elem);
            }; // get initial option


            var getInitialOption = function getInitialOption() {
                var initialRating = self.options.initialRating;

                if (!initialRating) {
                    return $('option:selected', self.$elem);
                }

                return findOption(initialRating);
            }; // get empty option


            var getEmptyOption = function getEmptyOption() {
                var $emptyOpt = self.$elem.find('option[value="' + self.options.emptyValue + '"]');

                if (!$emptyOpt.length && self.options.allowEmpty) {
                    $emptyOpt = $('<option />', {
                        'value': self.options.emptyValue
                    });
                    return $emptyOpt.prependTo(self.$elem);
                }

                return $emptyOpt;
            }; // get data


            var getData = function getData(key) {
                var data = self.$elem.data('barrating');

                if (typeof key !== 'undefined') {
                    return data[key];
                }

                return data;
            }; // set data


            var setData = function setData(key, value) {
                if (value !== null && _typeof(value) === 'object') {
                    self.$elem.data('barrating', value);
                } else {
                    self.$elem.data('barrating')[key] = value;
                }
            }; // save data on element


            var saveDataOnElement = function saveDataOnElement() {
                var $opt = getInitialOption();
                var $emptyOpt = getEmptyOption();
                var value = $opt.val();
                var text = $opt.data('html') ? $opt.data('html') : $opt.text(); // if the allowEmpty option is not set let's check if empty option exists in the select field

                var allowEmpty = self.options.allowEmpty !== null ? self.options.allowEmpty : !!$emptyOpt.length;
                var emptyValue = $emptyOpt.length ? $emptyOpt.val() : null;
                var emptyText = $emptyOpt.length ? $emptyOpt.text() : null;
                setData(null, {
                    userOptions: self.options,
                    // initial rating based on the OPTION value
                    ratingValue: value,
                    ratingText: text,
                    // rating will be restored by calling clear method
                    originalRatingValue: value,
                    originalRatingText: text,
                    // allow empty ratings?
                    allowEmpty: allowEmpty,
                    // rating value and text of the empty OPTION
                    emptyRatingValue: emptyValue,
                    emptyRatingText: emptyText,
                    // read-only state
                    readOnly: self.options.readonly,
                    // did the user already select a rating?
                    ratingMade: false
                });
            }; // remove data on element


            var removeDataOnElement = function removeDataOnElement() {
                self.$elem.removeData('barrating');
            }; // return current rating text


            var ratingText = function ratingText() {
                return getData('ratingText');
            }; // return current rating value


            var ratingValue = function ratingValue() {
                return getData('ratingValue');
            }; // build widget and return jQuery element


            var buildWidget = function buildWidget() {
                var $w = $('<div />', {
                    'class': 'br-widget'
                }); // create A elements that will replace OPTIONs

                self.$elem.find('option').each(function () {
                    var val, text, html, $a;
                    val = $(this).val(); // create ratings - but only if val is not defined as empty

                    if (val !== getData('emptyRatingValue')) {
                        text = $(this).text();
                        html = $(this).data('html');

                        if (html) {
                            text = html;
                        }

                        $a = $('<a />', {
                            'href': '#',
                            'data-rating-value': val,
                            'data-rating-text': text,
                            'html': self.options.showValues ? text : ''
                        });
                        $w.append($a);
                    }
                }); // append .br-current-rating div to the widget

                if (self.options.showSelectedRating) {
                    $w.append($('<div />', {
                        'text': '',
                        'class': 'br-current-rating'
                    }));
                } // additional classes for the widget


                if (self.options.reverse) {
                    $w.addClass('br-reverse');
                }

                if (self.options.readonly) {
                    $w.addClass('br-readonly');
                }

                return $w;
            }; // return a jQuery function name depending on the 'reverse' setting


            var nextAllorPreviousAll = function nextAllorPreviousAll() {
                if (getData('userOptions').reverse) {
                    return 'nextAll';
                } else {
                    return 'prevAll';
                }
            }; // set the value of the select field


            var setSelectFieldValue = function setSelectFieldValue(value) {
                // change selected option
                findOption(value).prop('selected', true);

                if (getData('userOptions').triggerChange) {
                    self.$elem.change();
                }
            }; // reset select field


            var resetSelectField = function resetSelectField() {
                $('option', self.$elem).prop('selected', function () {
                    return this.defaultSelected;
                });

                if (getData('userOptions').triggerChange) {
                    self.$elem.change();
                }
            }; // display the currently selected rating


            var showSelectedRating = function showSelectedRating(text) {
                // text undefined?
                text = text ? text : ratingText(); // special case when the selected rating is defined as empty

                if (text == getData('emptyRatingText')) {
                    text = '';
                } // update .br-current-rating div


                if (self.options.showSelectedRating) {
                    self.$elem.parent().find('.br-current-rating').text(text);
                }
            }; // return rounded fraction of a value (14.4 -> 40, 0.99 -> 90)


            var fraction = function fraction(value) {
                return Math.round(Math.floor(value * 10) / 10 % 1 * 100);
            }; // remove all classes from elements


            var resetStyle = function resetStyle() {
                // remove all classes starting with br-*
                self.$widget.find('a').removeClass(function (index, classes) {
                    return (classes.match(/(^|\s)br-\S+/g) || []).join(' ');
                });
            }; // apply style by setting classes on elements


            var applyStyle = function applyStyle() {
                var $a = self.$widget.find('a[data-rating-value="' + ratingValue() + '"]');
                var initialRating = getData('userOptions').initialRating;
                var baseValue = $.isNumeric(ratingValue()) ? ratingValue() : 0;
                var f = fraction(initialRating);
                var $all, $fractional;
                resetStyle(); // add classes

                $a.addClass('br-selected br-current')[nextAllorPreviousAll()]().addClass('br-selected');

                if (!getData('ratingMade') && $.isNumeric(initialRating)) {
                    if (initialRating <= baseValue || !f) {
                        return;
                    }

                    $all = self.$widget.find('a');
                    $fractional = $a.length ? $a[getData('userOptions').reverse ? 'prev' : 'next']() : $all[getData('userOptions').reverse ? 'last' : 'first']();
                    $fractional.addClass('br-fractional');
                    $fractional.addClass('br-fractional-' + f);
                }
            }; // check if the element is deselectable?


            var isDeselectable = function isDeselectable($element) {
                if (!getData('allowEmpty') || !getData('userOptions').deselectable) {
                    return false;
                }

                return ratingValue() == $element.attr('data-rating-value');
            }; // handle click events


            var attachClickHandler = function attachClickHandler($elements) {
                $elements.on('click.barrating', function (event) {
                    var $a = $(this),
                        options = getData('userOptions'),
                        value,
                        text;
                    event.preventDefault();
                    value = $a.attr('data-rating-value');
                    text = $a.attr('data-rating-text'); // is current and deselectable?

                    if (isDeselectable($a)) {
                        value = getData('emptyRatingValue');
                        text = getData('emptyRatingText');
                    } // remember selected rating


                    setData('ratingValue', value);
                    setData('ratingText', text);
                    setData('ratingMade', true);
                    setSelectFieldValue(value);
                    showSelectedRating(text);
                    applyStyle(); // onSelect callback

                    options.onSelect.call(self, ratingValue(), ratingText(), event);
                    return false;
                });
            }; // handle mouseenter events


            var attachMouseEnterHandler = function attachMouseEnterHandler($elements) {
                $elements.on('mouseenter.barrating', function () {
                    var $a = $(this);
                    resetStyle();
                    $a.addClass('br-active')[nextAllorPreviousAll()]().addClass('br-active');
                    showSelectedRating($a.attr('data-rating-text'));
                });
            }; // handle mouseleave events


            var attachMouseLeaveHandler = function attachMouseLeaveHandler($elements) {
                self.$widget.on('mouseleave.barrating blur.barrating', function () {
                    showSelectedRating();
                    applyStyle();
                });
            }; // somewhat primitive way to remove 300ms click delay on touch devices
            // for a more advanced solution consider setting `fastClicks` option to false
            // and using a library such as fastclick (https://github.com/ftlabs/fastclick)


            var fastClicks = function fastClicks($elements) {
                $elements.on('touchstart.barrating', function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    $(this).click();
                });
            }; // disable clicks


            var disableClicks = function disableClicks($elements) {
                $elements.on('click.barrating', function (event) {
                    event.preventDefault();
                });
            };

            var attachHandlers = function attachHandlers($elements) {
                // attach click event handler
                attachClickHandler($elements);

                if (self.options.hoverState) {
                    // attach mouseenter event handler
                    attachMouseEnterHandler($elements); // attach mouseleave event handler

                    attachMouseLeaveHandler($elements);
                }
            };

            var detachHandlers = function detachHandlers($elements) {
                // remove event handlers in the ".barrating" namespace
                $elements.off('.barrating');
            };

            var setupHandlers = function setupHandlers(readonly) {
                var $elements = self.$widget.find('a');

                if (getData('userOptions').fastClicks) {
                    fastClicks($elements);
                }

                if (readonly) {
                    detachHandlers($elements);
                    disableClicks($elements);
                } else {
                    attachHandlers($elements);
                }
            };

            this.show = function () {
                // run only once
                if (getData()) return; // wrap element

                wrapElement(); // save data

                saveDataOnElement(); // build & append widget to the DOM

                self.$widget = buildWidget();
                self.$widget.insertAfter(self.$elem);
                applyStyle();
                showSelectedRating();
                setupHandlers(self.options.readonly); // hide the select field

                self.$elem.hide();
            };

            this.readonly = function (state) {
                if (typeof state !== 'boolean' || getData('readOnly') == state) return;
                setupHandlers(state);
                setData('readOnly', state);
                self.$widget.toggleClass('br-readonly');
            };

            this.set = function (value) {
                var options = getData('userOptions');
                if (self.$elem.find('option[value="' + value + '"]').length === 0) return; // set data

                setData('ratingValue', value);
                setData('ratingText', self.$elem.find('option[value="' + value + '"]').text());
                setData('ratingMade', true);
                setSelectFieldValue(ratingValue());
                showSelectedRating(ratingText());
                applyStyle(); // onSelect callback

                if (!options.silent) {
                    options.onSelect.call(this, ratingValue(), ratingText());
                }
            };

            this.clear = function () {
                var options = getData('userOptions'); // restore original data

                setData('ratingValue', getData('originalRatingValue'));
                setData('ratingText', getData('originalRatingText'));
                setData('ratingMade', false);
                resetSelectField();
                showSelectedRating(ratingText());
                applyStyle(); // onClear callback

                options.onClear.call(this, ratingValue(), ratingText());
            };

            this.destroy = function () {
                var value = ratingValue();
                var text = ratingText();
                var options = getData('userOptions'); // detach handlers

                detachHandlers(self.$widget.find('a')); // remove widget

                self.$widget.remove(); // remove data

                removeDataOnElement(); // unwrap the element

                unwrapElement(); // show the element

                self.$elem.show(); // onDestroy callback

                options.onDestroy.call(this, value, text);
            };
        }

        BarRating.prototype.init = function (options, elem) {
            this.$elem = $(elem);
            this.options = $.extend({}, $.fn.barrating.defaults, options);
            return this.options;
        };

        return BarRating;
    }();

    $.fn.barrating = function (method, options) {
        return this.each(function () {
            var plugin = new BarRating(); // plugin works with select fields

            if (!$(this).is('select')) {
                $.error('Sorry, this plugin only works with select fields.');
            } // method supplied


            if (plugin.hasOwnProperty(method)) {
                plugin.init(options, this);

                if (method === 'show') {
                    return plugin.show(options);
                } else {
                    // plugin exists?
                    if (plugin.$elem.data('barrating')) {
                        plugin.$widget = $(this).next('.br-widget');
                        return plugin[method](options);
                    }
                } // no method supplied or only options supplied

            } else if (_typeof(method) === 'object' || !method) {
                options = method;
                plugin.init(options, this);
                return plugin.show();
            } else {
                $.error('Method ' + method + ' does not exist on jQuery.barrating');
            }
        });
    };

    $.fn.barrating.defaults = {
        theme: '',
        initialRating: null,
        // initial rating
        allowEmpty: null,
        // allow empty ratings?
        emptyValue: '',
        // this is the expected value of the empty rating
        showValues: false,
        // display rating values on the bars?
        showSelectedRating: true,
        // append a div with a rating to the widget?
        deselectable: true,
        // allow to deselect ratings?
        reverse: false,
        // reverse the rating?
        readonly: false,
        // make the rating ready-only?
        fastClicks: true,
        // remove 300ms click delay on touch devices?
        hoverState: true,
        // change state on hover?
        silent: false,
        // supress callbacks when controlling ratings programatically
        triggerChange: true,
        // trigger change event when ratings are set or reset
        onSelect: function onSelect(value, text, event) {
        },
        // callback fired when a rating is selected
        onClear: function onClear(value, text) {
        },
        // callback fired when a rating is cleared
        onDestroy: function onDestroy(value, text) {
        } // callback fired when a widget is destroyed

    };
    $.fn.barrating.BarRating = BarRating;
});
"use strict";

// jscs:disable

/* jshint -W071, -W074 */
// jscs:enable

/* globals jQuery */

/*
 * jQuery ezPlus 1.1.23
 * Demo's and documentation:
 * http://igorlino.github.io/elevatezoom-plus/
 *
 * licensed under MIT license.
 * http://en.wikipedia.org/wiki/MIT_License
 *
 */
if (typeof Object.create !== 'function') {
    Object.create = function (obj) {
        function F() {
        }

        F.prototype = obj;
        return new F();
    };
}

(function ($, window, document, undefined) {
    var EZP = {
        init: function init(options, elem) {
            var self = this;
            self.elem = elem;
            self.$elem = $(elem);
            self.options = $.extend({}, $.fn.ezPlus.options, self.responsiveConfig(options || {}));
            self.imageSrc = self.$elem.attr('data-' + self.options.attrImageZoomSrc) ? self.$elem.attr('data-' + self.options.attrImageZoomSrc) : self.$elem.attr('src');

            if (!self.options.enabled) {
                return;
            } //TINT OVERRIDE SETTINGS


            if (self.options.tint) {
                self.options.lensColour = 'transparent'; //colour of the lens background

                self.options.lensOpacity = '1'; //opacity of the lens
            } //INNER OVERRIDE SETTINGS


            if (self.options.zoomType === 'inner') {
                self.options.showLens = false;
            } // LENS OVERRIDE SETTINGS


            if (self.options.zoomType === 'lens') {
                self.options.zoomWindowWidth = 0;
            } //UUID WHEN MISSING IDENTIFIER


            if (self.options.zoomId === -1) {
                self.options.zoomId = generateUUID();
            } //Remove alt on hover


            self.$elem.parent().removeAttr('title').removeAttr('alt');
            self.zoomImage = self.imageSrc;
            self.refresh(1); //Create the image swap from the gallery

            var galleryEvent = self.options.galleryEvent + '.ezpspace';
            galleryEvent += self.options.touchEnabled ? ' touchend.ezpspace' : '';
            self.$galleries = $(self.options.gallery ? '#' + self.options.gallery : self.options.gallerySelector);
            self.$galleries.on(galleryEvent, self.options.galleryItem, function (e) {
                //Set a class on the currently active gallery image
                if (self.options.galleryActiveClass) {
                    $(self.options.galleryItem, self.$galleries).removeClass(self.options.galleryActiveClass);
                    $(this).addClass(self.options.galleryActiveClass);
                } //stop any link on the a tag from working


                if (this.tagName === 'A') {
                    e.preventDefault();
                } //call the swap image function


                if ($(this).data(self.options.attrImageZoomSrc)) {
                    self.zoomImagePre = $(this).data(self.options.attrImageZoomSrc);
                } else {
                    self.zoomImagePre = $(this).data('image');
                }

                self.swaptheimage($(this).data('image'), self.zoomImagePre);

                if (this.tagName === 'A') {
                    return false;
                }
            });

            function generateUUID() {
                var d = new Date().getTime();
                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = (d + Math.random() * 16) % 16 | 0; // jshint ignore:line

                    d = Math.floor(d / 16); // jshint ignore:line

                    return (c === 'x' ? r : r & 0x3 | 0x8).toString(16); // jshint ignore:line
                });
                return uuid;
            }
        },
        refresh: function refresh(length) {
            var self = this;
            setTimeout(function () {
                self.fetch(self.imageSrc, self.$elem, self.options.minZoomLevel);
            }, length || self.options.refresh);
        },
        fetch: function fetch(imgsrc, element, minZoom) {
            //get the image
            var self = this;
            var newImg = new Image();

            newImg.onload = function () {
                //set the large image dimensions - used to calculte ratio's
                if (newImg.width / element.width() <= minZoom) {
                    self.largeWidth = element.width() * minZoom;
                } else {
                    self.largeWidth = newImg.width;
                }

                if (newImg.height / element.height() <= minZoom) {
                    self.largeHeight = element.height() * minZoom;
                } else {
                    self.largeHeight = newImg.height;
                } //once image is loaded start the calls


                self.startZoom();
                self.currentImage = self.imageSrc; //let caller know image has been loaded

                self.options.onZoomedImageLoaded(self.$elem);
            };

            self.setImageSource(newImg, imgsrc); // this must be done AFTER setting onload

            return;
        },
        setImageSource: function setImageSource(image, src) {
            //sets an image's source.
            image.src = src;
        },
        startZoom: function startZoom() {
            var self = this; //get dimensions of the non zoomed image

            self.nzWidth = self.$elem.width();
            self.nzHeight = self.$elem.height(); //activated elements

            self.isWindowActive = false;
            self.isLensActive = false;
            self.isTintActive = false;
            self.overWindow = false; //CrossFade Wrapper

            if (self.options.imageCrossfade) {
                var elementZoomWrapper = $('<div class="zoomWrapper"/>').css({
                    height: self.nzHeight,
                    width: self.nzWidth
                });
                self.zoomWrap = self.$elem.wrap(elementZoomWrapper);
                self.$elem.css({
                    position: 'absolute'
                });
            }

            self.zoomLock = 1;
            self.scrollingLock = false;
            self.changeBgSize = false;
            self.currentZoomLevel = self.options.zoomLevel; //get offset of the non zoomed image

            self.updateOffset(self); //calculate the width ratio of the large/small image

            self.widthRatio = self.largeWidth / self.currentZoomLevel / self.nzWidth;
            self.heightRatio = self.largeHeight / self.currentZoomLevel / self.nzHeight;

            function getWindowZoomStyle() {
                return {
                    display: 'none',
                    position: 'absolute',
                    height: self.options.zoomWindowHeight,
                    width: self.options.zoomWindowWidth,
                    border: '' + self.options.borderSize + 'px solid ' + self.options.borderColour,
                    backgroundSize: '' + self.largeWidth / self.currentZoomLevel + 'px ' + self.largeHeight / self.currentZoomLevel + 'px',
                    backgroundPosition: '0px 0px',
                    backgroundRepeat: 'no-repeat',
                    backgroundColor: '' + self.options.zoomWindowBgColour,
                    overflow: 'hidden',
                    zIndex: 100
                };
            } //if window zoom


            if (self.options.zoomType === 'window') {
                self.zoomWindowStyle = getWindowZoomStyle();
            }

            function getInnerZoomStyle() {
                //has a border been put on the image? Lets cater for this
                var borderWidth = self.$elem.css('border-left-width');
                if (self.options.scrollZoom) self.zoomLens = $('<div class="zoomLens"/>');
                return {
                    display: 'none',
                    position: 'absolute',
                    height: self.nzHeight,
                    width: self.nzWidth,
                    marginTop: borderWidth,
                    marginLeft: borderWidth,
                    border: '' + self.options.borderSize + 'px solid ' + self.options.borderColour,
                    backgroundPosition: '0px 0px',
                    backgroundRepeat: 'no-repeat',
                    cursor: self.options.cursor,
                    overflow: 'hidden',
                    zIndex: self.options.zIndex
                };
            } //if inner  zoom


            if (self.options.zoomType === 'inner') {
                self.zoomWindowStyle = getInnerZoomStyle();
            }

            function getWindowLensStyle() {
                // adjust images less than the window height
                if (self.nzHeight < self.options.zoomWindowHeight / self.heightRatio) {
                    self.lensHeight = self.nzHeight;
                } else {
                    self.lensHeight = self.options.zoomWindowHeight / self.heightRatio;
                }

                if (self.largeWidth < self.options.zoomWindowWidth) {
                    self.lensWidth = self.nzWidth;
                } else {
                    self.lensWidth = self.options.zoomWindowWidth / self.widthRatio;
                }

                return {
                    display: 'none',
                    position: 'absolute',
                    height: self.lensHeight,
                    width: self.lensWidth,
                    border: '' + self.options.lensBorderSize + 'px' + ' solid ' + self.options.lensBorderColour,
                    backgroundPosition: '0px 0px',
                    backgroundRepeat: 'no-repeat',
                    backgroundColor: self.options.lensColour,
                    opacity: self.options.lensOpacity,
                    cursor: self.options.cursor,
                    zIndex: 999,
                    overflow: 'hidden'
                };
            } //lens style for window zoom


            if (self.options.zoomType === 'window') {
                self.lensStyle = getWindowLensStyle();
            } //tint style


            self.tintStyle = {
                display: 'block',
                position: 'absolute',
                height: self.nzHeight,
                width: self.nzWidth,
                backgroundColor: self.options.tintColour,
                opacity: 0
            }; //lens style for lens zoom with optional round for modern browsers

            self.lensRound = {};

            if (self.options.zoomType === 'lens') {
                self.lensStyle = {
                    display: 'none',
                    position: 'absolute',
                    "float": 'left',
                    height: self.options.lensSize,
                    width: self.options.lensSize,
                    border: '' + self.options.borderSize + 'px solid ' + self.options.borderColour,
                    backgroundPosition: '0px 0px',
                    backgroundRepeat: 'no-repeat',
                    backgroundColor: self.options.lensColour,
                    cursor: self.options.cursor
                };
            } //does not round in all browsers


            if (self.options.lensShape === 'round') {
                self.lensRound = {
                    borderRadius: self.options.lensSize / 2 + self.options.borderSize
                };
            } //create the div's                                                + ""
            //self.zoomContainer = $('<div/>').addClass('zoomContainer').css({"position":"relative", "height":self.nzHeight, "width":self.nzWidth});


            self.zoomContainer = $('<div class="' + self.options.container + '" ' + 'uuid="' + self.options.zoomId + '"/>');
            self.zoomContainer.css({
                position: 'absolute',
                top: self.nzOffset.top,
                left: self.nzOffset.left,
                height: self.nzHeight,
                width: self.nzWidth,
                zIndex: self.options.zIndex
            });

            if (self.$elem.attr('id')) {
                self.zoomContainer.attr('id', self.$elem.attr('id') + '-' + self.options.container);
            }

            $(self.options.zoomContainerAppendTo).append(self.zoomContainer); //this will add overflow hidden and contrain the lens on lens mode

            if (self.options.containLensZoom && self.options.zoomType === 'lens') {
                self.zoomContainer.css('overflow', 'hidden');
            }

            if (self.options.zoomType !== 'inner') {
                self.zoomLens = $('<div class="zoomLens"/>').css($.extend({}, self.lensStyle, self.lensRound)).appendTo(self.zoomContainer).click(function () {
                    self.$elem.trigger('click');
                });

                if (self.options.tint) {
                    self.tintContainer = $('<div class="tintContainer"/>');
                    self.zoomTint = $('<div class="zoomTint"/>').css(self.tintStyle);
                    self.zoomLens.wrap(self.tintContainer);
                    self.zoomTintcss = self.zoomLens.after(self.zoomTint); //if tint enabled - set an image to show over the tint

                    self.zoomTintImage = $('<img src="' + self.$elem.attr('src') + '">').css({
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        height: self.nzHeight,
                        width: self.nzWidth,
                        maxWidth: 'none'
                    }).appendTo(self.zoomLens).click(function () {
                        self.$elem.trigger('click');
                    });
                }
            } //create zoom window


            var targetZoomContainer = isNaN(self.options.zoomWindowPosition) ? 'body' : self.zoomContainer;
            self.zoomWindow = $('<div class="zoomWindow"/>').css($.extend({
                zIndex: 999,
                top: self.windowOffsetTop,
                left: self.windowOffsetLeft
            }, self.zoomWindowStyle)).appendTo(targetZoomContainer).click(function () {
                self.$elem.trigger('click');
            });
            self.zoomWindowContainer = $('<div class="zoomWindowContainer" />').css({
                width: self.options.zoomWindowWidth
            });
            self.zoomWindow.wrap(self.zoomWindowContainer);

            if (self.options.zoomType === 'lens') {
                self.zoomContainer.css('display', 'none');
                self.zoomLens.css({
                    backgroundImage: 'url("' + self.imageSrc + '")'
                });
            }

            if (self.options.zoomType === 'window') {
                self.zoomWindow.css({
                    backgroundImage: 'url("' + self.imageSrc + '")'
                });
            }

            if (self.options.zoomType === 'inner') {
                self.zoomWindow.css({
                    backgroundImage: 'url("' + self.imageSrc + '")'
                });
            }
            /*-------------------END THE ZOOM WINDOW AND LENS----------------------------------*/


            if (self.options.touchEnabled) {
                //touch events
                self.$elem.on('touchmove.ezpspace', function (e) {
                    e.preventDefault();
                    var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
                    self.setPosition(touch);
                });
                self.zoomContainer.on('touchmove.ezpspace', function (e) {
                    self.setElements('show');
                    e.preventDefault();
                    var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
                    self.setPosition(touch);
                });
                self.zoomContainer.on('touchend.ezpspace', function (e) {
                    self.showHideWindow('hide');

                    if (self.options.showLens) {
                        self.showHideLens('hide');
                    }

                    if (self.options.tint && self.options.zoomType !== 'inner') {
                        self.showHideTint('hide');
                    }
                });
                self.$elem.on('touchend.ezpspace', function (e) {
                    self.showHideWindow('hide');

                    if (self.options.showLens) {
                        self.showHideLens('hide');
                    }

                    if (self.options.tint && self.options.zoomType !== 'inner') {
                        self.showHideTint('hide');
                    }
                });

                if (self.options.showLens) {
                    self.zoomLens.on('touchmove.ezpspace', function (e) {
                        e.preventDefault();
                        var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
                        self.setPosition(touch);
                    });
                    self.zoomLens.on('touchend.ezpspace', function (e) {
                        self.showHideWindow('hide');

                        if (self.options.showLens) {
                            self.showHideLens('hide');
                        }

                        if (self.options.tint && self.options.zoomType !== 'inner') {
                            self.showHideTint('hide');
                        }
                    });
                }
            } //Needed to work in IE


            self.$elem.on('mousemove.ezpspace', function (e) {
                if (self.overWindow === false) {
                    self.setElements('show');
                } //make sure on orientation change the setposition is not fired


                if (self.lastX !== e.clientX || self.lastY !== e.clientY) {
                    self.setPosition(e);
                    self.currentLoc = e;
                }

                self.lastX = e.clientX;
                self.lastY = e.clientY;
            });
            self.zoomContainer.on('click.ezpspace touchstart.ezpspace', self.options.onImageClick);
            self.zoomContainer.on('mousemove.ezpspace', function (e) {
                if (self.overWindow === false) {
                    self.setElements('show');
                }

                mouseMoveZoomHandler(e);
            });

            function mouseMoveZoomHandler(e) {
                //self.overWindow = true;
                //make sure on orientation change the setposition is not fired
                if (self.lastX !== e.clientX || self.lastY !== e.clientY) {
                    self.setPosition(e);
                    self.currentLoc = e;
                }

                self.lastX = e.clientX;
                self.lastY = e.clientY;
            }

            var elementToTrack = null;

            if (self.options.zoomType !== 'inner') {
                elementToTrack = self.zoomLens;
            }

            if (self.options.tint && self.options.zoomType !== 'inner') {
                elementToTrack = self.zoomTint;
            }

            if (self.options.zoomType === 'inner') {
                elementToTrack = self.zoomWindow;
            } //register the mouse tracking


            if (elementToTrack) {
                elementToTrack.on('mousemove.ezpspace', mouseMoveZoomHandler);
            } //  lensFadeOut: 500,  zoomTintFadeIn


            self.zoomContainer.add(self.$elem).mouseenter(function () {
                if (self.overWindow === false) {
                    self.setElements('show');
                }
            }).mouseleave(function () {
                if (!self.scrollLock) {
                    self.setElements('hide');
                    self.options.onDestroy(self.$elem);
                }
            }); //end ove image

            if (self.options.zoomType !== 'inner') {
                self.zoomWindow.mouseenter(function () {
                    self.overWindow = true;
                    self.setElements('hide');
                }).mouseleave(function () {
                    self.overWindow = false;
                });
            } //end ove image
            // var delta = parseInt(e.originalEvent.wheelDelta || -e.originalEvent.detail);
            //      $(this).empty();
            //    return false;
            //fix for initial zoom setting
            //if (self.options.zoomLevel !== 1) {
            //    	self.changeZoomLevel(self.currentZoomLevel);
            //}
            //set the min zoomlevel


            if (self.options.minZoomLevel) {
                self.minZoomLevel = self.options.minZoomLevel;
            } else {
                self.minZoomLevel = self.options.scrollZoomIncrement * 2;
            }

            if (self.options.scrollZoom) {
                //see compatibility of mouse events at https://developer.mozilla.org/en-US/docs/Web/Events/mousewheel
                self.zoomContainer.add(self.$elem).on('wheel DOMMouseScroll MozMousePixelScroll', function (e) {
                    // in IE there is issue with firing of mouseleave - So check whether still scrolling
                    // and on mouseleave check if scrolllock
                    self.scrollLock = true;
                    clearTimeout($.data(this, 'timer'));
                    $.data(this, 'timer', setTimeout(function () {
                        self.scrollLock = false; //do something
                    }, 250));
                    var theEvent = e.originalEvent.deltaY || e.originalEvent.detail * -1; //this.scrollTop += ( delta < 0 ? 1 : -1 ) * 30;
                    //   e.preventDefault();

                    e.stopImmediatePropagation();
                    e.stopPropagation();
                    e.preventDefault();

                    if (theEvent === 0) {
                        // fixes last event inversion bug
                        return false;
                    }

                    var nextZoomLevel;

                    if (theEvent / 120 > 0) {
                        nextZoomLevel = parseFloat(self.currentZoomLevel) - self.options.scrollZoomIncrement; //scrolling up

                        if (nextZoomLevel >= parseFloat(self.minZoomLevel)) {
                            self.changeZoomLevel(nextZoomLevel);
                        }
                    } else {
                        //scrolling down
                        //Check if it has to maintain original zoom window aspect ratio or not
                        if (!self.fullheight && !self.fullwidth || !self.options.mantainZoomAspectRatio) {
                            nextZoomLevel = parseFloat(self.currentZoomLevel) + self.options.scrollZoomIncrement;

                            if (self.options.maxZoomLevel) {
                                if (nextZoomLevel <= self.options.maxZoomLevel) {
                                    self.changeZoomLevel(nextZoomLevel);
                                }
                            } else {
                                //andy
                                self.changeZoomLevel(nextZoomLevel);
                            }
                        }
                    }

                    return false;
                });
            }
        },
        destroy: function destroy() {
            var self = this;
            self.$elem.off('.ezpspace');
            self.$galleries.off('.ezpspace');
            $(self.zoomContainer).remove();

            if (self.options.loadingIcon && !!self.spinner && !!self.spinner.length) {
                self.spinner.remove();
                delete self.spinner;
            }
        },
        getIdentifier: function getIdentifier() {
            var self = this;
            return self.options.zoomId;
        },
        setElements: function setElements(type) {
            var self = this;

            if (!self.options.zoomEnabled) {
                return false;
            }

            if (type === 'show') {
                if (self.isWindowSet) {
                    if (self.options.zoomType === 'inner') {
                        self.showHideWindow('show');
                    }

                    if (self.options.zoomType === 'window') {
                        self.showHideWindow('show');
                    }

                    if (self.options.showLens) {
                        self.showHideZoomContainer('show');
                        self.showHideLens('show');
                    }

                    if (self.options.tint && self.options.zoomType !== 'inner') {
                        self.showHideTint('show');
                    }
                }
            }

            if (type === 'hide') {
                if (self.options.zoomType === 'window') {
                    self.showHideWindow('hide');
                }

                if (!self.options.tint) {
                    self.showHideWindow('hide');
                }

                if (self.options.showLens) {
                    self.showHideZoomContainer('hide');
                    self.showHideLens('hide');
                }

                if (self.options.tint) {
                    self.showHideTint('hide');
                }
            }
        },
        setPosition: function setPosition(e) {
            var self = this;

            if (!self.options.zoomEnabled || e === undefined) {
                return false;
            } //recaclc offset each time in case the image moves
            //this can be caused by other on page elements


            self.nzHeight = self.$elem.height();
            self.nzWidth = self.$elem.width();
            self.updateOffset(self);

            if (self.options.tint && self.options.zoomType !== 'inner') {
                self.zoomTint.css({
                    top: 0,
                    left: 0
                });
            } //set responsive
            //will checking if the image needs changing before running this code work faster?


            if (self.options.responsive && !self.options.scrollZoom) {
                if (self.options.showLens) {
                    var lensHeight, lensWidth;

                    if (self.nzHeight < self.options.zoomWindowWidth / self.widthRatio) {
                        self.lensHeight = self.nzHeight;
                    } else {
                        self.lensHeight = self.options.zoomWindowHeight / self.heightRatio;
                    }

                    if (self.largeWidth < self.options.zoomWindowWidth) {
                        self.lensWidth = self.nzWidth;
                    } else {
                        self.lensWidth = self.options.zoomWindowWidth / self.widthRatio;
                    }

                    self.widthRatio = self.largeWidth / self.nzWidth;
                    self.heightRatio = self.largeHeight / self.nzHeight;

                    if (self.options.zoomType !== 'lens') {
                        //possibly dont need to keep recalcalculating
                        //if the lens is heigher than the image, then set lens size to image size
                        if (self.nzHeight < self.options.zoomWindowWidth / self.widthRatio) {
                            self.lensHeight = self.nzHeight;
                        } else {
                            self.lensHeight = self.options.zoomWindowHeight / self.heightRatio;
                        }

                        if (self.nzWidth < self.options.zoomWindowHeight / self.heightRatio) {
                            self.lensWidth = self.nzWidth;
                        } else {
                            self.lensWidth = self.options.zoomWindowWidth / self.widthRatio;
                        }

                        self.zoomLens.css({
                            width: self.lensWidth,
                            height: self.lensHeight
                        });

                        if (self.options.tint) {
                            self.zoomTintImage.css({
                                width: self.nzWidth,
                                height: self.nzHeight
                            });
                        }
                    }

                    if (self.options.zoomType === 'lens') {
                        self.zoomLens.css({
                            width: self.options.lensSize,
                            height: self.options.lensSize
                        });
                    } //end responsive image change

                }
            } //container fix


            self.zoomContainer.css({
                top: self.nzOffset.top,
                left: self.nzOffset.left,
                width: self.nzWidth,
                // new code
                height: self.nzHeight // new code

            });
            self.mouseLeft = parseInt(e.pageX - self.nzOffset.left);
            self.mouseTop = parseInt(e.pageY - self.nzOffset.top); //calculate the Location of the Lens
            //calculate the bound regions - but only if zoom window

            if (self.options.zoomType === 'window') {
                var zoomLensHeight = self.zoomLens.height() / 2;
                var zoomLensWidth = self.zoomLens.width() / 2;
                self.Etoppos = self.mouseTop < 0 + zoomLensHeight;
                self.Eboppos = self.mouseTop > self.nzHeight - zoomLensHeight - self.options.lensBorderSize * 2;
                self.Eloppos = self.mouseLeft < 0 + zoomLensWidth;
                self.Eroppos = self.mouseLeft > self.nzWidth - zoomLensWidth - self.options.lensBorderSize * 2;
            } //calculate the bound regions - but only for inner zoom


            if (self.options.zoomType === 'inner') {
                self.Etoppos = self.mouseTop < self.nzHeight / 2 / self.heightRatio;
                self.Eboppos = self.mouseTop > self.nzHeight - self.nzHeight / 2 / self.heightRatio;
                self.Eloppos = self.mouseLeft < 0 + self.nzWidth / 2 / self.widthRatio;
                self.Eroppos = self.mouseLeft > self.nzWidth - self.nzWidth / 2 / self.widthRatio - self.options.lensBorderSize * 2;
            } // if the mouse position of the slider is one of the outerbounds, then hide  window and lens


            if (self.mouseLeft < 0 || self.mouseTop < 0 || self.mouseLeft > self.nzWidth || self.mouseTop > self.nzHeight) {
                self.setElements('hide');
                return;
            } //else continue with operations
            else {
                //lens options
                if (self.options.showLens) {
                    //		self.showHideLens('show');
                    //set background position of lens
                    self.lensLeftPos = Math.floor(self.mouseLeft - self.zoomLens.width() / 2);
                    self.lensTopPos = Math.floor(self.mouseTop - self.zoomLens.height() / 2);
                } //adjust the background position if the mouse is in one of the outer regions
                //Top region


                if (self.Etoppos) {
                    self.lensTopPos = 0;
                } //Left Region


                if (self.Eloppos) {
                    self.windowLeftPos = 0;
                    self.lensLeftPos = 0;
                    self.tintpos = 0;
                } //Set bottom and right region for window mode


                if (self.options.zoomType === 'window') {
                    if (self.Eboppos) {
                        self.lensTopPos = Math.max(self.nzHeight - self.zoomLens.height() - self.options.lensBorderSize * 2, 0);
                    }

                    if (self.Eroppos) {
                        self.lensLeftPos = self.nzWidth - self.zoomLens.width() - self.options.lensBorderSize * 2;
                    }
                } //Set bottom and right region for inner mode


                if (self.options.zoomType === 'inner') {
                    if (self.Eboppos) {
                        self.lensTopPos = Math.max(self.nzHeight - self.options.lensBorderSize * 2, 0);
                    }

                    if (self.Eroppos) {
                        self.lensLeftPos = self.nzWidth - self.nzWidth - self.options.lensBorderSize * 2;
                    }
                } //if lens zoom


                if (self.options.zoomType === 'lens') {
                    self.windowLeftPos = ((e.pageX - self.nzOffset.left) * self.widthRatio - self.zoomLens.width() / 2) * -1;
                    self.windowTopPos = ((e.pageY - self.nzOffset.top) * self.heightRatio - self.zoomLens.height() / 2) * -1;
                    self.zoomLens.css({
                        backgroundPosition: '' + self.windowLeftPos + 'px ' + self.windowTopPos + 'px'
                    });

                    if (self.changeBgSize) {
                        if (self.nzHeight > self.nzWidth) {
                            if (self.options.zoomType === 'lens') {
                                self.zoomLens.css({
                                    backgroundSize: '' + self.largeWidth / self.newvalueheight + 'px ' + self.largeHeight / self.newvalueheight + 'px'
                                });
                            }

                            self.zoomWindow.css({
                                backgroundSize: '' + self.largeWidth / self.newvalueheight + 'px ' + self.largeHeight / self.newvalueheight + 'px'
                            });
                        } else {
                            if (self.options.zoomType === 'lens') {
                                self.zoomLens.css({
                                    backgroundSize: '' + self.largeWidth / self.newvaluewidth + 'px ' + self.largeHeight / self.newvaluewidth + 'px'
                                });
                            }

                            self.zoomWindow.css({
                                backgroundSize: '' + self.largeWidth / self.newvaluewidth + 'px ' + self.largeHeight / self.newvaluewidth + 'px'
                            });
                        }

                        self.changeBgSize = false;
                    }

                    self.setWindowPosition(e);
                } //if tint zoom


                if (self.options.tint && self.options.zoomType !== 'inner') {
                    self.setTintPosition(e);
                } //set the css background position


                if (self.options.zoomType === 'window') {
                    self.setWindowPosition(e);
                }

                if (self.options.zoomType === 'inner') {
                    self.setWindowPosition(e);
                }

                if (self.options.showLens) {
                    if (self.fullwidth && self.options.zoomType !== 'lens') {
                        self.lensLeftPos = 0;
                    }

                    self.zoomLens.css({
                        left: self.lensLeftPos,
                        top: self.lensTopPos
                    });
                }
            } //end else

        },
        showHideZoomContainer: function showHideZoomContainer(change) {
            var self = this;

            if (change === 'show') {
                if (self.zoomContainer) {
                    self.zoomContainer.show();
                }
            }

            if (change === 'hide') {
                if (self.zoomContainer) {
                    self.zoomContainer.hide();
                }
            }
        },
        showHideWindow: function showHideWindow(change) {
            var self = this;

            if (change === 'show') {
                if (!self.isWindowActive && self.zoomWindow) {
                    self.options.onShow(self);

                    if (self.options.zoomWindowFadeIn) {
                        self.zoomWindow.stop(true, true, false).fadeIn(self.options.zoomWindowFadeIn);
                    } else {
                        self.zoomWindow.show();
                    }

                    self.isWindowActive = true;
                }
            }

            if (change === 'hide') {
                if (self.isWindowActive) {
                    if (self.options.zoomWindowFadeOut) {
                        self.zoomWindow.stop(true, true).fadeOut(self.options.zoomWindowFadeOut, function () {
                            if (self.loop) {
                                //stop moving the zoom window when zoom window is faded out
                                clearInterval(self.loop);
                                self.loop = false;
                            }
                        });
                    } else {
                        self.zoomWindow.hide();
                    }

                    self.options.onHide(self);
                    self.isWindowActive = false;
                }
            }
        },
        showHideLens: function showHideLens(change) {
            var self = this;

            if (change === 'show') {
                if (!self.isLensActive) {
                    if (self.zoomLens) {
                        if (self.options.lensFadeIn) {
                            self.zoomLens.stop(true, true, false).fadeIn(self.options.lensFadeIn);
                        } else {
                            self.zoomLens.show();
                        }
                    }

                    self.isLensActive = true;
                }
            }

            if (change === 'hide') {
                if (self.isLensActive) {
                    if (self.zoomLens) {
                        if (self.options.lensFadeOut) {
                            self.zoomLens.stop(true, true).fadeOut(self.options.lensFadeOut);
                        } else {
                            self.zoomLens.hide();
                        }
                    }

                    self.isLensActive = false;
                }
            }
        },
        showHideTint: function showHideTint(change) {
            var self = this;

            if (change === 'show') {
                if (!self.isTintActive && self.zoomTint) {
                    if (self.options.zoomTintFadeIn) {
                        self.zoomTint.css('opacity', self.options.tintOpacity).animate().stop(true, true).fadeIn('slow');
                    } else {
                        self.zoomTint.css('opacity', self.options.tintOpacity).animate();
                        self.zoomTint.show();
                    }

                    self.isTintActive = true;
                }
            }

            if (change === 'hide') {
                if (self.isTintActive) {
                    if (self.options.zoomTintFadeOut) {
                        self.zoomTint.stop(true, true).fadeOut(self.options.zoomTintFadeOut);
                    } else {
                        self.zoomTint.hide();
                    }

                    self.isTintActive = false;
                }
            }
        },
        setLensPosition: function setLensPosition(e) {
        },
        setWindowPosition: function setWindowPosition(e) {
            //return obj.slice( 0, count );
            var self = this;

            if (!isNaN(self.options.zoomWindowPosition)) {
                switch (self.options.zoomWindowPosition) {
                    case 1:
                        //done
                        self.windowOffsetTop = self.options.zoomWindowOffsetY; //DONE - 1

                        self.windowOffsetLeft = +self.nzWidth; //DONE 1, 2, 3, 4, 16

                        break;

                    case 2:
                        if (self.options.zoomWindowHeight > self.nzHeight) {
                            //positive margin
                            self.windowOffsetTop = (self.options.zoomWindowHeight / 2 - self.nzHeight / 2) * -1;
                            self.windowOffsetLeft = self.nzWidth; //DONE 1, 2, 3, 4, 16
                        } else {
                            //negative margin
                            $.noop();
                        }

                        break;

                    case 3:
                        //done
                        self.windowOffsetTop = self.nzHeight - self.zoomWindow.height() - self.options.borderSize * 2; //DONE 3,9

                        self.windowOffsetLeft = self.nzWidth; //DONE 1, 2, 3, 4, 16

                        break;

                    case 4:
                        //done
                        self.windowOffsetTop = self.nzHeight; //DONE - 4,5,6,7,8

                        self.windowOffsetLeft = self.nzWidth; //DONE 1, 2, 3, 4, 16

                        break;

                    case 5:
                        //done
                        self.windowOffsetTop = self.nzHeight; //DONE - 4,5,6,7,8

                        self.windowOffsetLeft = self.nzWidth - self.zoomWindow.width() - self.options.borderSize * 2; //DONE - 5,15

                        break;

                    case 6:
                        if (self.options.zoomWindowHeight > self.nzHeight) {
                            //positive margin
                            self.windowOffsetTop = self.nzHeight; //DONE - 4,5,6,7,8

                            self.windowOffsetLeft = (self.options.zoomWindowWidth / 2 - self.nzWidth / 2 + self.options.borderSize * 2) * -1;
                        } else {
                            //negative margin
                            $.noop();
                        }

                        break;

                    case 7:
                        //done
                        self.windowOffsetTop = self.nzHeight; //DONE - 4,5,6,7,8

                        self.windowOffsetLeft = 0; //DONE 7, 13

                        break;

                    case 8:
                        //done
                        self.windowOffsetTop = self.nzHeight; //DONE - 4,5,6,7,8

                        self.windowOffsetLeft = (self.zoomWindow.width() + self.options.borderSize * 2) * -1; //DONE 8,9,10,11,12

                        break;

                    case 9:
                        //done
                        self.windowOffsetTop = self.nzHeight - self.zoomWindow.height() - self.options.borderSize * 2; //DONE 3,9

                        self.windowOffsetLeft = (self.zoomWindow.width() + self.options.borderSize * 2) * -1; //DONE 8,9,10,11,12

                        break;

                    case 10:
                        if (self.options.zoomWindowHeight > self.nzHeight) {
                            //positive margin
                            self.windowOffsetTop = (self.options.zoomWindowHeight / 2 - self.nzHeight / 2) * -1;
                            self.windowOffsetLeft = (self.zoomWindow.width() + self.options.borderSize * 2) * -1; //DONE 8,9,10,11,12
                        } else {
                            //negative margin
                            $.noop();
                        }

                        break;

                    case 11:
                        self.windowOffsetTop = self.options.zoomWindowOffsetY;
                        self.windowOffsetLeft = (self.zoomWindow.width() + self.options.borderSize * 2) * -1; //DONE 8,9,10,11,12

                        break;

                    case 12:
                        //done
                        self.windowOffsetTop = (self.zoomWindow.height() + self.options.borderSize * 2) * -1; //DONE 12,13,14,15,16

                        self.windowOffsetLeft = (self.zoomWindow.width() + self.options.borderSize * 2) * -1; //DONE 8,9,10,11,12

                        break;

                    case 13:
                        //done
                        self.windowOffsetTop = (self.zoomWindow.height() + self.options.borderSize * 2) * -1; //DONE 12,13,14,15,16

                        self.windowOffsetLeft = 0; //DONE 7, 13

                        break;

                    case 14:
                        if (self.options.zoomWindowHeight > self.nzHeight) {
                            //positive margin
                            self.windowOffsetTop = (self.zoomWindow.height() + self.options.borderSize * 2) * -1; //DONE 12,13,14,15,16

                            self.windowOffsetLeft = (self.options.zoomWindowWidth / 2 - self.nzWidth / 2 + self.options.borderSize * 2) * -1;
                        } else {
                            //negative margin
                            $.noop();
                        }

                        break;

                    case 15:
                        //done
                        self.windowOffsetTop = (self.zoomWindow.height() + self.options.borderSize * 2) * -1; //DONE 12,13,14,15,16

                        self.windowOffsetLeft = self.nzWidth - self.zoomWindow.width() - self.options.borderSize * 2; //DONE - 5,15

                        break;

                    case 16:
                        //done
                        self.windowOffsetTop = (self.zoomWindow.height() + self.options.borderSize * 2) * -1; //DONE 12,13,14,15,16

                        self.windowOffsetLeft = self.nzWidth; //DONE 1, 2, 3, 4, 16

                        break;

                    default:
                        //done
                        self.windowOffsetTop = self.options.zoomWindowOffsetY; //DONE - 1

                        self.windowOffsetLeft = self.nzWidth;
                    //DONE 1, 2, 3, 4, 16
                }
            } //end isNAN
            else {
                // For BC purposes, treat passed element as ID if element not found
                self.externalContainer = $(self.options.zoomWindowPosition);

                if (!self.externalContainer.length) {
                    self.externalContainer = $('#' + self.options.zoomWindowPosition);
                }

                self.externalContainerWidth = self.externalContainer.width();
                self.externalContainerHeight = self.externalContainer.height();
                self.externalContainerOffset = self.externalContainer.offset();
                self.windowOffsetTop = self.externalContainerOffset.top; //DONE - 1

                self.windowOffsetLeft = self.externalContainerOffset.left; //DONE 1, 2, 3, 4, 16
            }

            self.isWindowSet = true;
            self.windowOffsetTop = self.windowOffsetTop + self.options.zoomWindowOffsetY;
            self.windowOffsetLeft = self.windowOffsetLeft + self.options.zoomWindowOffsetX;
            self.zoomWindow.css({
                top: self.windowOffsetTop,
                left: self.windowOffsetLeft
            });

            if (self.options.zoomType === 'inner') {
                self.zoomWindow.css({
                    top: 0,
                    left: 0
                });
            }

            self.windowLeftPos = ((e.pageX - self.nzOffset.left) * self.widthRatio - self.zoomWindow.width() / 2) * -1;
            self.windowTopPos = ((e.pageY - self.nzOffset.top) * self.heightRatio - self.zoomWindow.height() / 2) * -1;

            if (self.Etoppos) {
                self.windowTopPos = 0;
            }

            if (self.Eloppos) {
                self.windowLeftPos = 0;
            }

            if (self.Eboppos) {
                self.windowTopPos = (self.largeHeight / self.currentZoomLevel - self.zoomWindow.height()) * -1;
            }

            if (self.Eroppos) {
                self.windowLeftPos = (self.largeWidth / self.currentZoomLevel - self.zoomWindow.width()) * -1;
            } //stops micro movements


            if (self.fullheight) {
                self.windowTopPos = 0;
            }

            if (self.fullwidth) {
                self.windowLeftPos = 0;
            } //set the css background position


            if (self.options.zoomType === 'window' || self.options.zoomType === 'inner') {
                if (self.zoomLock === 1) {
                    //overrides for images not zoomable
                    if (self.widthRatio <= 1) {
                        self.windowLeftPos = 0;
                    }

                    if (self.heightRatio <= 1) {
                        self.windowTopPos = 0;
                    }
                } // adjust images less than the window height


                if (self.options.zoomType === 'window') {
                    if (self.largeHeight < self.options.zoomWindowHeight) {
                        self.windowTopPos = 0;
                    }

                    if (self.largeWidth < self.options.zoomWindowWidth) {
                        self.windowLeftPos = 0;
                    }
                } //set the zoomwindow background position


                if (self.options.easing) {
                    //     if(self.changeZoom){
                    //           clearInterval(self.loop);
                    //           self.changeZoom = false;
                    //           self.loop = false;
                    //            }
                    //set the pos to 0 if not set
                    if (!self.xp) {
                        self.xp = 0;
                    }

                    if (!self.yp) {
                        self.yp = 0;
                    }

                    var interval = 16;
                    var easingInterval = parseInt(self.options.easing);

                    if (typeof easingInterval === 'number' && isFinite(easingInterval) && Math.floor(easingInterval) === easingInterval) {
                        interval = easingInterval;
                    } //if loop not already started, then run it


                    if (!self.loop) {
                        self.loop = setInterval(function () {
                            //using zeno's paradox
                            self.xp += (self.windowLeftPos - self.xp) / self.options.easingAmount;
                            self.yp += (self.windowTopPos - self.yp) / self.options.easingAmount;

                            if (self.scrollingLock) {
                                clearInterval(self.loop);
                                self.xp = self.windowLeftPos;
                                self.yp = self.windowTopPos;
                                self.xp = ((e.pageX - self.nzOffset.left) * self.widthRatio - self.zoomWindow.width() / 2) * -1;
                                self.yp = ((e.pageY - self.nzOffset.top) * self.heightRatio - self.zoomWindow.height() / 2) * -1;

                                if (self.changeBgSize) {
                                    if (self.nzHeight > self.nzWidth) {
                                        if (self.options.zoomType === 'lens') {
                                            self.zoomLens.css({
                                                backgroundSize: '' + self.largeWidth / self.newvalueheight + 'px ' + self.largeHeight / self.newvalueheight + 'px'
                                            });
                                        }

                                        self.zoomWindow.css({
                                            backgroundSize: '' + self.largeWidth / self.newvalueheight + 'px ' + self.largeHeight / self.newvalueheight + 'px'
                                        });
                                    } else {
                                        if (self.options.zoomType !== 'lens') {
                                            self.zoomLens.css({
                                                backgroundSize: '' + self.largeWidth / self.newvaluewidth + 'px ' + self.largeHeight / self.newvalueheight + 'px'
                                            });
                                        }

                                        self.zoomWindow.css({
                                            backgroundSize: '' + self.largeWidth / self.newvaluewidth + 'px ' + self.largeHeight / self.newvaluewidth + 'px'
                                        });
                                    }
                                    /*
                   if(!self.bgxp){self.bgxp = self.largeWidth/self.newvalue;}
                   if(!self.bgyp){self.bgyp = self.largeHeight/self.newvalue ;}
                   if (!self.bgloop){
                   self.bgloop = setInterval(function(){
                    self.bgxp += (self.largeWidth/self.newvalue  - self.bgxp) / self.options.easingAmount;
                   self.bgyp += (self.largeHeight/self.newvalue  - self.bgyp) / self.options.easingAmount;
                    self.zoomWindow.css('background-size', self.bgxp + 'px ' + self.bgyp + 'px' );
                     }, 16);
                    }
                   */


                                    self.changeBgSize = false;
                                }

                                self.zoomWindow.css({
                                    backgroundPosition: '' + self.windowLeftPos + 'px ' + self.windowTopPos + 'px'
                                });
                                self.scrollingLock = false;
                                self.loop = false;
                            } else if (Math.round(Math.abs(self.xp - self.windowLeftPos) + Math.abs(self.yp - self.windowTopPos)) < 1) {
                                //stops micro movements
                                clearInterval(self.loop);
                                self.zoomWindow.css({
                                    backgroundPosition: '' + self.windowLeftPos + 'px ' + self.windowTopPos + 'px'
                                });
                                self.loop = false;
                            } else {
                                if (self.changeBgSize) {
                                    if (self.nzHeight > self.nzWidth) {
                                        if (self.options.zoomType === 'lens') {
                                            self.zoomLens.css({
                                                backgroundSize: '' + self.largeWidth / self.newvalueheight + 'px ' + self.largeHeight / self.newvalueheight + 'px'
                                            });
                                        }

                                        self.zoomWindow.css({
                                            backgroundSize: '' + self.largeWidth / self.newvalueheight + 'px ' + self.largeHeight / self.newvalueheight + 'px'
                                        });
                                    } else {
                                        if (self.options.zoomType !== 'lens') {
                                            self.zoomLens.css({
                                                backgroundSize: '' + self.largeWidth / self.newvaluewidth + 'px ' + self.largeHeight / self.newvaluewidth + 'px'
                                            });
                                        }

                                        self.zoomWindow.css({
                                            backgroundSize: '' + self.largeWidth / self.newvaluewidth + 'px ' + self.largeHeight / self.newvaluewidth + 'px'
                                        });
                                    }

                                    self.changeBgSize = false;
                                }

                                self.zoomWindow.css({
                                    backgroundPosition: '' + self.xp + 'px ' + self.yp + 'px'
                                });
                            }
                        }, interval);
                    }
                } else {
                    if (self.changeBgSize) {
                        if (self.nzHeight > self.nzWidth) {
                            if (self.options.zoomType === 'lens') {
                                self.zoomLens.css({
                                    backgroundSize: '' + self.largeWidth / self.newvalueheight + 'px ' + self.largeHeight / self.newvalueheight + 'px'
                                });
                            }

                            self.zoomWindow.css({
                                backgroundSize: '' + self.largeWidth / self.newvalueheight + 'px ' + self.largeHeight / self.newvalueheight + 'px'
                            });
                        } else {
                            if (self.options.zoomType === 'lens') {
                                self.zoomLens.css({
                                    backgroundSize: '' + self.largeWidth / self.newvaluewidth + 'px ' + self.largeHeight / self.newvaluewidth + 'px'
                                });
                            }

                            if (self.largeHeight / self.newvaluewidth < self.options.zoomWindowHeight) {
                                self.zoomWindow.css({
                                    backgroundSize: '' + self.largeWidth / self.newvaluewidth + 'px ' + self.largeHeight / self.newvaluewidth + 'px'
                                });
                            } else {
                                self.zoomWindow.css({
                                    backgroundSize: '' + self.largeWidth / self.newvalueheight + 'px ' + self.largeHeight / self.newvalueheight + 'px'
                                });
                            }
                        }

                        self.changeBgSize = false;
                    }

                    self.zoomWindow.css({
                        backgroundPosition: '' + self.windowLeftPos + 'px ' + self.windowTopPos + 'px'
                    });
                }
            }
        },
        setTintPosition: function setTintPosition(e) {
            var self = this;
            var zoomLensWidth = self.zoomLens.width();
            var zoomLensHeight = self.zoomLens.height();
            self.updateOffset(self);
            self.tintpos = (e.pageX - self.nzOffset.left - zoomLensWidth / 2) * -1;
            self.tintposy = (e.pageY - self.nzOffset.top - zoomLensHeight / 2) * -1;

            if (self.Etoppos) {
                self.tintposy = 0;
            }

            if (self.Eloppos) {
                self.tintpos = 0;
            }

            if (self.Eboppos) {
                self.tintposy = (self.nzHeight - zoomLensHeight - self.options.lensBorderSize * 2) * -1;
            }

            if (self.Eroppos) {
                self.tintpos = (self.nzWidth - zoomLensWidth - self.options.lensBorderSize * 2) * -1;
            }

            if (self.options.tint) {
                //stops micro movements
                if (self.fullheight) {
                    self.tintposy = 0;
                }

                if (self.fullwidth) {
                    self.tintpos = 0;
                }

                self.zoomTintImage.css({
                    left: self.tintpos,
                    top: self.tintposy
                });
            }
        },
        swaptheimage: function swaptheimage(smallimage, largeimage) {
            var self = this;
            var newImg = new Image();

            if (self.options.loadingIcon && !self.spinner) {
                var styleAttr = {
                    background: 'url("' + self.options.loadingIcon + '") no-repeat',
                    height: self.nzHeight,
                    width: self.nzWidth,
                    zIndex: 2000,
                    position: 'absolute',
                    backgroundPosition: 'center center'
                };

                if (self.options.zoomType === 'inner') {
                    styleAttr.setProperty('top', 0);
                }

                self.spinner = $('<div class="ezp-spinner"></div>').css(styleAttr);
                self.$elem.after(self.spinner);
            } else if (self.spinner) {
                self.spinner.show();
            }

            self.options.onImageSwap(self.$elem);

            newImg.onload = function () {
                self.largeWidth = newImg.width;
                self.largeHeight = newImg.height;
                self.zoomImage = largeimage;
                self.zoomWindow.css({
                    backgroundSize: '' + self.largeWidth + 'px ' + self.largeHeight + 'px'
                });
                self.swapAction(smallimage, largeimage);
                return;
            };

            self.setImageSource(newImg, largeimage); // this must be done AFTER setting onload
        },
        swapAction: function swapAction(smallimage, largeimage) {
            var self = this;
            var elemWidth = self.$elem.width();
            var elemHeight = self.$elem.height();
            var newImg2 = new Image();

            newImg2.onload = function () {
                //re-calculate values
                self.nzHeight = newImg2.height;
                self.nzWidth = newImg2.width;
                self.options.onImageSwapComplete(self.$elem);
                self.doneCallback();
                return;
            };

            self.setImageSource(newImg2, smallimage); //reset the zoomlevel to that initially set in options

            self.currentZoomLevel = self.options.zoomLevel;
            self.options.maxZoomLevel = false; //swaps the main image
            //self.$elem.attr('src',smallimage);
            //swaps the zoom image

            if (self.options.zoomType === 'lens') {
                self.zoomLens.css('background-image', 'url("' + largeimage + '")');
            }

            if (self.options.zoomType === 'window') {
                self.zoomWindow.css('background-image', 'url("' + largeimage + '")');
            }

            if (self.options.zoomType === 'inner') {
                self.zoomWindow.css('background-image', 'url("' + largeimage + '")');
            }

            self.currentImage = largeimage;

            if (self.options.imageCrossfade) {
                var oldImg = self.$elem;
                var newImg = oldImg.clone();
                self.$elem.attr('src', smallimage);
                self.$elem.after(newImg);
                newImg.stop(true).fadeOut(self.options.imageCrossfade, function () {
                    $(this).remove();
                }); // if(self.options.zoomType === 'inner'){
                //remove any attributes on the cloned image so we can resize later

                self.$elem.width('auto').removeAttr('width');
                self.$elem.height('auto').removeAttr('height'); //   }

                oldImg.fadeIn(self.options.imageCrossfade);

                if (self.options.tint && self.options.zoomType !== 'inner') {
                    var oldImgTint = self.zoomTintImage;
                    var newImgTint = oldImgTint.clone();
                    self.zoomTintImage.attr('src', largeimage);
                    self.zoomTintImage.after(newImgTint);
                    newImgTint.stop(true).fadeOut(self.options.imageCrossfade, function () {
                        $(this).remove();
                    });
                    oldImgTint.fadeIn(self.options.imageCrossfade); //self.zoomTintImage.attr('width',elem.data('image'));
                    //resize the tint window

                    self.zoomTint.css({
                        height: elemHeight,
                        width: elemWidth
                    });
                }

                self.zoomContainer.css({
                    'height': elemHeight,
                    'width': elemWidth
                });

                if (self.options.zoomType === 'inner') {
                    if (!self.options.constrainType) {
                        self.zoomWrap.parent().css({
                            'height': elemHeight,
                            'width': elemWidth
                        });
                        self.zoomWindow.css({
                            'height': elemHeight,
                            'width': elemWidth
                        });
                    }
                }

                if (self.options.imageCrossfade) {
                    self.zoomWrap.css({
                        'height': elemHeight,
                        'width': elemWidth
                    });
                }
            } else {
                self.$elem.attr('src', smallimage);

                if (self.options.tint) {
                    self.zoomTintImage.attr('src', largeimage); //self.zoomTintImage.attr('width',elem.data('image'));

                    self.zoomTintImage.attr('height', elemHeight); //self.zoomTintImage.attr('src') = elem.data('image');

                    self.zoomTintImage.css('height', elemHeight);
                    self.zoomTint.css('height', elemHeight);
                }

                self.zoomContainer.css({
                    'height': elemHeight,
                    'width': elemWidth
                });

                if (self.options.imageCrossfade) {
                    self.zoomWrap.css({
                        'height': elemHeight,
                        'width': elemWidth
                    });
                }
            }

            if (self.options.constrainType) {
                //This will contrain the image proportions
                if (self.options.constrainType === 'height') {
                    var autoWDimension = {
                        'height': self.options.constrainSize,
                        'width': 'auto'
                    };
                    self.zoomContainer.css(autoWDimension);

                    if (self.options.imageCrossfade) {
                        self.zoomWrap.css(autoWDimension);
                        self.constwidth = self.zoomWrap.width();
                    } else {
                        self.$elem.css(autoWDimension);
                        self.constwidth = elemWidth;
                    }

                    var constWDim = {
                        'height': self.options.constrainSize,
                        'width': self.constwidth
                    };

                    if (self.options.zoomType === 'inner') {
                        self.zoomWrap.parent().css(constWDim);
                        self.zoomWindow.css(constWDim);
                    }

                    if (self.options.tint) {
                        self.tintContainer.css(constWDim);
                        self.zoomTint.css(constWDim);
                        self.zoomTintImage.css(constWDim);
                    }
                }

                if (self.options.constrainType === 'width') {
                    var autoHDimension = {
                        'height': 'auto',
                        'width': self.options.constrainSize
                    };
                    self.zoomContainer.css(autoHDimension);

                    if (self.options.imageCrossfade) {
                        self.zoomWrap.css(autoHDimension);
                        self.constheight = self.zoomWrap.height();
                    } else {
                        self.$elem.css(autoHDimension);
                        self.constheight = elemHeight;
                    }

                    var constHDim = {
                        'height': self.constheight,
                        'width': self.options.constrainSize
                    };

                    if (self.options.zoomType === 'inner') {
                        self.zoomWrap.parent().css(constHDim);
                        self.zoomWindow.css(constHDim);
                    }

                    if (self.options.tint) {
                        self.tintContainer.css(constHDim);
                        self.zoomTint.css(constHDim);
                        self.zoomTintImage.css(constHDim);
                    }
                }
            }
        },
        doneCallback: function doneCallback() {
            var self = this;

            if (self.options.loadingIcon && !!self.spinner && !!self.spinner.length) {
                self.spinner.hide();
            }

            self.updateOffset(self);
            self.nzWidth = self.$elem.width();
            self.nzHeight = self.$elem.height(); // reset the zoomlevel back to default

            self.currentZoomLevel = self.options.zoomLevel; //ratio of the large to small image

            self.widthRatio = self.largeWidth / self.nzWidth;
            self.heightRatio = self.largeHeight / self.nzHeight; //NEED TO ADD THE LENS SIZE FOR ROUND
            // adjust images less than the window height

            if (self.options.zoomType === 'window') {
                if (self.nzHeight < self.options.zoomWindowHeight / self.heightRatio) {
                    self.lensHeight = self.nzHeight;
                } else {
                    self.lensHeight = self.options.zoomWindowHeight / self.heightRatio;
                }

                if (self.nzWidth < self.options.zoomWindowWidth) {
                    self.lensWidth = self.nzWidth;
                } else {
                    self.lensWidth = self.options.zoomWindowWidth / self.widthRatio;
                }

                if (self.zoomLens) {
                    self.zoomLens.css({
                        'width': self.lensWidth,
                        'height': self.lensHeight
                    });
                }
            }
        },
        getCurrentImage: function getCurrentImage() {
            var self = this;
            return self.zoomImage;
        },
        getGalleryList: function getGalleryList() {
            var self = this; //loop through the gallery options and set them in list for fancybox

            self.gallerylist = [];

            if (self.options.gallery) {
                $('#' + self.options.gallery + ' a').each(function () {
                    var imgSrc = '';

                    if ($(this).data(self.options.attrImageZoomSrc)) {
                        imgSrc = $(this).data(self.options.attrImageZoomSrc);
                    } else if ($(this).data('image')) {
                        imgSrc = $(this).data('image');
                    } //put the current image at the start


                    if (imgSrc === self.zoomImage) {
                        self.gallerylist.unshift({
                            href: '' + imgSrc + '',
                            title: $(this).find('img').attr('title')
                        });
                    } else {
                        self.gallerylist.push({
                            href: '' + imgSrc + '',
                            title: $(this).find('img').attr('title')
                        });
                    }
                });
            } //if no gallery - return current image
            else {
                self.gallerylist.push({
                    href: '' + self.zoomImage + '',
                    title: $(this).find('img').attr('title')
                });
            }

            return self.gallerylist;
        },
        changeZoomLevel: function changeZoomLevel(value) {
            var self = this; //flag a zoom, so can adjust the easing during setPosition

            self.scrollingLock = true; //round to two decimal places

            self.newvalue = parseFloat(value).toFixed(2);
            var newvalue = self.newvalue; //maxwidth & Maxheight of the image

            var maxheightnewvalue = self.largeHeight / (self.options.zoomWindowHeight / self.nzHeight * self.nzHeight);
            var maxwidthtnewvalue = self.largeWidth / (self.options.zoomWindowWidth / self.nzWidth * self.nzWidth); //calculate new heightratio

            if (self.options.zoomType !== 'inner') {
                if (maxheightnewvalue <= newvalue) {
                    self.heightRatio = self.largeHeight / maxheightnewvalue / self.nzHeight;
                    self.newvalueheight = maxheightnewvalue;
                    self.fullheight = true;
                } else {
                    self.heightRatio = self.largeHeight / newvalue / self.nzHeight;
                    self.newvalueheight = newvalue;
                    self.fullheight = false;
                } // calculate new width ratio


                if (maxwidthtnewvalue <= newvalue) {
                    self.widthRatio = self.largeWidth / maxwidthtnewvalue / self.nzWidth;
                    self.newvaluewidth = maxwidthtnewvalue;
                    self.fullwidth = true;
                } else {
                    self.widthRatio = self.largeWidth / newvalue / self.nzWidth;
                    self.newvaluewidth = newvalue;
                    self.fullwidth = false;
                }

                if (self.options.zoomType === 'lens') {
                    if (maxheightnewvalue <= newvalue) {
                        self.fullwidth = true;
                        self.newvaluewidth = maxheightnewvalue;
                    } else {
                        self.widthRatio = self.largeWidth / newvalue / self.nzWidth;
                        self.newvaluewidth = newvalue;
                        self.fullwidth = false;
                    }
                }
            }

            if (self.options.zoomType === 'inner') {
                maxheightnewvalue = parseFloat(self.largeHeight / self.nzHeight).toFixed(2);
                maxwidthtnewvalue = parseFloat(self.largeWidth / self.nzWidth).toFixed(2);

                if (newvalue > maxheightnewvalue) {
                    newvalue = maxheightnewvalue;
                }

                if (newvalue > maxwidthtnewvalue) {
                    newvalue = maxwidthtnewvalue;
                }

                if (maxheightnewvalue <= newvalue) {
                    self.heightRatio = self.largeHeight / newvalue / self.nzHeight;

                    if (newvalue > maxheightnewvalue) {
                        self.newvalueheight = maxheightnewvalue;
                    } else {
                        self.newvalueheight = newvalue;
                    }

                    self.fullheight = true;
                } else {
                    self.heightRatio = self.largeHeight / newvalue / self.nzHeight;

                    if (newvalue > maxheightnewvalue) {
                        self.newvalueheight = maxheightnewvalue;
                    } else {
                        self.newvalueheight = newvalue;
                    }

                    self.fullheight = false;
                }

                if (maxwidthtnewvalue <= newvalue) {
                    self.widthRatio = self.largeWidth / newvalue / self.nzWidth;

                    if (newvalue > maxwidthtnewvalue) {
                        self.newvaluewidth = maxwidthtnewvalue;
                    } else {
                        self.newvaluewidth = newvalue;
                    }

                    self.fullwidth = true;
                } else {
                    self.widthRatio = self.largeWidth / newvalue / self.nzWidth;
                    self.newvaluewidth = newvalue;
                    self.fullwidth = false;
                }
            } //end inner


            var scrcontinue = false;

            if (self.options.zoomType === 'inner') {
                if (self.nzWidth >= self.nzHeight) {
                    if (self.newvaluewidth <= maxwidthtnewvalue) {
                        scrcontinue = true;
                    } else {
                        scrcontinue = false;
                        self.fullheight = true;
                        self.fullwidth = true;
                    }
                }

                if (self.nzHeight > self.nzWidth) {
                    if (self.newvaluewidth <= maxwidthtnewvalue) {
                        scrcontinue = true;
                    } else {
                        scrcontinue = false;
                        self.fullheight = true;
                        self.fullwidth = true;
                    }
                }
            }

            if (self.options.zoomType !== 'inner') {
                scrcontinue = true;
            }

            if (scrcontinue) {
                self.zoomLock = 0;
                self.changeZoom = true; //if lens height is less than image height

                if (self.options.zoomWindowHeight / self.heightRatio <= self.nzHeight) {
                    self.currentZoomLevel = self.newvalueheight;

                    if (self.options.zoomType !== 'lens' && self.options.zoomType !== 'inner') {
                        self.changeBgSize = true;
                        self.zoomLens.css({
                            height: self.options.zoomWindowHeight / self.heightRatio
                        });
                    }

                    if (self.options.zoomType === 'lens' || self.options.zoomType === 'inner') {
                        self.changeBgSize = true;
                    }
                }

                if (self.options.zoomWindowWidth / self.widthRatio <= self.nzWidth) {
                    if (self.options.zoomType !== 'inner') {
                        if (self.newvaluewidth > self.newvalueheight) {
                            self.currentZoomLevel = self.newvaluewidth;
                        }
                    }

                    if (self.options.zoomType !== 'lens' && self.options.zoomType !== 'inner') {
                        self.changeBgSize = true;
                        self.zoomLens.css({
                            width: self.options.zoomWindowWidth / self.widthRatio
                        });
                    }

                    if (self.options.zoomType === 'lens' || self.options.zoomType === 'inner') {
                        self.changeBgSize = true;
                    }
                }

                if (self.options.zoomType === 'inner') {
                    self.changeBgSize = true;

                    if (self.nzWidth > self.nzHeight) {
                        self.currentZoomLevel = self.newvaluewidth;
                    } else if (self.nzHeight >= self.nzWidth) {
                        self.currentZoomLevel = self.newvaluewidth;
                    }
                }
            } //under
            //sets the boundry change, called in setWindowPos


            self.setPosition(self.currentLoc); //
        },
        closeAll: function closeAll() {
            var self = this;

            if (self.zoomWindow) {
                self.zoomWindow.hide();
            }

            if (self.zoomLens) {
                self.zoomLens.hide();
            }

            if (self.zoomTint) {
                self.zoomTint.hide();
            }
        },
        updateOffset: function updateOffset(self) {
            if (self.options.zoomContainerAppendTo !== 'body') {
                self.nzOffset = self.$elem.offset();
                var appendedPosition = $(self.options.zoomContainerAppendTo).offset();
                self.nzOffset.top = self.$elem.offset().top - appendedPosition.top;
                self.nzOffset.left = self.$elem.offset().left - appendedPosition.left;
            } else {
                self.nzOffset = self.$elem.offset();
            }
        },
        changeState: function changeState(value) {
            var self = this;

            if (value === 'enable') {
                self.options.zoomEnabled = true;
            }

            if (value === 'disable') {
                self.options.zoomEnabled = false;
            }
        },
        responsiveConfig: function responsiveConfig(options) {
            if (options.respond && options.respond.length > 0) {
                return $.extend({}, options, this.configByScreenWidth(options));
            }

            return options;
        },
        configByScreenWidth: function configByScreenWidth(options) {
            var screenWidth = $(window).width();
            var config = $.grep(options.respond, function (item) {
                var range = item.range.split('-');
                return screenWidth >= range[0] && screenWidth <= range[1];
            });

            if (config.length > 0) {
                return config[0];
            } else {
                return options;
            }
        }
    };

    $.fn.ezPlus = function (options) {
        return this.each(function () {
            var elevate = Object.create(EZP);
            elevate.init(options, this);
            $.data(this, 'ezPlus', elevate);
        });
    };

    $.fn.ezPlus.options = {
        container: 'ZoomContainer',
        attrImageZoomSrc: 'zoom-image',
        // attribute to plugin use for zoom
        borderColour: '#888',
        borderSize: 4,
        constrainSize: false,
        //in pixels the dimensions you want to constrain on
        constrainType: false,
        //width or height
        containLensZoom: false,
        cursor: 'inherit',
        // user should set to what they want the cursor as, if they have set a click function
        debug: false,
        easing: false,
        easingAmount: 12,
        enabled: true,
        gallery: false,
        galleryActiveClass: 'zoomGalleryActive',
        gallerySelector: false,
        galleryItem: 'a',
        galleryEvent: 'click',
        imageCrossfade: false,
        lensBorderColour: '#000',
        lensBorderSize: 1,
        lensColour: 'white',
        //colour of the lens background
        lensFadeIn: false,
        lensFadeOut: false,
        lensOpacity: 0.4,
        //opacity of the lens
        lensShape: 'square',
        //can be 'round'
        lensSize: 200,
        lenszoom: false,
        loadingIcon: false,
        //http://www.example.com/spinner.gif
        // This change will allow to decide if you want to decrease
        // zoom of one of the dimensions once the other reached it's top value,
        // or keep the aspect ratio, default behaviour still being as always,
        // allow to continue zooming out, so it keeps retrocompatibility.
        mantainZoomAspectRatio: false,
        maxZoomLevel: false,
        minZoomLevel: 1.01,
        onComplete: $.noop,
        onDestroy: $.noop,
        onImageClick: $.noop,
        onImageSwap: $.noop,
        onImageSwapComplete: $.noop,
        onShow: $.noop,
        onHide: $.noop,
        onZoomedImageLoaded: $.noop,
        preloading: 1,
        //by default, load all the images, if 0, then only load images after activated (PLACEHOLDER FOR NEXT VERSION)
        respond: [],
        responsive: true,
        scrollZoom: false,
        //allow zoom on mousewheel, true to activate
        scrollZoomIncrement: 0.1,
        //steps of the scrollzoom
        showLens: true,
        tint: false,
        //enable the tinting
        tintColour: '#333',
        //default tint color, can be anything, red, #ccc, rgb(0,0,0)
        tintOpacity: 0.4,
        //opacity of the tint
        touchEnabled: true,
        zoomActivation: 'hover',
        // Can also be click (PLACEHOLDER FOR NEXT VERSION)
        zoomContainerAppendTo: 'body',
        //zoom container parent selector
        zoomId: -1,
        // identifier for the zoom container
        zoomLevel: 1,
        //default zoom level of image
        zoomTintFadeIn: false,
        zoomTintFadeOut: false,
        zoomType: 'window',
        //window is default,  also 'lens' available -
        zoomWindowAlwaysShow: false,
        zoomWindowBgColour: '#fff',
        zoomWindowFadeIn: false,
        zoomWindowFadeOut: false,
        zoomWindowHeight: 400,
        zoomWindowOffsetX: 0,
        zoomWindowOffsetY: 0,
        zoomWindowPosition: 1,
        //Possible values: 1-16, but we can also position with a selector string.
        zoomWindowWidth: 400,
        zoomEnabled: true,
        //false disables zoomwindow from showing
        zIndex: 999
    };
})(window.jQuery, window, document);
"use strict";

// ==================================================
// fancyBox v3.5.7
//
// Licensed GPLv3 for open source use
// or fancyBox Commercial License for commercial use
//
// http://fancyapps.com/fancybox/
// Copyright 2019 fancyApps
//
// ==================================================
!function (t, e, n, o) {
    "use strict";

    function i(t, e) {
        var o,
            i,
            a,
            s = [],
            r = 0;
        t && t.isDefaultPrevented() || (t.preventDefault(), e = e || {}, t && t.data && (e = h(t.data.options, e)), o = e.$target || n(t.currentTarget).trigger("blur"), (a = n.fancybox.getInstance()) && a.$trigger && a.$trigger.is(o) || (e.selector ? s = n(e.selector) : (i = o.attr("data-fancybox") || "", i ? (s = t.data ? t.data.items : [], s = s.length ? s.filter('[data-fancybox="' + i + '"]') : n('[data-fancybox="' + i + '"]')) : s = [o]), r = n(s).index(o), r < 0 && (r = 0), a = n.fancybox.open(s, e, r), a.$trigger = o));
    }

    if (t.console = t.console || {
        info: function info(t) {
        }
    }, n) {
        if (n.fn.fancybox) return void console.info("fancyBox already initialized");

        var a = {
                closeExisting: !1,
                loop: !1,
                gutter: 50,
                keyboard: !0,
                preventCaptionOverlap: !0,
                arrows: !0,
                infobar: !0,
                smallBtn: "auto",
                toolbar: "auto",
                buttons: ["zoom", "slideShow", "thumbs", "close"],
                idleTime: 3,
                protect: !1,
                modal: !1,
                image: {
                    preload: !1
                },
                ajax: {
                    settings: {
                        data: {
                            fancybox: !0
                        }
                    }
                },
                iframe: {
                    tpl: '<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',
                    preload: !0,
                    css: {},
                    attr: {
                        scrolling: "auto"
                    }
                },
                video: {
                    tpl: '<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',
                    format: "",
                    autoStart: !0
                },
                defaultType: "image",
                animationEffect: "zoom",
                animationDuration: 366,
                zoomOpacity: "auto",
                transitionEffect: "fade",
                transitionDuration: 366,
                slideClass: "",
                baseClass: "",
                baseTpl: '<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',
                spinnerTpl: '<div class="fancybox-loading"></div>',
                errorTpl: '<div class="fancybox-error"><p>{{ERROR}}</p></div>',
                btnTpl: {
                    download: '<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',
                    zoom: '<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',
                    close: '<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',
                    arrowLeft: '<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',
                    arrowRight: '<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',
                    smallBtn: '<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'
                },
                parentEl: "body",
                hideScrollbar: !0,
                autoFocus: !0,
                backFocus: !0,
                trapFocus: !0,
                fullScreen: {
                    autoStart: !1
                },
                touch: {
                    vertical: !0,
                    momentum: !0
                },
                hash: null,
                media: {},
                slideShow: {
                    autoStart: !1,
                    speed: 3e3
                },
                thumbs: {
                    autoStart: !1,
                    hideOnClose: !0,
                    parentEl: ".fancybox-container",
                    axis: "y"
                },
                wheel: "auto",
                onInit: n.noop,
                beforeLoad: n.noop,
                afterLoad: n.noop,
                beforeShow: n.noop,
                afterShow: n.noop,
                beforeClose: n.noop,
                afterClose: n.noop,
                onActivate: n.noop,
                onDeactivate: n.noop,
                clickContent: function clickContent(t, e) {
                    return "image" === t.type && "zoom";
                },
                clickSlide: "close",
                clickOutside: "close",
                dblclickContent: !1,
                dblclickSlide: !1,
                dblclickOutside: !1,
                mobile: {
                    preventCaptionOverlap: !1,
                    idleTime: !1,
                    clickContent: function clickContent(t, e) {
                        return "image" === t.type && "toggleControls";
                    },
                    clickSlide: function clickSlide(t, e) {
                        return "image" === t.type ? "toggleControls" : "close";
                    },
                    dblclickContent: function dblclickContent(t, e) {
                        return "image" === t.type && "zoom";
                    },
                    dblclickSlide: function dblclickSlide(t, e) {
                        return "image" === t.type && "zoom";
                    }
                },
                lang: "en",
                i18n: {
                    en: {
                        CLOSE: "Close",
                        NEXT: "Next",
                        PREV: "Previous",
                        ERROR: "The requested content cannot be loaded. <br/> Please try again later.",
                        PLAY_START: "Start slideshow",
                        PLAY_STOP: "Pause slideshow",
                        FULL_SCREEN: "Full screen",
                        THUMBS: "Thumbnails",
                        DOWNLOAD: "Download",
                        SHARE: "Share",
                        ZOOM: "Zoom"
                    },
                    de: {
                        CLOSE: "Schlie&szlig;en",
                        NEXT: "Weiter",
                        PREV: "Zur&uuml;ck",
                        ERROR: "Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",
                        PLAY_START: "Diaschau starten",
                        PLAY_STOP: "Diaschau beenden",
                        FULL_SCREEN: "Vollbild",
                        THUMBS: "Vorschaubilder",
                        DOWNLOAD: "Herunterladen",
                        SHARE: "Teilen",
                        ZOOM: "Vergr&ouml;&szlig;ern"
                    }
                }
            },
            s = n(t),
            r = n(e),
            c = 0,
            l = function l(t) {
                return t && t.hasOwnProperty && t instanceof n;
            },
            d = function () {
                return t.requestAnimationFrame || t.webkitRequestAnimationFrame || t.mozRequestAnimationFrame || t.oRequestAnimationFrame || function (e) {
                    return t.setTimeout(e, 1e3 / 60);
                };
            }(),
            u = function () {
                return t.cancelAnimationFrame || t.webkitCancelAnimationFrame || t.mozCancelAnimationFrame || t.oCancelAnimationFrame || function (e) {
                    t.clearTimeout(e);
                };
            }(),
            f = function () {
                var t,
                    n = e.createElement("fakeelement"),
                    o = {
                        transition: "transitionend",
                        OTransition: "oTransitionEnd",
                        MozTransition: "transitionend",
                        WebkitTransition: "webkitTransitionEnd"
                    };

                for (t in o) {
                    if (void 0 !== n.style[t]) return o[t];
                }

                return "transitionend";
            }(),
            p = function p(t) {
                return t && t.length && t[0].offsetHeight;
            },
            h = function h(t, e) {
                var o = n.extend(!0, {}, t, e);
                return n.each(e, function (t, e) {
                    n.isArray(e) && (o[t] = e);
                }), o;
            },
            g = function g(t) {
                var o, i;
                return !(!t || t.ownerDocument !== e) && (n(".fancybox-container").css("pointer-events", "none"), o = {
                    x: t.getBoundingClientRect().left + t.offsetWidth / 2,
                    y: t.getBoundingClientRect().top + t.offsetHeight / 2
                }, i = e.elementFromPoint(o.x, o.y) === t, n(".fancybox-container").css("pointer-events", ""), i);
            },
            b = function b(t, e, o) {
                var i = this;
                i.opts = h({
                    index: o
                }, n.fancybox.defaults), n.isPlainObject(e) && (i.opts = h(i.opts, e)), n.fancybox.isMobile && (i.opts = h(i.opts, i.opts.mobile)), i.id = i.opts.id || ++c, i.currIndex = parseInt(i.opts.index, 10) || 0, i.prevIndex = null, i.prevPos = null, i.currPos = 0, i.firstRun = !0, i.group = [], i.slides = {}, i.addContent(t), i.group.length && i.init();
            };

        n.extend(b.prototype, {
            init: function init() {
                var o,
                    i,
                    a = this,
                    s = a.group[a.currIndex],
                    r = s.opts;
                r.closeExisting && n.fancybox.close(!0), n("body").addClass("fancybox-active"), !n.fancybox.getInstance() && !1 !== r.hideScrollbar && !n.fancybox.isMobile && e.body.scrollHeight > t.innerHeight && (n("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:' + (t.innerWidth - e.documentElement.clientWidth) + "px;}</style>"), n("body").addClass("compensate-for-scrollbar")), i = "", n.each(r.buttons, function (t, e) {
                    i += r.btnTpl[e] || "";
                }), o = n(a.translate(a, r.baseTpl.replace("{{buttons}}", i).replace("{{arrows}}", r.btnTpl.arrowLeft + r.btnTpl.arrowRight))).attr("id", "fancybox-container-" + a.id).addClass(r.baseClass).data("FancyBox", a).appendTo(r.parentEl), a.$refs = {
                    container: o
                }, ["bg", "inner", "infobar", "toolbar", "stage", "caption", "navigation"].forEach(function (t) {
                    a.$refs[t] = o.find(".fancybox-" + t);
                }), a.trigger("onInit"), a.activate(), a.jumpTo(a.currIndex);
            },
            translate: function translate(t, e) {
                var n = t.opts.i18n[t.opts.lang] || t.opts.i18n.en;
                return e.replace(/\{\{(\w+)\}\}/g, function (t, e) {
                    return void 0 === n[e] ? t : n[e];
                });
            },
            addContent: function addContent(t) {
                var e,
                    o = this,
                    i = n.makeArray(t);
                n.each(i, function (t, e) {
                    var i,
                        a,
                        s,
                        r,
                        c,
                        l = {},
                        d = {};
                    n.isPlainObject(e) ? (l = e, d = e.opts || e) : "object" === n.type(e) && n(e).length ? (i = n(e), d = i.data() || {}, d = n.extend(!0, {}, d, d.options), d.$orig = i, l.src = o.opts.src || d.src || i.attr("href"), l.type || l.src || (l.type = "inline", l.src = e)) : l = {
                        type: "html",
                        src: e + ""
                    }, l.opts = n.extend(!0, {}, o.opts, d), n.isArray(d.buttons) && (l.opts.buttons = d.buttons), n.fancybox.isMobile && l.opts.mobile && (l.opts = h(l.opts, l.opts.mobile)), a = l.type || l.opts.type, r = l.src || "", !a && r && ((s = r.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i)) ? (a = "video", l.opts.video.format || (l.opts.video.format = "video/" + ("ogv" === s[1] ? "ogg" : s[1]))) : r.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i) ? a = "image" : r.match(/\.(pdf)((\?|#).*)?$/i) ? (a = "iframe", l = n.extend(!0, l, {
                        contentType: "pdf",
                        opts: {
                            iframe: {
                                preload: !1
                            }
                        }
                    })) : "#" === r.charAt(0) && (a = "inline")), a ? l.type = a : o.trigger("objectNeedsType", l), l.contentType || (l.contentType = n.inArray(l.type, ["html", "inline", "ajax"]) > -1 ? "html" : l.type), l.index = o.group.length, "auto" == l.opts.smallBtn && (l.opts.smallBtn = n.inArray(l.type, ["html", "inline", "ajax"]) > -1), "auto" === l.opts.toolbar && (l.opts.toolbar = !l.opts.smallBtn), l.$thumb = l.opts.$thumb || null, l.opts.$trigger && l.index === o.opts.index && (l.$thumb = l.opts.$trigger.find("img:first"), l.$thumb.length && (l.opts.$orig = l.opts.$trigger)), l.$thumb && l.$thumb.length || !l.opts.$orig || (l.$thumb = l.opts.$orig.find("img:first")), l.$thumb && !l.$thumb.length && (l.$thumb = null), l.thumb = l.opts.thumb || (l.$thumb ? l.$thumb[0].src : null), "function" === n.type(l.opts.caption) && (l.opts.caption = l.opts.caption.apply(e, [o, l])), "function" === n.type(o.opts.caption) && (l.opts.caption = o.opts.caption.apply(e, [o, l])), l.opts.caption instanceof n || (l.opts.caption = void 0 === l.opts.caption ? "" : l.opts.caption + ""), "ajax" === l.type && (c = r.split(/\s+/, 2), c.length > 1 && (l.src = c.shift(), l.opts.filter = c.shift())), l.opts.modal && (l.opts = n.extend(!0, l.opts, {
                        trapFocus: !0,
                        infobar: 0,
                        toolbar: 0,
                        smallBtn: 0,
                        keyboard: 0,
                        slideShow: 0,
                        fullScreen: 0,
                        thumbs: 0,
                        touch: 0,
                        clickContent: !1,
                        clickSlide: !1,
                        clickOutside: !1,
                        dblclickContent: !1,
                        dblclickSlide: !1,
                        dblclickOutside: !1
                    })), o.group.push(l);
                }), Object.keys(o.slides).length && (o.updateControls(), (e = o.Thumbs) && e.isActive && (e.create(), e.focus()));
            },
            addEvents: function addEvents() {
                var e = this;
                e.removeEvents(), e.$refs.container.on("click.fb-close", "[data-fancybox-close]", function (t) {
                    t.stopPropagation(), t.preventDefault(), e.close(t);
                }).on("touchstart.fb-prev click.fb-prev", "[data-fancybox-prev]", function (t) {
                    t.stopPropagation(), t.preventDefault(), e.previous();
                }).on("touchstart.fb-next click.fb-next", "[data-fancybox-next]", function (t) {
                    t.stopPropagation(), t.preventDefault(), e.next();
                }).on("click.fb", "[data-fancybox-zoom]", function (t) {
                    e[e.isScaledDown() ? "scaleToActual" : "scaleToFit"]();
                }), s.on("orientationchange.fb resize.fb", function (t) {
                    t && t.originalEvent && "resize" === t.originalEvent.type ? (e.requestId && u(e.requestId), e.requestId = d(function () {
                        e.update(t);
                    })) : (e.current && "iframe" === e.current.type && e.$refs.stage.hide(), setTimeout(function () {
                        e.$refs.stage.show(), e.update(t);
                    }, n.fancybox.isMobile ? 600 : 250));
                }), r.on("keydown.fb", function (t) {
                    var o = n.fancybox ? n.fancybox.getInstance() : null,
                        i = o.current,
                        a = t.keyCode || t.which;
                    if (9 == a) return void (i.opts.trapFocus && e.focus(t));
                    if (!(!i.opts.keyboard || t.ctrlKey || t.altKey || t.shiftKey || n(t.target).is("input,textarea,video,audio,select"))) return 8 === a || 27 === a ? (t.preventDefault(), void e.close(t)) : 37 === a || 38 === a ? (t.preventDefault(), void e.previous()) : 39 === a || 40 === a ? (t.preventDefault(), void e.next()) : void e.trigger("afterKeydown", t, a);
                }), e.group[e.currIndex].opts.idleTime && (e.idleSecondsCounter = 0, r.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle", function (t) {
                    e.idleSecondsCounter = 0, e.isIdle && e.showControls(), e.isIdle = !1;
                }), e.idleInterval = t.setInterval(function () {
                    ++e.idleSecondsCounter >= e.group[e.currIndex].opts.idleTime && !e.isDragging && (e.isIdle = !0, e.idleSecondsCounter = 0, e.hideControls());
                }, 1e3));
            },
            removeEvents: function removeEvents() {
                var e = this;
                s.off("orientationchange.fb resize.fb"), r.off("keydown.fb .fb-idle"), this.$refs.container.off(".fb-close .fb-prev .fb-next"), e.idleInterval && (t.clearInterval(e.idleInterval), e.idleInterval = null);
            },
            previous: function previous(t) {
                return this.jumpTo(this.currPos - 1, t);
            },
            next: function next(t) {
                return this.jumpTo(this.currPos + 1, t);
            },
            jumpTo: function jumpTo(t, e) {
                var o,
                    i,
                    a,
                    s,
                    r,
                    c,
                    l,
                    d,
                    u,
                    f = this,
                    h = f.group.length;

                if (!(f.isDragging || f.isClosing || f.isAnimating && f.firstRun)) {
                    if (t = parseInt(t, 10), !(a = f.current ? f.current.opts.loop : f.opts.loop) && (t < 0 || t >= h)) return !1;
                    if (o = f.firstRun = !Object.keys(f.slides).length, r = f.current, f.prevIndex = f.currIndex, f.prevPos = f.currPos, s = f.createSlide(t), h > 1 && ((a || s.index < h - 1) && f.createSlide(t + 1), (a || s.index > 0) && f.createSlide(t - 1)), f.current = s, f.currIndex = s.index, f.currPos = s.pos, f.trigger("beforeShow", o), f.updateControls(), s.forcedDuration = void 0, n.isNumeric(e) ? s.forcedDuration = e : e = s.opts[o ? "animationDuration" : "transitionDuration"], e = parseInt(e, 10), i = f.isMoved(s), s.$slide.addClass("fancybox-slide--current"), o) return s.opts.animationEffect && e && f.$refs.container.css("transition-duration", e + "ms"), f.$refs.container.addClass("fancybox-is-open").trigger("focus"), f.loadSlide(s), void f.preload("image");
                    c = n.fancybox.getTranslate(r.$slide), l = n.fancybox.getTranslate(f.$refs.stage), n.each(f.slides, function (t, e) {
                        n.fancybox.stop(e.$slide, !0);
                    }), r.pos !== s.pos && (r.isComplete = !1), r.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"), i ? (u = c.left - (r.pos * c.width + r.pos * r.opts.gutter), n.each(f.slides, function (t, o) {
                        o.$slide.removeClass("fancybox-animated").removeClass(function (t, e) {
                            return (e.match(/(^|\s)fancybox-fx-\S+/g) || []).join(" ");
                        });
                        var i = o.pos * c.width + o.pos * o.opts.gutter;
                        n.fancybox.setTranslate(o.$slide, {
                            top: 0,
                            left: i - l.left + u
                        }), o.pos !== s.pos && o.$slide.addClass("fancybox-slide--" + (o.pos > s.pos ? "next" : "previous")), p(o.$slide), n.fancybox.animate(o.$slide, {
                            top: 0,
                            left: (o.pos - s.pos) * c.width + (o.pos - s.pos) * o.opts.gutter
                        }, e, function () {
                            o.$slide.css({
                                transform: "",
                                opacity: ""
                            }).removeClass("fancybox-slide--next fancybox-slide--previous"), o.pos === f.currPos && f.complete();
                        });
                    })) : e && s.opts.transitionEffect && (d = "fancybox-animated fancybox-fx-" + s.opts.transitionEffect, r.$slide.addClass("fancybox-slide--" + (r.pos > s.pos ? "next" : "previous")), n.fancybox.animate(r.$slide, d, e, function () {
                        r.$slide.removeClass(d).removeClass("fancybox-slide--next fancybox-slide--previous");
                    }, !1)), s.isLoaded ? f.revealContent(s) : f.loadSlide(s), f.preload("image");
                }
            },
            createSlide: function createSlide(t) {
                var e,
                    o,
                    i = this;
                return o = t % i.group.length, o = o < 0 ? i.group.length + o : o, !i.slides[t] && i.group[o] && (e = n('<div class="fancybox-slide"></div>').appendTo(i.$refs.stage), i.slides[t] = n.extend(!0, {}, i.group[o], {
                    pos: t,
                    $slide: e,
                    isLoaded: !1
                }), i.updateSlide(i.slides[t])), i.slides[t];
            },
            scaleToActual: function scaleToActual(t, e, o) {
                var i,
                    a,
                    s,
                    r,
                    c,
                    l = this,
                    d = l.current,
                    u = d.$content,
                    f = n.fancybox.getTranslate(d.$slide).width,
                    p = n.fancybox.getTranslate(d.$slide).height,
                    h = d.width,
                    g = d.height;
                l.isAnimating || l.isMoved() || !u || "image" != d.type || !d.isLoaded || d.hasError || (l.isAnimating = !0, n.fancybox.stop(u), t = void 0 === t ? .5 * f : t, e = void 0 === e ? .5 * p : e, i = n.fancybox.getTranslate(u), i.top -= n.fancybox.getTranslate(d.$slide).top, i.left -= n.fancybox.getTranslate(d.$slide).left, r = h / i.width, c = g / i.height, a = .5 * f - .5 * h, s = .5 * p - .5 * g, h > f && (a = i.left * r - (t * r - t), a > 0 && (a = 0), a < f - h && (a = f - h)), g > p && (s = i.top * c - (e * c - e), s > 0 && (s = 0), s < p - g && (s = p - g)), l.updateCursor(h, g), n.fancybox.animate(u, {
                    top: s,
                    left: a,
                    scaleX: r,
                    scaleY: c
                }, o || 366, function () {
                    l.isAnimating = !1;
                }), l.SlideShow && l.SlideShow.isActive && l.SlideShow.stop());
            },
            scaleToFit: function scaleToFit(t) {
                var e,
                    o = this,
                    i = o.current,
                    a = i.$content;
                o.isAnimating || o.isMoved() || !a || "image" != i.type || !i.isLoaded || i.hasError || (o.isAnimating = !0, n.fancybox.stop(a), e = o.getFitPos(i), o.updateCursor(e.width, e.height), n.fancybox.animate(a, {
                    top: e.top,
                    left: e.left,
                    scaleX: e.width / a.width(),
                    scaleY: e.height / a.height()
                }, t || 366, function () {
                    o.isAnimating = !1;
                }));
            },
            getFitPos: function getFitPos(t) {
                var e,
                    o,
                    i,
                    a,
                    s = this,
                    r = t.$content,
                    c = t.$slide,
                    l = t.width || t.opts.width,
                    d = t.height || t.opts.height,
                    u = {};
                return !!(t.isLoaded && r && r.length) && (e = n.fancybox.getTranslate(s.$refs.stage).width, o = n.fancybox.getTranslate(s.$refs.stage).height, e -= parseFloat(c.css("paddingLeft")) + parseFloat(c.css("paddingRight")) + parseFloat(r.css("marginLeft")) + parseFloat(r.css("marginRight")), o -= parseFloat(c.css("paddingTop")) + parseFloat(c.css("paddingBottom")) + parseFloat(r.css("marginTop")) + parseFloat(r.css("marginBottom")), l && d || (l = e, d = o), i = Math.min(1, e / l, o / d), l *= i, d *= i, l > e - .5 && (l = e), d > o - .5 && (d = o), "image" === t.type ? (u.top = Math.floor(.5 * (o - d)) + parseFloat(c.css("paddingTop")), u.left = Math.floor(.5 * (e - l)) + parseFloat(c.css("paddingLeft"))) : "video" === t.contentType && (a = t.opts.width && t.opts.height ? l / d : t.opts.ratio || 16 / 9, d > l / a ? d = l / a : l > d * a && (l = d * a)), u.width = l, u.height = d, u);
            },
            update: function update(t) {
                var e = this;
                n.each(e.slides, function (n, o) {
                    e.updateSlide(o, t);
                });
            },
            updateSlide: function updateSlide(t, e) {
                var o = this,
                    i = t && t.$content,
                    a = t.width || t.opts.width,
                    s = t.height || t.opts.height,
                    r = t.$slide;
                o.adjustCaption(t), i && (a || s || "video" === t.contentType) && !t.hasError && (n.fancybox.stop(i), n.fancybox.setTranslate(i, o.getFitPos(t)), t.pos === o.currPos && (o.isAnimating = !1, o.updateCursor())), o.adjustLayout(t), r.length && (r.trigger("refresh"), t.pos === o.currPos && o.$refs.toolbar.add(o.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar", r.get(0).scrollHeight > r.get(0).clientHeight)), o.trigger("onUpdate", t, e);
            },
            centerSlide: function centerSlide(t) {
                var e = this,
                    o = e.current,
                    i = o.$slide;
                !e.isClosing && o && (i.siblings().css({
                    transform: "",
                    opacity: ""
                }), i.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"), n.fancybox.animate(i, {
                    top: 0,
                    left: 0,
                    opacity: 1
                }, void 0 === t ? 0 : t, function () {
                    i.css({
                        transform: "",
                        opacity: ""
                    }), o.isComplete || e.complete();
                }, !1));
            },
            isMoved: function isMoved(t) {
                var e,
                    o,
                    i = t || this.current;
                return !!i && (o = n.fancybox.getTranslate(this.$refs.stage), e = n.fancybox.getTranslate(i.$slide), !i.$slide.hasClass("fancybox-animated") && (Math.abs(e.top - o.top) > .5 || Math.abs(e.left - o.left) > .5));
            },
            updateCursor: function updateCursor(t, e) {
                var o,
                    i,
                    a = this,
                    s = a.current,
                    r = a.$refs.container;
                s && !a.isClosing && a.Guestures && (r.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"), o = a.canPan(t, e), i = !!o || a.isZoomable(), r.toggleClass("fancybox-is-zoomable", i), n("[data-fancybox-zoom]").prop("disabled", !i), o ? r.addClass("fancybox-can-pan") : i && ("zoom" === s.opts.clickContent || n.isFunction(s.opts.clickContent) && "zoom" == s.opts.clickContent(s)) ? r.addClass("fancybox-can-zoomIn") : s.opts.touch && (s.opts.touch.vertical || a.group.length > 1) && "video" !== s.contentType && r.addClass("fancybox-can-swipe"));
            },
            isZoomable: function isZoomable() {
                var t,
                    e = this,
                    n = e.current;

                if (n && !e.isClosing && "image" === n.type && !n.hasError) {
                    if (!n.isLoaded) return !0;
                    if ((t = e.getFitPos(n)) && (n.width > t.width || n.height > t.height)) return !0;
                }

                return !1;
            },
            isScaledDown: function isScaledDown(t, e) {
                var o = this,
                    i = !1,
                    a = o.current,
                    s = a.$content;
                return void 0 !== t && void 0 !== e ? i = t < a.width && e < a.height : s && (i = n.fancybox.getTranslate(s), i = i.width < a.width && i.height < a.height), i;
            },
            canPan: function canPan(t, e) {
                var o = this,
                    i = o.current,
                    a = null,
                    s = !1;
                return "image" === i.type && (i.isComplete || t && e) && !i.hasError && (s = o.getFitPos(i), void 0 !== t && void 0 !== e ? a = {
                    width: t,
                    height: e
                } : i.isComplete && (a = n.fancybox.getTranslate(i.$content)), a && s && (s = Math.abs(a.width - s.width) > 1.5 || Math.abs(a.height - s.height) > 1.5)), s;
            },
            loadSlide: function loadSlide(t) {
                var e,
                    o,
                    i,
                    a = this;

                if (!t.isLoading && !t.isLoaded) {
                    if (t.isLoading = !0, !1 === a.trigger("beforeLoad", t)) return t.isLoading = !1, !1;

                    switch (e = t.type, o = t.$slide, o.off("refresh").trigger("onReset").addClass(t.opts.slideClass), e) {
                        case "image":
                            a.setImage(t);
                            break;

                        case "iframe":
                            a.setIframe(t);
                            break;

                        case "html":
                            a.setContent(t, t.src || t.content);
                            break;

                        case "video":
                            a.setContent(t, t.opts.video.tpl.replace(/\{\{src\}\}/gi, t.src).replace("{{format}}", t.opts.videoFormat || t.opts.video.format || "").replace("{{poster}}", t.thumb || ""));
                            break;

                        case "inline":
                            n(t.src).length ? a.setContent(t, n(t.src)) : a.setError(t);
                            break;

                        case "ajax":
                            a.showLoading(t), i = n.ajax(n.extend({}, t.opts.ajax.settings, {
                                url: t.src,
                                success: function success(e, n) {
                                    "success" === n && a.setContent(t, e);
                                },
                                error: function error(e, n) {
                                    e && "abort" !== n && a.setError(t);
                                }
                            })), o.one("onReset", function () {
                                i.abort();
                            });
                            break;

                        default:
                            a.setError(t);
                    }

                    return !0;
                }
            },
            setImage: function setImage(t) {
                var o,
                    i = this;
                setTimeout(function () {
                    var e = t.$image;
                    i.isClosing || !t.isLoading || e && e.length && e[0].complete || t.hasError || i.showLoading(t);
                }, 50), i.checkSrcset(t), t.$content = n('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide.addClass("fancybox-slide--image")), !1 !== t.opts.preload && t.opts.width && t.opts.height && t.thumb && (t.width = t.opts.width, t.height = t.opts.height, o = e.createElement("img"), o.onerror = function () {
                    n(this).remove(), t.$ghost = null;
                }, o.onload = function () {
                    i.afterLoad(t);
                }, t.$ghost = n(o).addClass("fancybox-image").appendTo(t.$content).attr("src", t.thumb)), i.setBigImage(t);
            },
            checkSrcset: function checkSrcset(e) {
                var n,
                    o,
                    i,
                    a,
                    s = e.opts.srcset || e.opts.image.srcset;

                if (s) {
                    i = t.devicePixelRatio || 1, a = t.innerWidth * i, o = s.split(",").map(function (t) {
                        var e = {};
                        return t.trim().split(/\s+/).forEach(function (t, n) {
                            var o = parseInt(t.substring(0, t.length - 1), 10);
                            if (0 === n) return e.url = t;
                            o && (e.value = o, e.postfix = t[t.length - 1]);
                        }), e;
                    }), o.sort(function (t, e) {
                        return t.value - e.value;
                    });

                    for (var r = 0; r < o.length; r++) {
                        var c = o[r];

                        if ("w" === c.postfix && c.value >= a || "x" === c.postfix && c.value >= i) {
                            n = c;
                            break;
                        }
                    }

                    !n && o.length && (n = o[o.length - 1]), n && (e.src = n.url, e.width && e.height && "w" == n.postfix && (e.height = e.width / e.height * n.value, e.width = n.value), e.opts.srcset = s);
                }
            },
            setBigImage: function setBigImage(t) {
                var o = this,
                    i = e.createElement("img"),
                    a = n(i);
                t.$image = a.one("error", function () {
                    o.setError(t);
                }).one("load", function () {
                    var e;
                    t.$ghost || (o.resolveImageSlideSize(t, this.naturalWidth, this.naturalHeight), o.afterLoad(t)), o.isClosing || (t.opts.srcset && (e = t.opts.sizes, e && "auto" !== e || (e = (t.width / t.height > 1 && s.width() / s.height() > 1 ? "100" : Math.round(t.width / t.height * 100)) + "vw"), a.attr("sizes", e).attr("srcset", t.opts.srcset)), t.$ghost && setTimeout(function () {
                        t.$ghost && !o.isClosing && t.$ghost.hide();
                    }, Math.min(300, Math.max(1e3, t.height / 1600))), o.hideLoading(t));
                }).addClass("fancybox-image").attr("src", t.src).appendTo(t.$content), (i.complete || "complete" == i.readyState) && a.naturalWidth && a.naturalHeight ? a.trigger("load") : i.error && a.trigger("error");
            },
            resolveImageSlideSize: function resolveImageSlideSize(t, e, n) {
                var o = parseInt(t.opts.width, 10),
                    i = parseInt(t.opts.height, 10);
                t.width = e, t.height = n, o > 0 && (t.width = o, t.height = Math.floor(o * n / e)), i > 0 && (t.width = Math.floor(i * e / n), t.height = i);
            },
            setIframe: function setIframe(t) {
                var e,
                    o = this,
                    i = t.opts.iframe,
                    a = t.$slide;
                t.$content = n('<div class="fancybox-content' + (i.preload ? " fancybox-is-hidden" : "") + '"></div>').css(i.css).appendTo(a), a.addClass("fancybox-slide--" + t.contentType), t.$iframe = e = n(i.tpl.replace(/\{rnd\}/g, new Date().getTime())).attr(i.attr).appendTo(t.$content), i.preload ? (o.showLoading(t), e.on("load.fb error.fb", function (e) {
                    this.isReady = 1, t.$slide.trigger("refresh"), o.afterLoad(t);
                }), a.on("refresh.fb", function () {
                    var n,
                        o,
                        s = t.$content,
                        r = i.css.width,
                        c = i.css.height;

                    if (1 === e[0].isReady) {
                        try {
                            n = e.contents(), o = n.find("body");
                        } catch (t) {
                        }

                        o && o.length && o.children().length && (a.css("overflow", "visible"), s.css({
                            width: "100%",
                            "max-width": "100%",
                            height: "9999px"
                        }), void 0 === r && (r = Math.ceil(Math.max(o[0].clientWidth, o.outerWidth(!0)))), s.css("width", r || "").css("max-width", ""), void 0 === c && (c = Math.ceil(Math.max(o[0].clientHeight, o.outerHeight(!0)))), s.css("height", c || ""), a.css("overflow", "auto")), s.removeClass("fancybox-is-hidden");
                    }
                })) : o.afterLoad(t), e.attr("src", t.src), a.one("onReset", function () {
                    try {
                        n(this).find("iframe").hide().unbind().attr("src", "//about:blank");
                    } catch (t) {
                    }

                    n(this).off("refresh.fb").empty(), t.isLoaded = !1, t.isRevealed = !1;
                });
            },
            setContent: function setContent(t, e) {
                var o = this;
                o.isClosing || (o.hideLoading(t), t.$content && n.fancybox.stop(t.$content), t.$slide.empty(), l(e) && e.parent().length ? ((e.hasClass("fancybox-content") || e.parent().hasClass("fancybox-content")) && e.parents(".fancybox-slide").trigger("onReset"), t.$placeholder = n("<div>").hide().insertAfter(e), e.css("display", "inline-block")) : t.hasError || ("string" === n.type(e) && (e = n("<div>").append(n.trim(e)).contents()), t.opts.filter && (e = n("<div>").html(e).find(t.opts.filter))), t.$slide.one("onReset", function () {
                    n(this).find("video,audio").trigger("pause"), t.$placeholder && (t.$placeholder.after(e.removeClass("fancybox-content").hide()).remove(), t.$placeholder = null), t.$smallBtn && (t.$smallBtn.remove(), t.$smallBtn = null), t.hasError || (n(this).empty(), t.isLoaded = !1, t.isRevealed = !1);
                }), n(e).appendTo(t.$slide), n(e).is("video,audio") && (n(e).addClass("fancybox-video"), n(e).wrap("<div></div>"), t.contentType = "video", t.opts.width = t.opts.width || n(e).attr("width"), t.opts.height = t.opts.height || n(e).attr("height")), t.$content = t.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(), t.$content.siblings().hide(), t.$content.length || (t.$content = t.$slide.wrapInner("<div></div>").children().first()), t.$content.addClass("fancybox-content"), t.$slide.addClass("fancybox-slide--" + t.contentType), o.afterLoad(t));
            },
            setError: function setError(t) {
                t.hasError = !0, t.$slide.trigger("onReset").removeClass("fancybox-slide--" + t.contentType).addClass("fancybox-slide--error"), t.contentType = "html", this.setContent(t, this.translate(t, t.opts.errorTpl)), t.pos === this.currPos && (this.isAnimating = !1);
            },
            showLoading: function showLoading(t) {
                var e = this;
                (t = t || e.current) && !t.$spinner && (t.$spinner = n(e.translate(e, e.opts.spinnerTpl)).appendTo(t.$slide).hide().fadeIn("fast"));
            },
            hideLoading: function hideLoading(t) {
                var e = this;
                (t = t || e.current) && t.$spinner && (t.$spinner.stop().remove(), delete t.$spinner);
            },
            afterLoad: function afterLoad(t) {
                var e = this;
                e.isClosing || (t.isLoading = !1, t.isLoaded = !0, e.trigger("afterLoad", t), e.hideLoading(t), !t.opts.smallBtn || t.$smallBtn && t.$smallBtn.length || (t.$smallBtn = n(e.translate(t, t.opts.btnTpl.smallBtn)).appendTo(t.$content)), t.opts.protect && t.$content && !t.hasError && (t.$content.on("contextmenu.fb", function (t) {
                    return 2 == t.button && t.preventDefault(), !0;
                }), "image" === t.type && n('<div class="fancybox-spaceball"></div>').appendTo(t.$content)), e.adjustCaption(t), e.adjustLayout(t), t.pos === e.currPos && e.updateCursor(), e.revealContent(t));
            },
            adjustCaption: function adjustCaption(t) {
                var e,
                    n = this,
                    o = t || n.current,
                    i = o.opts.caption,
                    a = o.opts.preventCaptionOverlap,
                    s = n.$refs.caption,
                    r = !1;
                s.toggleClass("fancybox-caption--separate", a), a && i && i.length && (o.pos !== n.currPos ? (e = s.clone().appendTo(s.parent()), e.children().eq(0).empty().html(i), r = e.outerHeight(!0), e.empty().remove()) : n.$caption && (r = n.$caption.outerHeight(!0)), o.$slide.css("padding-bottom", r || ""));
            },
            adjustLayout: function adjustLayout(t) {
                var e,
                    n,
                    o,
                    i,
                    a = this,
                    s = t || a.current;
                s.isLoaded && !0 !== s.opts.disableLayoutFix && (s.$content.css("margin-bottom", ""), s.$content.outerHeight() > s.$slide.height() + .5 && (o = s.$slide[0].style["padding-bottom"], i = s.$slide.css("padding-bottom"), parseFloat(i) > 0 && (e = s.$slide[0].scrollHeight, s.$slide.css("padding-bottom", 0), Math.abs(e - s.$slide[0].scrollHeight) < 1 && (n = i), s.$slide.css("padding-bottom", o))), s.$content.css("margin-bottom", n));
            },
            revealContent: function revealContent(t) {
                var e,
                    o,
                    i,
                    a,
                    s = this,
                    r = t.$slide,
                    c = !1,
                    l = !1,
                    d = s.isMoved(t),
                    u = t.isRevealed;
                return t.isRevealed = !0, e = t.opts[s.firstRun ? "animationEffect" : "transitionEffect"], i = t.opts[s.firstRun ? "animationDuration" : "transitionDuration"], i = parseInt(void 0 === t.forcedDuration ? i : t.forcedDuration, 10), !d && t.pos === s.currPos && i || (e = !1), "zoom" === e && (t.pos === s.currPos && i && "image" === t.type && !t.hasError && (l = s.getThumbPos(t)) ? c = s.getFitPos(t) : e = "fade"), "zoom" === e ? (s.isAnimating = !0, c.scaleX = c.width / l.width, c.scaleY = c.height / l.height, a = t.opts.zoomOpacity, "auto" == a && (a = Math.abs(t.width / t.height - l.width / l.height) > .1), a && (l.opacity = .1, c.opacity = 1), n.fancybox.setTranslate(t.$content.removeClass("fancybox-is-hidden"), l), p(t.$content), void n.fancybox.animate(t.$content, c, i, function () {
                    s.isAnimating = !1, s.complete();
                })) : (s.updateSlide(t), e ? (n.fancybox.stop(r), o = "fancybox-slide--" + (t.pos >= s.prevPos ? "next" : "previous") + " fancybox-animated fancybox-fx-" + e, r.addClass(o).removeClass("fancybox-slide--current"), t.$content.removeClass("fancybox-is-hidden"), p(r), "image" !== t.type && t.$content.hide().show(0), void n.fancybox.animate(r, "fancybox-slide--current", i, function () {
                    r.removeClass(o).css({
                        transform: "",
                        opacity: ""
                    }), t.pos === s.currPos && s.complete();
                }, !0)) : (t.$content.removeClass("fancybox-is-hidden"), u || !d || "image" !== t.type || t.hasError || t.$content.hide().fadeIn("fast"), void (t.pos === s.currPos && s.complete())));
            },
            getThumbPos: function getThumbPos(t) {
                var e,
                    o,
                    i,
                    a,
                    s,
                    r = !1,
                    c = t.$thumb;
                return !(!c || !g(c[0])) && (e = n.fancybox.getTranslate(c), o = parseFloat(c.css("border-top-width") || 0), i = parseFloat(c.css("border-right-width") || 0), a = parseFloat(c.css("border-bottom-width") || 0), s = parseFloat(c.css("border-left-width") || 0), r = {
                    top: e.top + o,
                    left: e.left + s,
                    width: e.width - i - s,
                    height: e.height - o - a,
                    scaleX: 1,
                    scaleY: 1
                }, e.width > 0 && e.height > 0 && r);
            },
            complete: function complete() {
                var t,
                    e = this,
                    o = e.current,
                    i = {};
                !e.isMoved() && o.isLoaded && (o.isComplete || (o.isComplete = !0, o.$slide.siblings().trigger("onReset"), e.preload("inline"), p(o.$slide), o.$slide.addClass("fancybox-slide--complete"), n.each(e.slides, function (t, o) {
                    o.pos >= e.currPos - 1 && o.pos <= e.currPos + 1 ? i[o.pos] = o : o && (n.fancybox.stop(o.$slide), o.$slide.off().remove());
                }), e.slides = i), e.isAnimating = !1, e.updateCursor(), e.trigger("afterShow"), o.opts.video.autoStart && o.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended", function () {
                    Document.exitFullscreen ? Document.exitFullscreen() : this.webkitExitFullscreen && this.webkitExitFullscreen(), e.next();
                }), o.opts.autoFocus && "html" === o.contentType && (t = o.$content.find("input[autofocus]:enabled:visible:first"), t.length ? t.trigger("focus") : e.focus(null, !0)), o.$slide.scrollTop(0).scrollLeft(0));
            },
            preload: function preload(t) {
                var e,
                    n,
                    o = this;
                o.group.length < 2 || (n = o.slides[o.currPos + 1], e = o.slides[o.currPos - 1], e && e.type === t && o.loadSlide(e), n && n.type === t && o.loadSlide(n));
            },
            focus: function focus(t, o) {
                var i,
                    a,
                    s = this,
                    r = ["a[href]", "area[href]", 'input:not([disabled]):not([type="hidden"]):not([aria-hidden])', "select:not([disabled]):not([aria-hidden])", "textarea:not([disabled]):not([aria-hidden])", "button:not([disabled]):not([aria-hidden])", "iframe", "object", "embed", "video", "audio", "[contenteditable]", '[tabindex]:not([tabindex^="-"])'].join(",");
                s.isClosing || (i = !t && s.current && s.current.isComplete ? s.current.$slide.find("*:visible" + (o ? ":not(.fancybox-close-small)" : "")) : s.$refs.container.find("*:visible"), i = i.filter(r).filter(function () {
                    return "hidden" !== n(this).css("visibility") && !n(this).hasClass("disabled");
                }), i.length ? (a = i.index(e.activeElement), t && t.shiftKey ? (a < 0 || 0 == a) && (t.preventDefault(), i.eq(i.length - 1).trigger("focus")) : (a < 0 || a == i.length - 1) && (t && t.preventDefault(), i.eq(0).trigger("focus"))) : s.$refs.container.trigger("focus"));
            },
            activate: function activate() {
                var t = this;
                n(".fancybox-container").each(function () {
                    var e = n(this).data("FancyBox");
                    e && e.id !== t.id && !e.isClosing && (e.trigger("onDeactivate"), e.removeEvents(), e.isVisible = !1);
                }), t.isVisible = !0, (t.current || t.isIdle) && (t.update(), t.updateControls()), t.trigger("onActivate"), t.addEvents();
            },
            close: function close(t, e) {
                var o,
                    i,
                    a,
                    s,
                    r,
                    c,
                    l,
                    u = this,
                    f = u.current,
                    h = function h() {
                        u.cleanUp(t);
                    };

                return !u.isClosing && (u.isClosing = !0, !1 === u.trigger("beforeClose", t) ? (u.isClosing = !1, d(function () {
                    u.update();
                }), !1) : (u.removeEvents(), a = f.$content, o = f.opts.animationEffect, i = n.isNumeric(e) ? e : o ? f.opts.animationDuration : 0, f.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"), !0 !== t ? n.fancybox.stop(f.$slide) : o = !1, f.$slide.siblings().trigger("onReset").remove(), i && u.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration", i + "ms"), u.hideLoading(f), u.hideControls(!0), u.updateCursor(), "zoom" !== o || a && i && "image" === f.type && !u.isMoved() && !f.hasError && (l = u.getThumbPos(f)) || (o = "fade"), "zoom" === o ? (n.fancybox.stop(a), s = n.fancybox.getTranslate(a), c = {
                    top: s.top,
                    left: s.left,
                    scaleX: s.width / l.width,
                    scaleY: s.height / l.height,
                    width: l.width,
                    height: l.height
                }, r = f.opts.zoomOpacity, "auto" == r && (r = Math.abs(f.width / f.height - l.width / l.height) > .1), r && (l.opacity = 0), n.fancybox.setTranslate(a, c), p(a), n.fancybox.animate(a, l, i, h), !0) : (o && i ? n.fancybox.animate(f.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"), "fancybox-animated fancybox-fx-" + o, i, h) : !0 === t ? setTimeout(h, i) : h(), !0)));
            },
            cleanUp: function cleanUp(e) {
                var o,
                    i,
                    a,
                    s = this,
                    r = s.current.opts.$orig;
                s.current.$slide.trigger("onReset"), s.$refs.container.empty().remove(), s.trigger("afterClose", e), s.current.opts.backFocus && (r && r.length && r.is(":visible") || (r = s.$trigger), r && r.length && (i = t.scrollX, a = t.scrollY, r.trigger("focus"), n("html, body").scrollTop(a).scrollLeft(i))), s.current = null, o = n.fancybox.getInstance(), o ? o.activate() : (n("body").removeClass("fancybox-active compensate-for-scrollbar"), n("#fancybox-style-noscroll").remove());
            },
            trigger: function trigger(t, e) {
                var o,
                    i = Array.prototype.slice.call(arguments, 1),
                    a = this,
                    s = e && e.opts ? e : a.current;
                if (s ? i.unshift(s) : s = a, i.unshift(a), n.isFunction(s.opts[t]) && (o = s.opts[t].apply(s, i)), !1 === o) return o;
                "afterClose" !== t && a.$refs ? a.$refs.container.trigger(t + ".fb", i) : r.trigger(t + ".fb", i);
            },
            updateControls: function updateControls() {
                var t = this,
                    o = t.current,
                    i = o.index,
                    a = t.$refs.container,
                    s = t.$refs.caption,
                    r = o.opts.caption;
                o.$slide.trigger("refresh"), r && r.length ? (t.$caption = s, s.children().eq(0).html(r)) : t.$caption = null, t.hasHiddenControls || t.isIdle || t.showControls(), a.find("[data-fancybox-count]").html(t.group.length), a.find("[data-fancybox-index]").html(i + 1), a.find("[data-fancybox-prev]").prop("disabled", !o.opts.loop && i <= 0), a.find("[data-fancybox-next]").prop("disabled", !o.opts.loop && i >= t.group.length - 1), "image" === o.type ? a.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href", o.opts.image.src || o.src).show() : o.opts.toolbar && a.find("[data-fancybox-download],[data-fancybox-zoom]").hide(), n(e.activeElement).is(":hidden,[disabled]") && t.$refs.container.trigger("focus");
            },
            hideControls: function hideControls(t) {
                var e = this,
                    n = ["infobar", "toolbar", "nav"];
                !t && e.current.opts.preventCaptionOverlap || n.push("caption"), this.$refs.container.removeClass(n.map(function (t) {
                    return "fancybox-show-" + t;
                }).join(" ")), this.hasHiddenControls = !0;
            },
            showControls: function showControls() {
                var t = this,
                    e = t.current ? t.current.opts : t.opts,
                    n = t.$refs.container;
                t.hasHiddenControls = !1, t.idleSecondsCounter = 0, n.toggleClass("fancybox-show-toolbar", !(!e.toolbar || !e.buttons)).toggleClass("fancybox-show-infobar", !!(e.infobar && t.group.length > 1)).toggleClass("fancybox-show-caption", !!t.$caption).toggleClass("fancybox-show-nav", !!(e.arrows && t.group.length > 1)).toggleClass("fancybox-is-modal", !!e.modal);
            },
            toggleControls: function toggleControls() {
                this.hasHiddenControls ? this.showControls() : this.hideControls();
            }
        }), n.fancybox = {
            version: "3.5.7",
            defaults: a,
            getInstance: function getInstance(t) {
                var e = n('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),
                    o = Array.prototype.slice.call(arguments, 1);
                return e instanceof b && ("string" === n.type(t) ? e[t].apply(e, o) : "function" === n.type(t) && t.apply(e, o), e);
            },
            open: function open(t, e, n) {
                return new b(t, e, n);
            },
            close: function close(t) {
                var e = this.getInstance();
                e && (e.close(), !0 === t && this.close(t));
            },
            destroy: function destroy() {
                this.close(!0), r.add("body").off("click.fb-start", "**");
            },
            isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
            use3d: function () {
                var n = e.createElement("div");
                return t.getComputedStyle && t.getComputedStyle(n) && t.getComputedStyle(n).getPropertyValue("transform") && !(e.documentMode && e.documentMode < 11);
            }(),
            getTranslate: function getTranslate(t) {
                var e;
                return !(!t || !t.length) && (e = t[0].getBoundingClientRect(), {
                    top: e.top || 0,
                    left: e.left || 0,
                    width: e.width,
                    height: e.height,
                    opacity: parseFloat(t.css("opacity"))
                });
            },
            setTranslate: function setTranslate(t, e) {
                var n = "",
                    o = {};
                if (t && e) return void 0 === e.left && void 0 === e.top || (n = (void 0 === e.left ? t.position().left : e.left) + "px, " + (void 0 === e.top ? t.position().top : e.top) + "px", n = this.use3d ? "translate3d(" + n + ", 0px)" : "translate(" + n + ")"), void 0 !== e.scaleX && void 0 !== e.scaleY ? n += " scale(" + e.scaleX + ", " + e.scaleY + ")" : void 0 !== e.scaleX && (n += " scaleX(" + e.scaleX + ")"), n.length && (o.transform = n), void 0 !== e.opacity && (o.opacity = e.opacity), void 0 !== e.width && (o.width = e.width), void 0 !== e.height && (o.height = e.height), t.css(o);
            },
            animate: function animate(t, e, o, i, a) {
                var s,
                    r = this;
                n.isFunction(o) && (i = o, o = null), r.stop(t), s = r.getTranslate(t), t.on(f, function (c) {
                    (!c || !c.originalEvent || t.is(c.originalEvent.target) && "z-index" != c.originalEvent.propertyName) && (r.stop(t), n.isNumeric(o) && t.css("transition-duration", ""), n.isPlainObject(e) ? void 0 !== e.scaleX && void 0 !== e.scaleY && r.setTranslate(t, {
                        top: e.top,
                        left: e.left,
                        width: s.width * e.scaleX,
                        height: s.height * e.scaleY,
                        scaleX: 1,
                        scaleY: 1
                    }) : !0 !== a && t.removeClass(e), n.isFunction(i) && i(c));
                }), n.isNumeric(o) && t.css("transition-duration", o + "ms"), n.isPlainObject(e) ? (void 0 !== e.scaleX && void 0 !== e.scaleY && (delete e.width, delete e.height, t.parent().hasClass("fancybox-slide--image") && t.parent().addClass("fancybox-is-scaling")), n.fancybox.setTranslate(t, e)) : t.addClass(e), t.data("timer", setTimeout(function () {
                    t.trigger(f);
                }, o + 33));
            },
            stop: function stop(t, e) {
                t && t.length && (clearTimeout(t.data("timer")), e && t.trigger(f), t.off(f).css("transition-duration", ""), t.parent().removeClass("fancybox-is-scaling"));
            }
        }, n.fn.fancybox = function (t) {
            var e;
            return t = t || {}, e = t.selector || !1, e ? n("body").off("click.fb-start", e).on("click.fb-start", e, {
                options: t
            }, i) : this.off("click.fb-start").on("click.fb-start", {
                items: this,
                options: t
            }, i), this;
        }, r.on("click.fb-start", "[data-fancybox]", i), r.on("click.fb-start", "[data-fancybox-trigger]", function (t) {
            n('[data-fancybox="' + n(this).attr("data-fancybox-trigger") + '"]').eq(n(this).attr("data-fancybox-index") || 0).trigger("click.fb-start", {
                $trigger: n(this)
            });
        }),
            function () {
                var t = null;
                r.on("mousedown mouseup focus blur", ".fancybox-button", function (e) {
                    switch (e.type) {
                        case "mousedown":
                            t = n(this);
                            break;

                        case "mouseup":
                            t = null;
                            break;

                        case "focusin":
                            n(".fancybox-button").removeClass("fancybox-focus"), n(this).is(t) || n(this).is("[disabled]") || n(this).addClass("fancybox-focus");
                            break;

                        case "focusout":
                            n(".fancybox-button").removeClass("fancybox-focus");
                    }
                });
            }();
    }
}(window, document, jQuery),
    function (t) {
        "use strict";

        var e = {
                youtube: {
                    matcher: /(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,
                    params: {
                        autoplay: 1,
                        autohide: 1,
                        fs: 1,
                        rel: 0,
                        hd: 1,
                        wmode: "transparent",
                        enablejsapi: 1,
                        html5: 1
                    },
                    paramPlace: 8,
                    type: "iframe",
                    url: "https://www.youtube-nocookie.com/embed/$4",
                    thumb: "https://img.youtube.com/vi/$4/hqdefault.jpg"
                },
                vimeo: {
                    matcher: /^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,
                    params: {
                        autoplay: 1,
                        hd: 1,
                        show_title: 1,
                        show_byline: 1,
                        show_portrait: 0,
                        fullscreen: 1
                    },
                    paramPlace: 3,
                    type: "iframe",
                    url: "//player.vimeo.com/video/$2"
                },
                instagram: {
                    matcher: /(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,
                    type: "image",
                    url: "//$1/p/$2/media/?size=l"
                },
                gmap_place: {
                    matcher: /(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,
                    type: "iframe",
                    url: function url(t) {
                        return "//maps.google." + t[2] + "/?ll=" + (t[9] ? t[9] + "&z=" + Math.floor(t[10]) + (t[12] ? t[12].replace(/^\//, "&") : "") : t[12] + "").replace(/\?/, "&") + "&output=" + (t[12] && t[12].indexOf("layer=c") > 0 ? "svembed" : "embed");
                    }
                },
                gmap_search: {
                    matcher: /(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,
                    type: "iframe",
                    url: function url(t) {
                        return "//maps.google." + t[2] + "/maps?q=" + t[5].replace("query=", "q=").replace("api=1", "") + "&output=embed";
                    }
                }
            },
            n = function n(e, _n, o) {
                if (e) return o = o || "", "object" === t.type(o) && (o = t.param(o, !0)), t.each(_n, function (t, n) {
                    e = e.replace("$" + t, n || "");
                }), o.length && (e += (e.indexOf("?") > 0 ? "&" : "?") + o), e;
            };

        t(document).on("objectNeedsType.fb", function (o, i, a) {
            var s,
                r,
                c,
                l,
                d,
                u,
                f,
                p = a.src || "",
                h = !1;
            s = t.extend(!0, {}, e, a.opts.media), t.each(s, function (e, o) {
                if (c = p.match(o.matcher)) {
                    if (h = o.type, f = e, u = {}, o.paramPlace && c[o.paramPlace]) {
                        d = c[o.paramPlace], "?" == d[0] && (d = d.substring(1)), d = d.split("&");

                        for (var i = 0; i < d.length; ++i) {
                            var s = d[i].split("=", 2);
                            2 == s.length && (u[s[0]] = decodeURIComponent(s[1].replace(/\+/g, " ")));
                        }
                    }

                    return l = t.extend(!0, {}, o.params, a.opts[e], u), p = "function" === t.type(o.url) ? o.url.call(this, c, l, a) : n(o.url, c, l), r = "function" === t.type(o.thumb) ? o.thumb.call(this, c, l, a) : n(o.thumb, c), "youtube" === e ? p = p.replace(/&t=((\d+)m)?(\d+)s/, function (t, e, n, o) {
                        return "&start=" + ((n ? 60 * parseInt(n, 10) : 0) + parseInt(o, 10));
                    }) : "vimeo" === e && (p = p.replace("&%23", "#")), !1;
                }
            }), h ? (a.opts.thumb || a.opts.$thumb && a.opts.$thumb.length || (a.opts.thumb = r), "iframe" === h && (a.opts = t.extend(!0, a.opts, {
                iframe: {
                    preload: !1,
                    attr: {
                        scrolling: "no"
                    }
                }
            })), t.extend(a, {
                type: h,
                src: p,
                origSrc: a.src,
                contentSource: f,
                contentType: "image" === h ? "image" : "gmap_place" == f || "gmap_search" == f ? "map" : "video"
            })) : p && (a.type = a.opts.defaultType);
        });
        var o = {
            youtube: {
                src: "https://www.youtube.com/iframe_api",
                "class": "YT",
                loading: !1,
                loaded: !1
            },
            vimeo: {
                src: "https://player.vimeo.com/api/player.js",
                "class": "Vimeo",
                loading: !1,
                loaded: !1
            },
            load: function load(t) {
                var e,
                    n = this;
                if (this[t].loaded) return void setTimeout(function () {
                    n.done(t);
                });
                this[t].loading || (this[t].loading = !0, e = document.createElement("script"), e.type = "text/javascript", e.src = this[t].src, "youtube" === t ? window.onYouTubeIframeAPIReady = function () {
                    n[t].loaded = !0, n.done(t);
                } : e.onload = function () {
                    n[t].loaded = !0, n.done(t);
                }, document.body.appendChild(e));
            },
            done: function done(e) {
                var n, o, i;
                "youtube" === e && delete window.onYouTubeIframeAPIReady, (n = t.fancybox.getInstance()) && (o = n.current.$content.find("iframe"), "youtube" === e && void 0 !== YT && YT ? i = new YT.Player(o.attr("id"), {
                    events: {
                        onStateChange: function onStateChange(t) {
                            0 == t.data && n.next();
                        }
                    }
                }) : "vimeo" === e && void 0 !== Vimeo && Vimeo && (i = new Vimeo.Player(o), i.on("ended", function () {
                    n.next();
                })));
            }
        };
        t(document).on({
            "afterShow.fb": function afterShowFb(t, e, n) {
                e.group.length > 1 && ("youtube" === n.contentSource || "vimeo" === n.contentSource) && o.load(n.contentSource);
            }
        });
    }(jQuery),
    function (t, e, n) {
        "use strict";

        var o = function () {
                return t.requestAnimationFrame || t.webkitRequestAnimationFrame || t.mozRequestAnimationFrame || t.oRequestAnimationFrame || function (e) {
                    return t.setTimeout(e, 1e3 / 60);
                };
            }(),
            i = function () {
                return t.cancelAnimationFrame || t.webkitCancelAnimationFrame || t.mozCancelAnimationFrame || t.oCancelAnimationFrame || function (e) {
                    t.clearTimeout(e);
                };
            }(),
            a = function a(e) {
                var n = [];
                e = e.originalEvent || e || t.e, e = e.touches && e.touches.length ? e.touches : e.changedTouches && e.changedTouches.length ? e.changedTouches : [e];

                for (var o in e) {
                    e[o].pageX ? n.push({
                        x: e[o].pageX,
                        y: e[o].pageY
                    }) : e[o].clientX && n.push({
                        x: e[o].clientX,
                        y: e[o].clientY
                    });
                }

                return n;
            },
            s = function s(t, e, n) {
                return e && t ? "x" === n ? t.x - e.x : "y" === n ? t.y - e.y : Math.sqrt(Math.pow(t.x - e.x, 2) + Math.pow(t.y - e.y, 2)) : 0;
            },
            r = function r(t) {
                if (t.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe') || n.isFunction(t.get(0).onclick) || t.data("selectable")) return !0;

                for (var e = 0, o = t[0].attributes, i = o.length; e < i; e++) {
                    if ("data-fancybox-" === o[e].nodeName.substr(0, 14)) return !0;
                }

                return !1;
            },
            c = function c(e) {
                var n = t.getComputedStyle(e)["overflow-y"],
                    o = t.getComputedStyle(e)["overflow-x"],
                    i = ("scroll" === n || "auto" === n) && e.scrollHeight > e.clientHeight,
                    a = ("scroll" === o || "auto" === o) && e.scrollWidth > e.clientWidth;
                return i || a;
            },
            l = function l(t) {
                for (var e = !1; ;) {
                    if (e = c(t.get(0))) break;
                    if (t = t.parent(), !t.length || t.hasClass("fancybox-stage") || t.is("body")) break;
                }

                return e;
            },
            d = function d(t) {
                var e = this;
                e.instance = t, e.$bg = t.$refs.bg, e.$stage = t.$refs.stage, e.$container = t.$refs.container, e.destroy(), e.$container.on("touchstart.fb.touch mousedown.fb.touch", n.proxy(e, "ontouchstart"));
            };

        d.prototype.destroy = function () {
            var t = this;
            t.$container.off(".fb.touch"), n(e).off(".fb.touch"), t.requestId && (i(t.requestId), t.requestId = null), t.tapped && (clearTimeout(t.tapped), t.tapped = null);
        }, d.prototype.ontouchstart = function (o) {
            var i = this,
                c = n(o.target),
                d = i.instance,
                u = d.current,
                f = u.$slide,
                p = u.$content,
                h = "touchstart" == o.type;

            if (h && i.$container.off("mousedown.fb.touch"), (!o.originalEvent || 2 != o.originalEvent.button) && f.length && c.length && !r(c) && !r(c.parent()) && (c.is("img") || !(o.originalEvent.clientX > c[0].clientWidth + c.offset().left))) {
                if (!u || d.isAnimating || u.$slide.hasClass("fancybox-animated")) return o.stopPropagation(), void o.preventDefault();
                i.realPoints = i.startPoints = a(o), i.startPoints.length && (u.touch && o.stopPropagation(), i.startEvent = o, i.canTap = !0, i.$target = c, i.$content = p, i.opts = u.opts.touch, i.isPanning = !1, i.isSwiping = !1, i.isZooming = !1, i.isScrolling = !1, i.canPan = d.canPan(), i.startTime = new Date().getTime(), i.distanceX = i.distanceY = i.distance = 0, i.canvasWidth = Math.round(f[0].clientWidth), i.canvasHeight = Math.round(f[0].clientHeight), i.contentLastPos = null, i.contentStartPos = n.fancybox.getTranslate(i.$content) || {
                    top: 0,
                    left: 0
                }, i.sliderStartPos = n.fancybox.getTranslate(f), i.stagePos = n.fancybox.getTranslate(d.$refs.stage), i.sliderStartPos.top -= i.stagePos.top, i.sliderStartPos.left -= i.stagePos.left, i.contentStartPos.top -= i.stagePos.top, i.contentStartPos.left -= i.stagePos.left, n(e).off(".fb.touch").on(h ? "touchend.fb.touch touchcancel.fb.touch" : "mouseup.fb.touch mouseleave.fb.touch", n.proxy(i, "ontouchend")).on(h ? "touchmove.fb.touch" : "mousemove.fb.touch", n.proxy(i, "ontouchmove")), n.fancybox.isMobile && e.addEventListener("scroll", i.onscroll, !0), ((i.opts || i.canPan) && (c.is(i.$stage) || i.$stage.find(c).length) || (c.is(".fancybox-image") && o.preventDefault(), n.fancybox.isMobile && c.parents(".fancybox-caption").length)) && (i.isScrollable = l(c) || l(c.parent()), n.fancybox.isMobile && i.isScrollable || o.preventDefault(), (1 === i.startPoints.length || u.hasError) && (i.canPan ? (n.fancybox.stop(i.$content), i.isPanning = !0) : i.isSwiping = !0, i.$container.addClass("fancybox-is-grabbing")), 2 === i.startPoints.length && "image" === u.type && (u.isLoaded || u.$ghost) && (i.canTap = !1, i.isSwiping = !1, i.isPanning = !1, i.isZooming = !0, n.fancybox.stop(i.$content), i.centerPointStartX = .5 * (i.startPoints[0].x + i.startPoints[1].x) - n(t).scrollLeft(), i.centerPointStartY = .5 * (i.startPoints[0].y + i.startPoints[1].y) - n(t).scrollTop(), i.percentageOfImageAtPinchPointX = (i.centerPointStartX - i.contentStartPos.left) / i.contentStartPos.width, i.percentageOfImageAtPinchPointY = (i.centerPointStartY - i.contentStartPos.top) / i.contentStartPos.height, i.startDistanceBetweenFingers = s(i.startPoints[0], i.startPoints[1]))));
            }
        }, d.prototype.onscroll = function (t) {
            var n = this;
            n.isScrolling = !0, e.removeEventListener("scroll", n.onscroll, !0);
        }, d.prototype.ontouchmove = function (t) {
            var e = this;
            return void 0 !== t.originalEvent.buttons && 0 === t.originalEvent.buttons ? void e.ontouchend(t) : e.isScrolling ? void (e.canTap = !1) : (e.newPoints = a(t), void ((e.opts || e.canPan) && e.newPoints.length && e.newPoints.length && (e.isSwiping && !0 === e.isSwiping || t.preventDefault(), e.distanceX = s(e.newPoints[0], e.startPoints[0], "x"), e.distanceY = s(e.newPoints[0], e.startPoints[0], "y"), e.distance = s(e.newPoints[0], e.startPoints[0]), e.distance > 0 && (e.isSwiping ? e.onSwipe(t) : e.isPanning ? e.onPan() : e.isZooming && e.onZoom()))));
        }, d.prototype.onSwipe = function (e) {
            var a,
                s = this,
                r = s.instance,
                c = s.isSwiping,
                l = s.sliderStartPos.left || 0;
            if (!0 !== c) "x" == c && (s.distanceX > 0 && (s.instance.group.length < 2 || 0 === s.instance.current.index && !s.instance.current.opts.loop) ? l += Math.pow(s.distanceX, .8) : s.distanceX < 0 && (s.instance.group.length < 2 || s.instance.current.index === s.instance.group.length - 1 && !s.instance.current.opts.loop) ? l -= Math.pow(-s.distanceX, .8) : l += s.distanceX), s.sliderLastPos = {
                top: "x" == c ? 0 : s.sliderStartPos.top + s.distanceY,
                left: l
            }, s.requestId && (i(s.requestId), s.requestId = null), s.requestId = o(function () {
                s.sliderLastPos && (n.each(s.instance.slides, function (t, e) {
                    var o = e.pos - s.instance.currPos;
                    n.fancybox.setTranslate(e.$slide, {
                        top: s.sliderLastPos.top,
                        left: s.sliderLastPos.left + o * s.canvasWidth + o * e.opts.gutter
                    });
                }), s.$container.addClass("fancybox-is-sliding"));
            });
            else if (Math.abs(s.distance) > 10) {
                if (s.canTap = !1, r.group.length < 2 && s.opts.vertical ? s.isSwiping = "y" : r.isDragging || !1 === s.opts.vertical || "auto" === s.opts.vertical && n(t).width() > 800 ? s.isSwiping = "x" : (a = Math.abs(180 * Math.atan2(s.distanceY, s.distanceX) / Math.PI), s.isSwiping = a > 45 && a < 135 ? "y" : "x"), "y" === s.isSwiping && n.fancybox.isMobile && s.isScrollable) return void (s.isScrolling = !0);
                r.isDragging = s.isSwiping, s.startPoints = s.newPoints, n.each(r.slides, function (t, e) {
                    var o, i;
                    n.fancybox.stop(e.$slide), o = n.fancybox.getTranslate(e.$slide), i = n.fancybox.getTranslate(r.$refs.stage), e.$slide.css({
                        transform: "",
                        opacity: "",
                        "transition-duration": ""
                    }).removeClass("fancybox-animated").removeClass(function (t, e) {
                        return (e.match(/(^|\s)fancybox-fx-\S+/g) || []).join(" ");
                    }), e.pos === r.current.pos && (s.sliderStartPos.top = o.top - i.top, s.sliderStartPos.left = o.left - i.left), n.fancybox.setTranslate(e.$slide, {
                        top: o.top - i.top,
                        left: o.left - i.left
                    });
                }), r.SlideShow && r.SlideShow.isActive && r.SlideShow.stop();
            }
        }, d.prototype.onPan = function () {
            var t = this;
            if (s(t.newPoints[0], t.realPoints[0]) < (n.fancybox.isMobile ? 10 : 5)) return void (t.startPoints = t.newPoints);
            t.canTap = !1, t.contentLastPos = t.limitMovement(), t.requestId && i(t.requestId), t.requestId = o(function () {
                n.fancybox.setTranslate(t.$content, t.contentLastPos);
            });
        }, d.prototype.limitMovement = function () {
            var t,
                e,
                n,
                o,
                i,
                a,
                s = this,
                r = s.canvasWidth,
                c = s.canvasHeight,
                l = s.distanceX,
                d = s.distanceY,
                u = s.contentStartPos,
                f = u.left,
                p = u.top,
                h = u.width,
                g = u.height;
            return i = h > r ? f + l : f, a = p + d, t = Math.max(0, .5 * r - .5 * h), e = Math.max(0, .5 * c - .5 * g), n = Math.min(r - h, .5 * r - .5 * h), o = Math.min(c - g, .5 * c - .5 * g), l > 0 && i > t && (i = t - 1 + Math.pow(-t + f + l, .8) || 0), l < 0 && i < n && (i = n + 1 - Math.pow(n - f - l, .8) || 0), d > 0 && a > e && (a = e - 1 + Math.pow(-e + p + d, .8) || 0), d < 0 && a < o && (a = o + 1 - Math.pow(o - p - d, .8) || 0), {
                top: a,
                left: i
            };
        }, d.prototype.limitPosition = function (t, e, n, o) {
            var i = this,
                a = i.canvasWidth,
                s = i.canvasHeight;
            return n > a ? (t = t > 0 ? 0 : t, t = t < a - n ? a - n : t) : t = Math.max(0, a / 2 - n / 2), o > s ? (e = e > 0 ? 0 : e, e = e < s - o ? s - o : e) : e = Math.max(0, s / 2 - o / 2), {
                top: e,
                left: t
            };
        }, d.prototype.onZoom = function () {
            var e = this,
                a = e.contentStartPos,
                r = a.width,
                c = a.height,
                l = a.left,
                d = a.top,
                u = s(e.newPoints[0], e.newPoints[1]),
                f = u / e.startDistanceBetweenFingers,
                p = Math.floor(r * f),
                h = Math.floor(c * f),
                g = (r - p) * e.percentageOfImageAtPinchPointX,
                b = (c - h) * e.percentageOfImageAtPinchPointY,
                m = (e.newPoints[0].x + e.newPoints[1].x) / 2 - n(t).scrollLeft(),
                v = (e.newPoints[0].y + e.newPoints[1].y) / 2 - n(t).scrollTop(),
                y = m - e.centerPointStartX,
                x = v - e.centerPointStartY,
                w = l + (g + y),
                $ = d + (b + x),
                S = {
                    top: $,
                    left: w,
                    scaleX: f,
                    scaleY: f
                };
            e.canTap = !1, e.newWidth = p, e.newHeight = h, e.contentLastPos = S, e.requestId && i(e.requestId), e.requestId = o(function () {
                n.fancybox.setTranslate(e.$content, e.contentLastPos);
            });
        }, d.prototype.ontouchend = function (t) {
            var o = this,
                s = o.isSwiping,
                r = o.isPanning,
                c = o.isZooming,
                l = o.isScrolling;
            if (o.endPoints = a(t), o.dMs = Math.max(new Date().getTime() - o.startTime, 1), o.$container.removeClass("fancybox-is-grabbing"), n(e).off(".fb.touch"), e.removeEventListener("scroll", o.onscroll, !0), o.requestId && (i(o.requestId), o.requestId = null), o.isSwiping = !1, o.isPanning = !1, o.isZooming = !1, o.isScrolling = !1, o.instance.isDragging = !1, o.canTap) return o.onTap(t);
            o.speed = 100, o.velocityX = o.distanceX / o.dMs * .5, o.velocityY = o.distanceY / o.dMs * .5, r ? o.endPanning() : c ? o.endZooming() : o.endSwiping(s, l);
        }, d.prototype.endSwiping = function (t, e) {
            var o = this,
                i = !1,
                a = o.instance.group.length,
                s = Math.abs(o.distanceX),
                r = "x" == t && a > 1 && (o.dMs > 130 && s > 10 || s > 50);
            o.sliderLastPos = null, "y" == t && !e && Math.abs(o.distanceY) > 50 ? (n.fancybox.animate(o.instance.current.$slide, {
                top: o.sliderStartPos.top + o.distanceY + 150 * o.velocityY,
                opacity: 0
            }, 200), i = o.instance.close(!0, 250)) : r && o.distanceX > 0 ? i = o.instance.previous(300) : r && o.distanceX < 0 && (i = o.instance.next(300)), !1 !== i || "x" != t && "y" != t || o.instance.centerSlide(200), o.$container.removeClass("fancybox-is-sliding");
        }, d.prototype.endPanning = function () {
            var t,
                e,
                o,
                i = this;
            i.contentLastPos && (!1 === i.opts.momentum || i.dMs > 350 ? (t = i.contentLastPos.left, e = i.contentLastPos.top) : (t = i.contentLastPos.left + 500 * i.velocityX, e = i.contentLastPos.top + 500 * i.velocityY), o = i.limitPosition(t, e, i.contentStartPos.width, i.contentStartPos.height), o.width = i.contentStartPos.width, o.height = i.contentStartPos.height, n.fancybox.animate(i.$content, o, 366));
        }, d.prototype.endZooming = function () {
            var t,
                e,
                o,
                i,
                a = this,
                s = a.instance.current,
                r = a.newWidth,
                c = a.newHeight;
            a.contentLastPos && (t = a.contentLastPos.left, e = a.contentLastPos.top, i = {
                top: e,
                left: t,
                width: r,
                height: c,
                scaleX: 1,
                scaleY: 1
            }, n.fancybox.setTranslate(a.$content, i), r < a.canvasWidth && c < a.canvasHeight ? a.instance.scaleToFit(150) : r > s.width || c > s.height ? a.instance.scaleToActual(a.centerPointStartX, a.centerPointStartY, 150) : (o = a.limitPosition(t, e, r, c), n.fancybox.animate(a.$content, o, 150)));
        }, d.prototype.onTap = function (e) {
            var o,
                i = this,
                s = n(e.target),
                r = i.instance,
                c = r.current,
                l = e && a(e) || i.startPoints,
                d = l[0] ? l[0].x - n(t).scrollLeft() - i.stagePos.left : 0,
                u = l[0] ? l[0].y - n(t).scrollTop() - i.stagePos.top : 0,
                f = function f(t) {
                    var o = c.opts[t];
                    if (n.isFunction(o) && (o = o.apply(r, [c, e])), o) switch (o) {
                        case "close":
                            r.close(i.startEvent);
                            break;

                        case "toggleControls":
                            r.toggleControls();
                            break;

                        case "next":
                            r.next();
                            break;

                        case "nextOrClose":
                            r.group.length > 1 ? r.next() : r.close(i.startEvent);
                            break;

                        case "zoom":
                            "image" == c.type && (c.isLoaded || c.$ghost) && (r.canPan() ? r.scaleToFit() : r.isScaledDown() ? r.scaleToActual(d, u) : r.group.length < 2 && r.close(i.startEvent));
                    }
                };

            if ((!e.originalEvent || 2 != e.originalEvent.button) && (s.is("img") || !(d > s[0].clientWidth + s.offset().left))) {
                if (s.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container")) o = "Outside";
                else if (s.is(".fancybox-slide")) o = "Slide";
                else {
                    if (!r.current.$content || !r.current.$content.find(s).addBack().filter(s).length) return;
                    o = "Content";
                }

                if (i.tapped) {
                    if (clearTimeout(i.tapped), i.tapped = null, Math.abs(d - i.tapX) > 50 || Math.abs(u - i.tapY) > 50) return this;
                    f("dblclick" + o);
                } else i.tapX = d, i.tapY = u, c.opts["dblclick" + o] && c.opts["dblclick" + o] !== c.opts["click" + o] ? i.tapped = setTimeout(function () {
                    i.tapped = null, r.isAnimating || f("click" + o);
                }, 500) : f("click" + o);

                return this;
            }
        }, n(e).on("onActivate.fb", function (t, e) {
            e && !e.Guestures && (e.Guestures = new d(e));
        }).on("beforeClose.fb", function (t, e) {
            e && e.Guestures && e.Guestures.destroy();
        });
    }(window, document, jQuery),
    function (t, e) {
        "use strict";

        e.extend(!0, e.fancybox.defaults, {
            btnTpl: {
                slideShow: '<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'
            },
            slideShow: {
                autoStart: !1,
                speed: 3e3,
                progress: !0
            }
        });

        var n = function n(t) {
            this.instance = t, this.init();
        };

        e.extend(n.prototype, {
            timer: null,
            isActive: !1,
            $button: null,
            init: function init() {
                var t = this,
                    n = t.instance,
                    o = n.group[n.currIndex].opts.slideShow;
                t.$button = n.$refs.toolbar.find("[data-fancybox-play]").on("click", function () {
                    t.toggle();
                }), n.group.length < 2 || !o ? t.$button.hide() : o.progress && (t.$progress = e('<div class="fancybox-progress"></div>').appendTo(n.$refs.inner));
            },
            set: function set(t) {
                var n = this,
                    o = n.instance,
                    i = o.current;
                i && (!0 === t || i.opts.loop || o.currIndex < o.group.length - 1) ? n.isActive && "video" !== i.contentType && (n.$progress && e.fancybox.animate(n.$progress.show(), {
                    scaleX: 1
                }, i.opts.slideShow.speed), n.timer = setTimeout(function () {
                    o.current.opts.loop || o.current.index != o.group.length - 1 ? o.next() : o.jumpTo(0);
                }, i.opts.slideShow.speed)) : (n.stop(), o.idleSecondsCounter = 0, o.showControls());
            },
            clear: function clear() {
                var t = this;
                clearTimeout(t.timer), t.timer = null, t.$progress && t.$progress.removeAttr("style").hide();
            },
            start: function start() {
                var t = this,
                    e = t.instance.current;
                e && (t.$button.attr("title", (e.opts.i18n[e.opts.lang] || e.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"), t.isActive = !0, e.isComplete && t.set(!0), t.instance.trigger("onSlideShowChange", !0));
            },
            stop: function stop() {
                var t = this,
                    e = t.instance.current;
                t.clear(), t.$button.attr("title", (e.opts.i18n[e.opts.lang] || e.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"), t.isActive = !1, t.instance.trigger("onSlideShowChange", !1), t.$progress && t.$progress.removeAttr("style").hide();
            },
            toggle: function toggle() {
                var t = this;
                t.isActive ? t.stop() : t.start();
            }
        }), e(t).on({
            "onInit.fb": function onInitFb(t, e) {
                e && !e.SlideShow && (e.SlideShow = new n(e));
            },
            "beforeShow.fb": function beforeShowFb(t, e, n, o) {
                var i = e && e.SlideShow;
                o ? i && n.opts.slideShow.autoStart && i.start() : i && i.isActive && i.clear();
            },
            "afterShow.fb": function afterShowFb(t, e, n) {
                var o = e && e.SlideShow;
                o && o.isActive && o.set();
            },
            "afterKeydown.fb": function afterKeydownFb(n, o, i, a, s) {
                var r = o && o.SlideShow;
                !r || !i.opts.slideShow || 80 !== s && 32 !== s || e(t.activeElement).is("button,a,input") || (a.preventDefault(), r.toggle());
            },
            "beforeClose.fb onDeactivate.fb": function beforeCloseFbOnDeactivateFb(t, e) {
                var n = e && e.SlideShow;
                n && n.stop();
            }
        }), e(t).on("visibilitychange", function () {
            var n = e.fancybox.getInstance(),
                o = n && n.SlideShow;
            o && o.isActive && (t.hidden ? o.clear() : o.set());
        });
    }(document, jQuery),
    function (t, e) {
        "use strict";

        var n = function () {
            for (var e = [
                ["requestFullscreen", "exitFullscreen", "fullscreenElement", "fullscreenEnabled", "fullscreenchange", "fullscreenerror"],
                ["webkitRequestFullscreen", "webkitExitFullscreen", "webkitFullscreenElement", "webkitFullscreenEnabled", "webkitfullscreenchange", "webkitfullscreenerror"],
                ["webkitRequestFullScreen", "webkitCancelFullScreen", "webkitCurrentFullScreenElement", "webkitCancelFullScreen", "webkitfullscreenchange", "webkitfullscreenerror"],
                ["mozRequestFullScreen", "mozCancelFullScreen", "mozFullScreenElement", "mozFullScreenEnabled", "mozfullscreenchange", "mozfullscreenerror"],
                ["msRequestFullscreen", "msExitFullscreen", "msFullscreenElement", "msFullscreenEnabled", "MSFullscreenChange", "MSFullscreenError"]
            ], n = {}, o = 0; o < e.length; o++) {
                var i = e[o];

                if (i && i[1] in t) {
                    for (var a = 0; a < i.length; a++) {
                        n[e[0][a]] = i[a];
                    }

                    return n;
                }
            }

            return !1;
        }();

        if (n) {
            var o = {
                request: function request(e) {
                    e = e || t.documentElement, e[n.requestFullscreen](e.ALLOW_KEYBOARD_INPUT);
                },
                exit: function exit() {
                    t[n.exitFullscreen]();
                },
                toggle: function toggle(e) {
                    e = e || t.documentElement, this.isFullscreen() ? this.exit() : this.request(e);
                },
                isFullscreen: function isFullscreen() {
                    return Boolean(t[n.fullscreenElement]);
                },
                enabled: function enabled() {
                    return Boolean(t[n.fullscreenEnabled]);
                }
            };
            e.extend(!0, e.fancybox.defaults, {
                btnTpl: {
                    fullScreen: '<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'
                },
                fullScreen: {
                    autoStart: !1
                }
            }), e(t).on(n.fullscreenchange, function () {
                var t = o.isFullscreen(),
                    n = e.fancybox.getInstance();
                n && (n.current && "image" === n.current.type && n.isAnimating && (n.isAnimating = !1, n.update(!0, !0, 0), n.isComplete || n.complete()), n.trigger("onFullscreenChange", t), n.$refs.container.toggleClass("fancybox-is-fullscreen", t), n.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter", !t).toggleClass("fancybox-button--fsexit", t));
            });
        }

        e(t).on({
            "onInit.fb": function onInitFb(t, e) {
                var i;
                if (!n) return void e.$refs.toolbar.find("[data-fancybox-fullscreen]").remove();
                e && e.group[e.currIndex].opts.fullScreen ? (i = e.$refs.container, i.on("click.fb-fullscreen", "[data-fancybox-fullscreen]", function (t) {
                    t.stopPropagation(), t.preventDefault(), o.toggle();
                }), e.opts.fullScreen && !0 === e.opts.fullScreen.autoStart && o.request(), e.FullScreen = o) : e && e.$refs.toolbar.find("[data-fancybox-fullscreen]").hide();
            },
            "afterKeydown.fb": function afterKeydownFb(t, e, n, o, i) {
                e && e.FullScreen && 70 === i && (o.preventDefault(), e.FullScreen.toggle());
            },
            "beforeClose.fb": function beforeCloseFb(t, e) {
                e && e.FullScreen && e.$refs.container.hasClass("fancybox-is-fullscreen") && o.exit();
            }
        });
    }(document, jQuery),
    function (t, e) {
        "use strict";

        var n = "fancybox-thumbs";
        e.fancybox.defaults = e.extend(!0, {
            btnTpl: {
                thumbs: '<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'
            },
            thumbs: {
                autoStart: !1,
                hideOnClose: !0,
                parentEl: ".fancybox-container",
                axis: "y"
            }
        }, e.fancybox.defaults);

        var o = function o(t) {
            this.init(t);
        };

        e.extend(o.prototype, {
            $button: null,
            $grid: null,
            $list: null,
            isVisible: !1,
            isActive: !1,
            init: function init(t) {
                var e = this,
                    n = t.group,
                    o = 0;
                e.instance = t, e.opts = n[t.currIndex].opts.thumbs, t.Thumbs = e, e.$button = t.$refs.toolbar.find("[data-fancybox-thumbs]");

                for (var i = 0, a = n.length; i < a && (n[i].thumb && o++, !(o > 1)); i++) {
                    ;
                }

                o > 1 && e.opts ? (e.$button.removeAttr("style").on("click", function () {
                    e.toggle();
                }), e.isActive = !0) : e.$button.hide();
            },
            create: function create() {
                var t,
                    o = this,
                    i = o.instance,
                    a = o.opts.parentEl,
                    s = [];
                o.$grid || (o.$grid = e('<div class="' + n + " " + n + "-" + o.opts.axis + '"></div>').appendTo(i.$refs.container.find(a).addBack().filter(a)), o.$grid.on("click", "a", function () {
                    i.jumpTo(e(this).attr("data-index"));
                })), o.$list || (o.$list = e('<div class="' + n + '__list">').appendTo(o.$grid)), e.each(i.group, function (e, n) {
                    t = n.thumb, t || "image" !== n.type || (t = n.src), s.push('<a href="javascript:;" tabindex="0" data-index="' + e + '"' + (t && t.length ? ' style="background-image:url(' + t + ')"' : 'class="fancybox-thumbs-missing"') + "></a>");
                }), o.$list[0].innerHTML = s.join(""), "x" === o.opts.axis && o.$list.width(parseInt(o.$grid.css("padding-right"), 10) + i.group.length * o.$list.children().eq(0).outerWidth(!0));
            },
            focus: function focus(t) {
                var e,
                    n,
                    o = this,
                    i = o.$list,
                    a = o.$grid;
                o.instance.current && (e = i.children().removeClass("fancybox-thumbs-active").filter('[data-index="' + o.instance.current.index + '"]').addClass("fancybox-thumbs-active"), n = e.position(), "y" === o.opts.axis && (n.top < 0 || n.top > i.height() - e.outerHeight()) ? i.stop().animate({
                    scrollTop: i.scrollTop() + n.top
                }, t) : "x" === o.opts.axis && (n.left < a.scrollLeft() || n.left > a.scrollLeft() + (a.width() - e.outerWidth())) && i.parent().stop().animate({
                    scrollLeft: n.left
                }, t));
            },
            update: function update() {
                var t = this;
                t.instance.$refs.container.toggleClass("fancybox-show-thumbs", this.isVisible), t.isVisible ? (t.$grid || t.create(), t.instance.trigger("onThumbsShow"), t.focus(0)) : t.$grid && t.instance.trigger("onThumbsHide"), t.instance.update();
            },
            hide: function hide() {
                this.isVisible = !1, this.update();
            },
            show: function show() {
                this.isVisible = !0, this.update();
            },
            toggle: function toggle() {
                this.isVisible = !this.isVisible, this.update();
            }
        }), e(t).on({
            "onInit.fb": function onInitFb(t, e) {
                var n;
                e && !e.Thumbs && (n = new o(e), n.isActive && !0 === n.opts.autoStart && n.show());
            },
            "beforeShow.fb": function beforeShowFb(t, e, n, o) {
                var i = e && e.Thumbs;
                i && i.isVisible && i.focus(o ? 0 : 250);
            },
            "afterKeydown.fb": function afterKeydownFb(t, e, n, o, i) {
                var a = e && e.Thumbs;
                a && a.isActive && 71 === i && (o.preventDefault(), a.toggle());
            },
            "beforeClose.fb": function beforeCloseFb(t, e) {
                var n = e && e.Thumbs;
                n && n.isVisible && !1 !== n.opts.hideOnClose && n.$grid.hide();
            }
        });
    }(document, jQuery),
    function (t, e) {
        "use strict";

        function n(t) {
            var e = {
                "&": "&amp;",
                "<": "&lt;",
                ">": "&gt;",
                '"': "&quot;",
                "'": "&#39;",
                "/": "&#x2F;",
                "`": "&#x60;",
                "=": "&#x3D;"
            };
            return String(t).replace(/[&<>"'`=\/]/g, function (t) {
                return e[t];
            });
        }

        e.extend(!0, e.fancybox.defaults, {
            btnTpl: {
                share: '<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'
            },
            share: {
                url: function url(t, e) {
                    return !t.currentHash && "inline" !== e.type && "html" !== e.type && (e.origSrc || e.src) || window.location;
                },
                tpl: '<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'
            }
        }), e(t).on("click", "[data-fancybox-share]", function () {
            var t,
                o,
                i = e.fancybox.getInstance(),
                a = i.current || null;
            a && ("function" === e.type(a.opts.share.url) && (t = a.opts.share.url.apply(a, [i, a])), o = a.opts.share.tpl.replace(/\{\{media\}\}/g, "image" === a.type ? encodeURIComponent(a.src) : "").replace(/\{\{url\}\}/g, encodeURIComponent(t)).replace(/\{\{url_raw\}\}/g, n(t)).replace(/\{\{descr\}\}/g, i.$caption ? encodeURIComponent(i.$caption.text()) : ""), e.fancybox.open({
                src: i.translate(i, o),
                type: "html",
                opts: {
                    touch: !1,
                    animationEffect: !1,
                    afterLoad: function afterLoad(t, e) {
                        i.$refs.container.one("beforeClose.fb", function () {
                            t.close(null, 0);
                        }), e.$content.find(".fancybox-share__button").click(function () {
                            return window.open(this.href, "Share", "width=550, height=450"), !1;
                        });
                    },
                    mobile: {
                        autoFocus: !1
                    }
                }
            }));
        });
    }(document, jQuery),
    function (t, e, n) {
        "use strict";

        function o() {
            var e = t.location.hash.substr(1),
                n = e.split("-"),
                o = n.length > 1 && /^\+?\d+$/.test(n[n.length - 1]) ? parseInt(n.pop(-1), 10) || 1 : 1,
                i = n.join("-");
            return {
                hash: e,
                index: o < 1 ? 1 : o,
                gallery: i
            };
        }

        function i(t) {
            "" !== t.gallery && n("[data-fancybox='" + n.escapeSelector(t.gallery) + "']").eq(t.index - 1).focus().trigger("click.fb-start");
        }

        function a(t) {
            var e, n;
            return !!t && (e = t.current ? t.current.opts : t.opts, "" !== (n = e.hash || (e.$orig ? e.$orig.data("fancybox") || e.$orig.data("fancybox-trigger") : "")) && n);
        }

        n.escapeSelector || (n.escapeSelector = function (t) {
            return (t + "").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g, function (t, e) {
                return e ? "\0" === t ? "�" : t.slice(0, -1) + "\\" + t.charCodeAt(t.length - 1).toString(16) + " " : "\\" + t;
            });
        }), n(function () {
            !1 !== n.fancybox.defaults.hash && (n(e).on({
                "onInit.fb": function onInitFb(t, e) {
                    var n, i;
                    !1 !== e.group[e.currIndex].opts.hash && (n = o(), (i = a(e)) && n.gallery && i == n.gallery && (e.currIndex = n.index - 1));
                },
                "beforeShow.fb": function beforeShowFb(n, o, i, s) {
                    var r;
                    i && !1 !== i.opts.hash && (r = a(o)) && (o.currentHash = r + (o.group.length > 1 ? "-" + (i.index + 1) : ""), t.location.hash !== "#" + o.currentHash && (s && !o.origHash && (o.origHash = t.location.hash), o.hashTimer && clearTimeout(o.hashTimer), o.hashTimer = setTimeout(function () {
                        "replaceState" in t.history ? (t.history[s ? "pushState" : "replaceState"]({}, e.title, t.location.pathname + t.location.search + "#" + o.currentHash), s && (o.hasCreatedHistory = !0)) : t.location.hash = o.currentHash, o.hashTimer = null;
                    }, 300)));
                },
                "beforeClose.fb": function beforeCloseFb(n, o, i) {
                    i && !1 !== i.opts.hash && (clearTimeout(o.hashTimer), o.currentHash && o.hasCreatedHistory ? t.history.back() : o.currentHash && ("replaceState" in t.history ? t.history.replaceState({}, e.title, t.location.pathname + t.location.search + (o.origHash || "")) : t.location.hash = o.origHash), o.currentHash = null);
                }
            }), n(t).on("hashchange.fb", function () {
                var t = o(),
                    e = null;
                n.each(n(".fancybox-container").get().reverse(), function (t, o) {
                    var i = n(o).data("FancyBox");
                    if (i && i.currentHash) return e = i, !1;
                }), e ? e.currentHash === t.gallery + "-" + t.index || 1 === t.index && e.currentHash == t.gallery || (e.currentHash = null, e.close()) : "" !== t.gallery && i(t);
            }), setTimeout(function () {
                n.fancybox.getInstance() || i(o());
            }, 50));
        });
    }(window, document, jQuery),
    function (t, e) {
        "use strict";

        var n = new Date().getTime();
        e(t).on({
            "onInit.fb": function onInitFb(t, e, o) {
                e.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll", function (t) {
                    var o = e.current,
                        i = new Date().getTime();
                    e.group.length < 2 || !1 === o.opts.wheel || "auto" === o.opts.wheel && "image" !== o.type || (t.preventDefault(), t.stopPropagation(), o.$slide.hasClass("fancybox-animated") || (t = t.originalEvent || t, i - n < 250 || (n = i, e[(-t.deltaY || -t.deltaX || t.wheelDelta || -t.detail) < 0 ? "next" : "previous"]())));
                });
            }
        });
    }(document, jQuery);
"use strict";

function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
            return typeof obj;
        };
    } else {
        _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
    }
    return _typeof(obj);
}

/*!
 * Masonry PACKAGED v4.2.2
 * Cascading grid layout library
 * https://masonry.desandro.com
 * MIT License
 * by David DeSandro
 */
!function (t, e) {
    "function" == typeof define && define.amd ? define("jquery-bridget/jquery-bridget", ["jquery"], function (i) {
        return e(t, i);
    }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e(t, require("jquery")) : t.jQueryBridget = e(t, t.jQuery);
}(window, function (t, e) {
    "use strict";

    function i(i, r, a) {
        function h(t, e, n) {
            var o,
                r = "$()." + i + '("' + e + '")';
            return t.each(function (t, h) {
                var u = a.data(h, i);
                if (!u) return void s(i + " not initialized. Cannot call methods, i.e. " + r);
                var d = u[e];
                if (!d || "_" == e.charAt(0)) return void s(r + " is not a valid method");
                var l = d.apply(u, n);
                o = void 0 === o ? l : o;
            }), void 0 !== o ? o : t;
        }

        function u(t, e) {
            t.each(function (t, n) {
                var o = a.data(n, i);
                o ? (o.option(e), o._init()) : (o = new r(n, e), a.data(n, i, o));
            });
        }

        a = a || e || t.jQuery, a && (r.prototype.option || (r.prototype.option = function (t) {
            a.isPlainObject(t) && (this.options = a.extend(!0, this.options, t));
        }), a.fn[i] = function (t) {
            if ("string" == typeof t) {
                var e = o.call(arguments, 1);
                return h(this, t, e);
            }

            return u(this, t), this;
        }, n(a));
    }

    function n(t) {
        !t || t && t.bridget || (t.bridget = i);
    }

    var o = Array.prototype.slice,
        r = t.console,
        s = "undefined" == typeof r ? function () {
        } : function (t) {
            r.error(t);
        };
    return n(e || t.jQuery), i;
}),
    function (t, e) {
        "function" == typeof define && define.amd ? define("ev-emitter/ev-emitter", e) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e() : t.EvEmitter = e();
    }("undefined" != typeof window ? window : void 0, function () {
        function t() {
        }

        var e = t.prototype;
        return e.on = function (t, e) {
            if (t && e) {
                var i = this._events = this._events || {},
                    n = i[t] = i[t] || [];
                return -1 == n.indexOf(e) && n.push(e), this;
            }
        }, e.once = function (t, e) {
            if (t && e) {
                this.on(t, e);
                var i = this._onceEvents = this._onceEvents || {},
                    n = i[t] = i[t] || {};
                return n[e] = !0, this;
            }
        }, e.off = function (t, e) {
            var i = this._events && this._events[t];

            if (i && i.length) {
                var n = i.indexOf(e);
                return -1 != n && i.splice(n, 1), this;
            }
        }, e.emitEvent = function (t, e) {
            var i = this._events && this._events[t];

            if (i && i.length) {
                i = i.slice(0), e = e || [];

                for (var n = this._onceEvents && this._onceEvents[t], o = 0; o < i.length; o++) {
                    var r = i[o],
                        s = n && n[r];
                    s && (this.off(t, r), delete n[r]), r.apply(this, e);
                }

                return this;
            }
        }, e.allOff = function () {
            delete this._events, delete this._onceEvents;
        }, t;
    }),
    function (t, e) {
        "function" == typeof define && define.amd ? define("get-size/get-size", e) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e() : t.getSize = e();
    }(window, function () {
        "use strict";

        function t(t) {
            var e = parseFloat(t),
                i = -1 == t.indexOf("%") && !isNaN(e);
            return i && e;
        }

        function e() {
        }

        function i() {
            for (var t = {
                width: 0,
                height: 0,
                innerWidth: 0,
                innerHeight: 0,
                outerWidth: 0,
                outerHeight: 0
            }, e = 0; u > e; e++) {
                var i = h[e];
                t[i] = 0;
            }

            return t;
        }

        function n(t) {
            var e = getComputedStyle(t);
            return e || a("Style returned " + e + ". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"), e;
        }

        function o() {
            if (!d) {
                d = !0;
                var e = document.createElement("div");
                e.style.width = "200px", e.style.padding = "1px 2px 3px 4px", e.style.borderStyle = "solid", e.style.borderWidth = "1px 2px 3px 4px", e.style.boxSizing = "border-box";
                var i = document.body || document.documentElement;
                i.appendChild(e);
                var o = n(e);
                s = 200 == Math.round(t(o.width)), r.isBoxSizeOuter = s, i.removeChild(e);
            }
        }

        function r(e) {
            if (o(), "string" == typeof e && (e = document.querySelector(e)), e && "object" == _typeof(e) && e.nodeType) {
                var r = n(e);
                if ("none" == r.display) return i();
                var a = {};
                a.width = e.offsetWidth, a.height = e.offsetHeight;

                for (var d = a.isBorderBox = "border-box" == r.boxSizing, l = 0; u > l; l++) {
                    var c = h[l],
                        f = r[c],
                        m = parseFloat(f);
                    a[c] = isNaN(m) ? 0 : m;
                }

                var p = a.paddingLeft + a.paddingRight,
                    g = a.paddingTop + a.paddingBottom,
                    y = a.marginLeft + a.marginRight,
                    v = a.marginTop + a.marginBottom,
                    _ = a.borderLeftWidth + a.borderRightWidth,
                    z = a.borderTopWidth + a.borderBottomWidth,
                    E = d && s,
                    b = t(r.width);

                b !== !1 && (a.width = b + (E ? 0 : p + _));
                var x = t(r.height);
                return x !== !1 && (a.height = x + (E ? 0 : g + z)), a.innerWidth = a.width - (p + _), a.innerHeight = a.height - (g + z), a.outerWidth = a.width + y, a.outerHeight = a.height + v, a;
            }
        }

        var s,
            a = "undefined" == typeof console ? e : function (t) {
                console.error(t);
            },
            h = ["paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "marginLeft", "marginRight", "marginTop", "marginBottom", "borderLeftWidth", "borderRightWidth", "borderTopWidth", "borderBottomWidth"],
            u = h.length,
            d = !1;
        return r;
    }),
    function (t, e) {
        "use strict";

        "function" == typeof define && define.amd ? define("desandro-matches-selector/matches-selector", e) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e() : t.matchesSelector = e();
    }(window, function () {
        "use strict";

        var t = function () {
            var t = window.Element.prototype;
            if (t.matches) return "matches";
            if (t.matchesSelector) return "matchesSelector";

            for (var e = ["webkit", "moz", "ms", "o"], i = 0; i < e.length; i++) {
                var n = e[i],
                    o = n + "MatchesSelector";
                if (t[o]) return o;
            }
        }();

        return function (e, i) {
            return e[t](i);
        };
    }),
    function (t, e) {
        "function" == typeof define && define.amd ? define("fizzy-ui-utils/utils", ["desandro-matches-selector/matches-selector"], function (i) {
            return e(t, i);
        }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e(t, require("desandro-matches-selector")) : t.fizzyUIUtils = e(t, t.matchesSelector);
    }(window, function (t, e) {
        var i = {};
        i.extend = function (t, e) {
            for (var i in e) {
                t[i] = e[i];
            }

            return t;
        }, i.modulo = function (t, e) {
            return (t % e + e) % e;
        };
        var n = Array.prototype.slice;
        i.makeArray = function (t) {
            if (Array.isArray(t)) return t;
            if (null === t || void 0 === t) return [];
            var e = "object" == _typeof(t) && "number" == typeof t.length;
            return e ? n.call(t) : [t];
        }, i.removeFrom = function (t, e) {
            var i = t.indexOf(e);
            -
                1 != i && t.splice(i, 1);
        }, i.getParent = function (t, i) {
            for (; t.parentNode && t != document.body;) {
                if (t = t.parentNode, e(t, i)) return t;
            }
        }, i.getQueryElement = function (t) {
            return "string" == typeof t ? document.querySelector(t) : t;
        }, i.handleEvent = function (t) {
            var e = "on" + t.type;
            this[e] && this[e](t);
        }, i.filterFindElements = function (t, n) {
            t = i.makeArray(t);
            var o = [];
            return t.forEach(function (t) {
                if (t instanceof HTMLElement) {
                    if (!n) return void o.push(t);
                    e(t, n) && o.push(t);

                    for (var i = t.querySelectorAll(n), r = 0; r < i.length; r++) {
                        o.push(i[r]);
                    }
                }
            }), o;
        }, i.debounceMethod = function (t, e, i) {
            i = i || 100;
            var n = t.prototype[e],
                o = e + "Timeout";

            t.prototype[e] = function () {
                var t = this[o];
                clearTimeout(t);
                var e = arguments,
                    r = this;
                this[o] = setTimeout(function () {
                    n.apply(r, e), delete r[o];
                }, i);
            };
        }, i.docReady = function (t) {
            var e = document.readyState;
            "complete" == e || "interactive" == e ? setTimeout(t) : document.addEventListener("DOMContentLoaded", t);
        }, i.toDashed = function (t) {
            return t.replace(/(.)([A-Z])/g, function (t, e, i) {
                return e + "-" + i;
            }).toLowerCase();
        };
        var o = t.console;
        return i.htmlInit = function (e, n) {
            i.docReady(function () {
                var r = i.toDashed(n),
                    s = "data-" + r,
                    a = document.querySelectorAll("[" + s + "]"),
                    h = document.querySelectorAll(".js-" + r),
                    u = i.makeArray(a).concat(i.makeArray(h)),
                    d = s + "-options",
                    l = t.jQuery;
                u.forEach(function (t) {
                    var i,
                        r = t.getAttribute(s) || t.getAttribute(d);

                    try {
                        i = r && JSON.parse(r);
                    } catch (a) {
                        return void (o && o.error("Error parsing " + s + " on " + t.className + ": " + a));
                    }

                    var h = new e(t, i);
                    l && l.data(t, n, h);
                });
            });
        }, i;
    }),
    function (t, e) {
        "function" == typeof define && define.amd ? define("outlayer/item", ["ev-emitter/ev-emitter", "get-size/get-size"], e) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e(require("ev-emitter"), require("get-size")) : (t.Outlayer = {}, t.Outlayer.Item = e(t.EvEmitter, t.getSize));
    }(window, function (t, e) {
        "use strict";

        function i(t) {
            for (var e in t) {
                return !1;
            }

            return e = null, !0;
        }

        function n(t, e) {
            t && (this.element = t, this.layout = e, this.position = {
                x: 0,
                y: 0
            }, this._create());
        }

        function o(t) {
            return t.replace(/([A-Z])/g, function (t) {
                return "-" + t.toLowerCase();
            });
        }

        var r = document.documentElement.style,
            s = "string" == typeof r.transition ? "transition" : "WebkitTransition",
            a = "string" == typeof r.transform ? "transform" : "WebkitTransform",
            h = {
                WebkitTransition: "webkitTransitionEnd",
                transition: "transitionend"
            }[s],
            u = {
                transform: a,
                transition: s,
                transitionDuration: s + "Duration",
                transitionProperty: s + "Property",
                transitionDelay: s + "Delay"
            },
            d = n.prototype = Object.create(t.prototype);
        d.constructor = n, d._create = function () {
            this._transn = {
                ingProperties: {},
                clean: {},
                onEnd: {}
            }, this.css({
                position: "absolute"
            });
        }, d.handleEvent = function (t) {
            var e = "on" + t.type;
            this[e] && this[e](t);
        }, d.getSize = function () {
            this.size = e(this.element);
        }, d.css = function (t) {
            var e = this.element.style;

            for (var i in t) {
                var n = u[i] || i;
                e[n] = t[i];
            }
        }, d.getPosition = function () {
            var t = getComputedStyle(this.element),
                e = this.layout._getOption("originLeft"),
                i = this.layout._getOption("originTop"),
                n = t[e ? "left" : "right"],
                o = t[i ? "top" : "bottom"],
                r = parseFloat(n),
                s = parseFloat(o),
                a = this.layout.size;

            -
                1 != n.indexOf("%") && (r = r / 100 * a.width), -1 != o.indexOf("%") && (s = s / 100 * a.height), r = isNaN(r) ? 0 : r, s = isNaN(s) ? 0 : s, r -= e ? a.paddingLeft : a.paddingRight, s -= i ? a.paddingTop : a.paddingBottom, this.position.x = r, this.position.y = s;
        }, d.layoutPosition = function () {
            var t = this.layout.size,
                e = {},
                i = this.layout._getOption("originLeft"),
                n = this.layout._getOption("originTop"),
                o = i ? "paddingLeft" : "paddingRight",
                r = i ? "left" : "right",
                s = i ? "right" : "left",
                a = this.position.x + t[o];

            e[r] = this.getXValue(a), e[s] = "";
            var h = n ? "paddingTop" : "paddingBottom",
                u = n ? "top" : "bottom",
                d = n ? "bottom" : "top",
                l = this.position.y + t[h];
            e[u] = this.getYValue(l), e[d] = "", this.css(e), this.emitEvent("layout", [this]);
        }, d.getXValue = function (t) {
            var e = this.layout._getOption("horizontal");

            return this.layout.options.percentPosition && !e ? t / this.layout.size.width * 100 + "%" : t + "px";
        }, d.getYValue = function (t) {
            var e = this.layout._getOption("horizontal");

            return this.layout.options.percentPosition && e ? t / this.layout.size.height * 100 + "%" : t + "px";
        }, d._transitionTo = function (t, e) {
            this.getPosition();
            var i = this.position.x,
                n = this.position.y,
                o = t == this.position.x && e == this.position.y;
            if (this.setPosition(t, e), o && !this.isTransitioning) return void this.layoutPosition();
            var r = t - i,
                s = e - n,
                a = {};
            a.transform = this.getTranslate(r, s), this.transition({
                to: a,
                onTransitionEnd: {
                    transform: this.layoutPosition
                },
                isCleaning: !0
            });
        }, d.getTranslate = function (t, e) {
            var i = this.layout._getOption("originLeft"),
                n = this.layout._getOption("originTop");

            return t = i ? t : -t, e = n ? e : -e, "translate3d(" + t + "px, " + e + "px, 0)";
        }, d.goTo = function (t, e) {
            this.setPosition(t, e), this.layoutPosition();
        }, d.moveTo = d._transitionTo, d.setPosition = function (t, e) {
            this.position.x = parseFloat(t), this.position.y = parseFloat(e);
        }, d._nonTransition = function (t) {
            this.css(t.to), t.isCleaning && this._removeStyles(t.to);

            for (var e in t.onTransitionEnd) {
                t.onTransitionEnd[e].call(this);
            }
        }, d.transition = function (t) {
            if (!parseFloat(this.layout.options.transitionDuration)) return void this._nonTransition(t);
            var e = this._transn;

            for (var i in t.onTransitionEnd) {
                e.onEnd[i] = t.onTransitionEnd[i];
            }

            for (i in t.to) {
                e.ingProperties[i] = !0, t.isCleaning && (e.clean[i] = !0);
            }

            if (t.from) {
                this.css(t.from);
                var n = this.element.offsetHeight;
                n = null;
            }

            this.enableTransition(t.to), this.css(t.to), this.isTransitioning = !0;
        };
        var l = "opacity," + o(a);
        d.enableTransition = function () {
            if (!this.isTransitioning) {
                var t = this.layout.options.transitionDuration;
                t = "number" == typeof t ? t + "ms" : t, this.css({
                    transitionProperty: l,
                    transitionDuration: t,
                    transitionDelay: this.staggerDelay || 0
                }), this.element.addEventListener(h, this, !1);
            }
        }, d.onwebkitTransitionEnd = function (t) {
            this.ontransitionend(t);
        }, d.onotransitionend = function (t) {
            this.ontransitionend(t);
        };
        var c = {
            "-webkit-transform": "transform"
        };
        d.ontransitionend = function (t) {
            if (t.target === this.element) {
                var e = this._transn,
                    n = c[t.propertyName] || t.propertyName;

                if (delete e.ingProperties[n], i(e.ingProperties) && this.disableTransition(), n in e.clean && (this.element.style[t.propertyName] = "", delete e.clean[n]), n in e.onEnd) {
                    var o = e.onEnd[n];
                    o.call(this), delete e.onEnd[n];
                }

                this.emitEvent("transitionEnd", [this]);
            }
        }, d.disableTransition = function () {
            this.removeTransitionStyles(), this.element.removeEventListener(h, this, !1), this.isTransitioning = !1;
        }, d._removeStyles = function (t) {
            var e = {};

            for (var i in t) {
                e[i] = "";
            }

            this.css(e);
        };
        var f = {
            transitionProperty: "",
            transitionDuration: "",
            transitionDelay: ""
        };
        return d.removeTransitionStyles = function () {
            this.css(f);
        }, d.stagger = function (t) {
            t = isNaN(t) ? 0 : t, this.staggerDelay = t + "ms";
        }, d.removeElem = function () {
            this.element.parentNode.removeChild(this.element), this.css({
                display: ""
            }), this.emitEvent("remove", [this]);
        }, d.remove = function () {
            return s && parseFloat(this.layout.options.transitionDuration) ? (this.once("transitionEnd", function () {
                this.removeElem();
            }), void this.hide()) : void this.removeElem();
        }, d.reveal = function () {
            delete this.isHidden, this.css({
                display: ""
            });
            var t = this.layout.options,
                e = {},
                i = this.getHideRevealTransitionEndProperty("visibleStyle");
            e[i] = this.onRevealTransitionEnd, this.transition({
                from: t.hiddenStyle,
                to: t.visibleStyle,
                isCleaning: !0,
                onTransitionEnd: e
            });
        }, d.onRevealTransitionEnd = function () {
            this.isHidden || this.emitEvent("reveal");
        }, d.getHideRevealTransitionEndProperty = function (t) {
            var e = this.layout.options[t];
            if (e.opacity) return "opacity";

            for (var i in e) {
                return i;
            }
        }, d.hide = function () {
            this.isHidden = !0, this.css({
                display: ""
            });
            var t = this.layout.options,
                e = {},
                i = this.getHideRevealTransitionEndProperty("hiddenStyle");
            e[i] = this.onHideTransitionEnd, this.transition({
                from: t.visibleStyle,
                to: t.hiddenStyle,
                isCleaning: !0,
                onTransitionEnd: e
            });
        }, d.onHideTransitionEnd = function () {
            this.isHidden && (this.css({
                display: "none"
            }), this.emitEvent("hide"));
        }, d.destroy = function () {
            this.css({
                position: "",
                left: "",
                right: "",
                top: "",
                bottom: "",
                transition: "",
                transform: ""
            });
        }, n;
    }),
    function (t, e) {
        "use strict";

        "function" == typeof define && define.amd ? define("outlayer/outlayer", ["ev-emitter/ev-emitter", "get-size/get-size", "fizzy-ui-utils/utils", "./item"], function (i, n, o, r) {
            return e(t, i, n, o, r);
        }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e(t, require("ev-emitter"), require("get-size"), require("fizzy-ui-utils"), require("./item")) : t.Outlayer = e(t, t.EvEmitter, t.getSize, t.fizzyUIUtils, t.Outlayer.Item);
    }(window, function (t, e, i, n, o) {
        "use strict";

        function r(t, e) {
            var i = n.getQueryElement(t);
            if (!i) return void (h && h.error("Bad element for " + this.constructor.namespace + ": " + (i || t)));
            this.element = i, u && (this.$element = u(this.element)), this.options = n.extend({}, this.constructor.defaults), this.option(e);
            var o = ++l;
            this.element.outlayerGUID = o, c[o] = this, this._create();

            var r = this._getOption("initLayout");

            r && this.layout();
        }

        function s(t) {
            function e() {
                t.apply(this, arguments);
            }

            return e.prototype = Object.create(t.prototype), e.prototype.constructor = e, e;
        }

        function a(t) {
            if ("number" == typeof t) return t;
            var e = t.match(/(^\d*\.?\d*)(\w*)/),
                i = e && e[1],
                n = e && e[2];
            if (!i.length) return 0;
            i = parseFloat(i);
            var o = m[n] || 1;
            return i * o;
        }

        var h = t.console,
            u = t.jQuery,
            d = function d() {
            },
            l = 0,
            c = {};

        r.namespace = "outlayer", r.Item = o, r.defaults = {
            containerStyle: {
                position: "relative"
            },
            initLayout: !0,
            originLeft: !0,
            originTop: !0,
            resize: !0,
            resizeContainer: !0,
            transitionDuration: "0.4s",
            hiddenStyle: {
                opacity: 0,
                transform: "scale(0.001)"
            },
            visibleStyle: {
                opacity: 1,
                transform: "scale(1)"
            }
        };
        var f = r.prototype;
        n.extend(f, e.prototype), f.option = function (t) {
            n.extend(this.options, t);
        }, f._getOption = function (t) {
            var e = this.constructor.compatOptions[t];
            return e && void 0 !== this.options[e] ? this.options[e] : this.options[t];
        }, r.compatOptions = {
            initLayout: "isInitLayout",
            horizontal: "isHorizontal",
            layoutInstant: "isLayoutInstant",
            originLeft: "isOriginLeft",
            originTop: "isOriginTop",
            resize: "isResizeBound",
            resizeContainer: "isResizingContainer"
        }, f._create = function () {
            this.reloadItems(), this.stamps = [], this.stamp(this.options.stamp), n.extend(this.element.style, this.options.containerStyle);

            var t = this._getOption("resize");

            t && this.bindResize();
        }, f.reloadItems = function () {
            this.items = this._itemize(this.element.children);
        }, f._itemize = function (t) {
            for (var e = this._filterFindItemElements(t), i = this.constructor.Item, n = [], o = 0; o < e.length; o++) {
                var r = e[o],
                    s = new i(r, this);
                n.push(s);
            }

            return n;
        }, f._filterFindItemElements = function (t) {
            return n.filterFindElements(t, this.options.itemSelector);
        }, f.getItemElements = function () {
            return this.items.map(function (t) {
                return t.element;
            });
        }, f.layout = function () {
            this._resetLayout(), this._manageStamps();

            var t = this._getOption("layoutInstant"),
                e = void 0 !== t ? t : !this._isLayoutInited;

            this.layoutItems(this.items, e), this._isLayoutInited = !0;
        }, f._init = f.layout, f._resetLayout = function () {
            this.getSize();
        }, f.getSize = function () {
            this.size = i(this.element);
        }, f._getMeasurement = function (t, e) {
            var n,
                o = this.options[t];
            o ? ("string" == typeof o ? n = this.element.querySelector(o) : o instanceof HTMLElement && (n = o), this[t] = n ? i(n)[e] : o) : this[t] = 0;
        }, f.layoutItems = function (t, e) {
            t = this._getItemsForLayout(t), this._layoutItems(t, e), this._postLayout();
        }, f._getItemsForLayout = function (t) {
            return t.filter(function (t) {
                return !t.isIgnored;
            });
        }, f._layoutItems = function (t, e) {
            if (this._emitCompleteOnItems("layout", t), t && t.length) {
                var i = [];
                t.forEach(function (t) {
                    var n = this._getItemLayoutPosition(t);

                    n.item = t, n.isInstant = e || t.isLayoutInstant, i.push(n);
                }, this), this._processLayoutQueue(i);
            }
        }, f._getItemLayoutPosition = function () {
            return {
                x: 0,
                y: 0
            };
        }, f._processLayoutQueue = function (t) {
            this.updateStagger(), t.forEach(function (t, e) {
                this._positionItem(t.item, t.x, t.y, t.isInstant, e);
            }, this);
        }, f.updateStagger = function () {
            var t = this.options.stagger;
            return null === t || void 0 === t ? void (this.stagger = 0) : (this.stagger = a(t), this.stagger);
        }, f._positionItem = function (t, e, i, n, o) {
            n ? t.goTo(e, i) : (t.stagger(o * this.stagger), t.moveTo(e, i));
        }, f._postLayout = function () {
            this.resizeContainer();
        }, f.resizeContainer = function () {
            var t = this._getOption("resizeContainer");

            if (t) {
                var e = this._getContainerSize();

                e && (this._setContainerMeasure(e.width, !0), this._setContainerMeasure(e.height, !1));
            }
        }, f._getContainerSize = d, f._setContainerMeasure = function (t, e) {
            if (void 0 !== t) {
                var i = this.size;
                i.isBorderBox && (t += e ? i.paddingLeft + i.paddingRight + i.borderLeftWidth + i.borderRightWidth : i.paddingBottom + i.paddingTop + i.borderTopWidth + i.borderBottomWidth), t = Math.max(t, 0), this.element.style[e ? "width" : "height"] = t + "px";
            }
        }, f._emitCompleteOnItems = function (t, e) {
            function i() {
                o.dispatchEvent(t + "Complete", null, [e]);
            }

            function n() {
                s++, s == r && i();
            }

            var o = this,
                r = e.length;
            if (!e || !r) return void i();
            var s = 0;
            e.forEach(function (e) {
                e.once(t, n);
            });
        }, f.dispatchEvent = function (t, e, i) {
            var n = e ? [e].concat(i) : i;
            if (this.emitEvent(t, n), u)
                if (this.$element = this.$element || u(this.element), e) {
                    var o = u.Event(e);
                    o.type = t, this.$element.trigger(o, i);
                } else this.$element.trigger(t, i);
        }, f.ignore = function (t) {
            var e = this.getItem(t);
            e && (e.isIgnored = !0);
        }, f.unignore = function (t) {
            var e = this.getItem(t);
            e && delete e.isIgnored;
        }, f.stamp = function (t) {
            t = this._find(t), t && (this.stamps = this.stamps.concat(t), t.forEach(this.ignore, this));
        }, f.unstamp = function (t) {
            t = this._find(t), t && t.forEach(function (t) {
                n.removeFrom(this.stamps, t), this.unignore(t);
            }, this);
        }, f._find = function (t) {
            return t ? ("string" == typeof t && (t = this.element.querySelectorAll(t)), t = n.makeArray(t)) : void 0;
        }, f._manageStamps = function () {
            this.stamps && this.stamps.length && (this._getBoundingRect(), this.stamps.forEach(this._manageStamp, this));
        }, f._getBoundingRect = function () {
            var t = this.element.getBoundingClientRect(),
                e = this.size;
            this._boundingRect = {
                left: t.left + e.paddingLeft + e.borderLeftWidth,
                top: t.top + e.paddingTop + e.borderTopWidth,
                right: t.right - (e.paddingRight + e.borderRightWidth),
                bottom: t.bottom - (e.paddingBottom + e.borderBottomWidth)
            };
        }, f._manageStamp = d, f._getElementOffset = function (t) {
            var e = t.getBoundingClientRect(),
                n = this._boundingRect,
                o = i(t),
                r = {
                    left: e.left - n.left - o.marginLeft,
                    top: e.top - n.top - o.marginTop,
                    right: n.right - e.right - o.marginRight,
                    bottom: n.bottom - e.bottom - o.marginBottom
                };
            return r;
        }, f.handleEvent = n.handleEvent, f.bindResize = function () {
            t.addEventListener("resize", this), this.isResizeBound = !0;
        }, f.unbindResize = function () {
            t.removeEventListener("resize", this), this.isResizeBound = !1;
        }, f.onresize = function () {
            this.resize();
        }, n.debounceMethod(r, "onresize", 100), f.resize = function () {
            this.isResizeBound && this.needsResizeLayout() && this.layout();
        }, f.needsResizeLayout = function () {
            var t = i(this.element),
                e = this.size && t;
            return e && t.innerWidth !== this.size.innerWidth;
        }, f.addItems = function (t) {
            var e = this._itemize(t);

            return e.length && (this.items = this.items.concat(e)), e;
        }, f.appended = function (t) {
            var e = this.addItems(t);
            e.length && (this.layoutItems(e, !0), this.reveal(e));
        }, f.prepended = function (t) {
            var e = this._itemize(t);

            if (e.length) {
                var i = this.items.slice(0);
                this.items = e.concat(i), this._resetLayout(), this._manageStamps(), this.layoutItems(e, !0), this.reveal(e), this.layoutItems(i);
            }
        }, f.reveal = function (t) {
            if (this._emitCompleteOnItems("reveal", t), t && t.length) {
                var e = this.updateStagger();
                t.forEach(function (t, i) {
                    t.stagger(i * e), t.reveal();
                });
            }
        }, f.hide = function (t) {
            if (this._emitCompleteOnItems("hide", t), t && t.length) {
                var e = this.updateStagger();
                t.forEach(function (t, i) {
                    t.stagger(i * e), t.hide();
                });
            }
        }, f.revealItemElements = function (t) {
            var e = this.getItems(t);
            this.reveal(e);
        }, f.hideItemElements = function (t) {
            var e = this.getItems(t);
            this.hide(e);
        }, f.getItem = function (t) {
            for (var e = 0; e < this.items.length; e++) {
                var i = this.items[e];
                if (i.element == t) return i;
            }
        }, f.getItems = function (t) {
            t = n.makeArray(t);
            var e = [];
            return t.forEach(function (t) {
                var i = this.getItem(t);
                i && e.push(i);
            }, this), e;
        }, f.remove = function (t) {
            var e = this.getItems(t);
            this._emitCompleteOnItems("remove", e), e && e.length && e.forEach(function (t) {
                t.remove(), n.removeFrom(this.items, t);
            }, this);
        }, f.destroy = function () {
            var t = this.element.style;
            t.height = "", t.position = "", t.width = "", this.items.forEach(function (t) {
                t.destroy();
            }), this.unbindResize();
            var e = this.element.outlayerGUID;
            delete c[e], delete this.element.outlayerGUID, u && u.removeData(this.element, this.constructor.namespace);
        }, r.data = function (t) {
            t = n.getQueryElement(t);
            var e = t && t.outlayerGUID;
            return e && c[e];
        }, r.create = function (t, e) {
            var i = s(r);
            return i.defaults = n.extend({}, r.defaults), n.extend(i.defaults, e), i.compatOptions = n.extend({}, r.compatOptions), i.namespace = t, i.data = r.data, i.Item = s(o), n.htmlInit(i, t), u && u.bridget && u.bridget(t, i), i;
        };
        var m = {
            ms: 1,
            s: 1e3
        };
        return r.Item = o, r;
    }),
    function (t, e) {
        "function" == typeof define && define.amd ? define(["outlayer/outlayer", "get-size/get-size"], e) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = e(require("outlayer"), require("get-size")) : t.Masonry = e(t.Outlayer, t.getSize);
    }(window, function (t, e) {
        var i = t.create("masonry");
        i.compatOptions.fitWidth = "isFitWidth";
        var n = i.prototype;
        return n._resetLayout = function () {
            this.getSize(), this._getMeasurement("columnWidth", "outerWidth"), this._getMeasurement("gutter", "outerWidth"), this.measureColumns(), this.colYs = [];

            for (var t = 0; t < this.cols; t++) {
                this.colYs.push(0);
            }

            this.maxY = 0, this.horizontalColIndex = 0;
        }, n.measureColumns = function () {
            if (this.getContainerWidth(), !this.columnWidth) {
                var t = this.items[0],
                    i = t && t.element;
                this.columnWidth = i && e(i).outerWidth || this.containerWidth;
            }

            var n = this.columnWidth += this.gutter,
                o = this.containerWidth + this.gutter,
                r = o / n,
                s = n - o % n,
                a = s && 1 > s ? "round" : "floor";
            r = Math[a](r), this.cols = Math.max(r, 1);
        }, n.getContainerWidth = function () {
            var t = this._getOption("fitWidth"),
                i = t ? this.element.parentNode : this.element,
                n = e(i);

            this.containerWidth = n && n.innerWidth;
        }, n._getItemLayoutPosition = function (t) {
            t.getSize();
            var e = t.size.outerWidth % this.columnWidth,
                i = e && 1 > e ? "round" : "ceil",
                n = Math[i](t.size.outerWidth / this.columnWidth);
            n = Math.min(n, this.cols);

            for (var o = this.options.horizontalOrder ? "_getHorizontalColPosition" : "_getTopColPosition", r = this[o](n, t), s = {
                x: this.columnWidth * r.col,
                y: r.y
            }, a = r.y + t.size.outerHeight, h = n + r.col, u = r.col; h > u; u++) {
                this.colYs[u] = a;
            }

            return s;
        }, n._getTopColPosition = function (t) {
            var e = this._getTopColGroup(t),
                i = Math.min.apply(Math, e);

            return {
                col: e.indexOf(i),
                y: i
            };
        }, n._getTopColGroup = function (t) {
            if (2 > t) return this.colYs;

            for (var e = [], i = this.cols + 1 - t, n = 0; i > n; n++) {
                e[n] = this._getColGroupY(n, t);
            }

            return e;
        }, n._getColGroupY = function (t, e) {
            if (2 > e) return this.colYs[t];
            var i = this.colYs.slice(t, t + e);
            return Math.max.apply(Math, i);
        }, n._getHorizontalColPosition = function (t, e) {
            var i = this.horizontalColIndex % this.cols,
                n = t > 1 && i + t > this.cols;
            i = n ? 0 : i;
            var o = e.size.outerWidth && e.size.outerHeight;
            return this.horizontalColIndex = o ? i + t : this.horizontalColIndex, {
                col: i,
                y: this._getColGroupY(i, t)
            };
        }, n._manageStamp = function (t) {
            var i = e(t),
                n = this._getElementOffset(t),
                o = this._getOption("originLeft"),
                r = o ? n.left : n.right,
                s = r + i.outerWidth,
                a = Math.floor(r / this.columnWidth);

            a = Math.max(0, a);
            var h = Math.floor(s / this.columnWidth);
            h -= s % this.columnWidth ? 0 : 1, h = Math.min(this.cols - 1, h);

            for (var u = this._getOption("originTop"), d = (u ? n.top : n.bottom) + i.outerHeight, l = a; h >= l; l++) {
                this.colYs[l] = Math.max(d, this.colYs[l]);
            }
        }, n._getContainerSize = function () {
            this.maxY = Math.max.apply(Math, this.colYs);
            var t = {
                height: this.maxY
            };
            return this._getOption("fitWidth") && (t.width = this._getContainerFitWidth()), t;
        }, n._getContainerFitWidth = function () {
            for (var t = 0, e = this.cols; --e && 0 === this.colYs[e];) {
                t++;
            }

            return (this.cols - t) * this.columnWidth - this.gutter;
        }, n.needsResizeLayout = function () {
            var t = this.containerWidth;
            return this.getContainerWidth(), t != this.containerWidth;
        }, i;
    });
"use strict";

function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
            return typeof obj;
        };
    } else {
        _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
    }
    return _typeof(obj);
}

/*! nouislider - 13.1.5 - 4/24/2019 */
!function (t) {
    "function" == typeof define && define.amd ? define([], t) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? module.exports = t() : window.noUiSlider = t();
}(function () {
    "use strict";

    var ut = "13.1.5";

    function ct(t) {
        t.parentElement.removeChild(t);
    }

    function s(t) {
        return null != t;
    }

    function pt(t) {
        t.preventDefault();
    }

    function i(t) {
        return "number" == typeof t && !isNaN(t) && isFinite(t);
    }

    function ft(t, e, r) {
        0 < r && (mt(t, e), setTimeout(function () {
            gt(t, e);
        }, r));
    }

    function dt(t) {
        return Math.max(Math.min(t, 100), 0);
    }

    function ht(t) {
        return Array.isArray(t) ? t : [t];
    }

    function e(t) {
        var e = (t = String(t)).split(".");
        return 1 < e.length ? e[1].length : 0;
    }

    function mt(t, e) {
        t.classList ? t.classList.add(e) : t.className += " " + e;
    }

    function gt(t, e) {
        t.classList ? t.classList.remove(e) : t.className = t.className.replace(new RegExp("(^|\\b)" + e.split(" ").join("|") + "(\\b|$)", "gi"), " ");
    }

    function vt(t) {
        var e = void 0 !== window.pageXOffset,
            r = "CSS1Compat" === (t.compatMode || "");
        return {
            x: e ? window.pageXOffset : r ? t.documentElement.scrollLeft : t.body.scrollLeft,
            y: e ? window.pageYOffset : r ? t.documentElement.scrollTop : t.body.scrollTop
        };
    }

    function c(t, e) {
        return 100 / (e - t);
    }

    function p(t, e) {
        return 100 * e / (t[1] - t[0]);
    }

    function f(t, e) {
        for (var r = 1; t >= e[r];) {
            r += 1;
        }

        return r;
    }

    function r(t, e, r) {
        if (r >= t.slice(-1)[0]) return 100;
        var n,
            i,
            o = f(r, t),
            a = t[o - 1],
            s = t[o],
            l = e[o - 1],
            u = e[o];
        return l + (i = r, p(n = [a, s], n[0] < 0 ? i + Math.abs(n[0]) : i - n[0]) / c(l, u));
    }

    function n(t, e, r, n) {
        if (100 === n) return n;
        var i,
            o,
            a = f(n, t),
            s = t[a - 1],
            l = t[a];
        return r ? (l - s) / 2 < n - s ? l : s : e[a - 1] ? t[a - 1] + (i = n - t[a - 1], o = e[a - 1], Math.round(i / o) * o) : n;
    }

    function o(t, e, r) {
        var n;
        if ("number" == typeof e && (e = [e]), !Array.isArray(e)) throw new Error("noUiSlider (" + ut + "): 'range' contains invalid value.");
        if (!i(n = "min" === t ? 0 : "max" === t ? 100 : parseFloat(t)) || !i(e[0])) throw new Error("noUiSlider (" + ut + "): 'range' value isn't numeric.");
        r.xPct.push(n), r.xVal.push(e[0]), n ? r.xSteps.push(!isNaN(e[1]) && e[1]) : isNaN(e[1]) || (r.xSteps[0] = e[1]), r.xHighestCompleteStep.push(0);
    }

    function a(t, e, r) {
        if (e)
            if (r.xVal[t] !== r.xVal[t + 1]) {
                r.xSteps[t] = p([r.xVal[t], r.xVal[t + 1]], e) / c(r.xPct[t], r.xPct[t + 1]);
                var n = (r.xVal[t + 1] - r.xVal[t]) / r.xNumSteps[t],
                    i = Math.ceil(Number(n.toFixed(3)) - 1),
                    o = r.xVal[t] + r.xNumSteps[t] * i;
                r.xHighestCompleteStep[t] = o;
            } else r.xSteps[t] = r.xHighestCompleteStep[t] = r.xVal[t];
    }

    function l(t, e, r) {
        var n;
        this.xPct = [], this.xVal = [], this.xSteps = [r || !1], this.xNumSteps = [!1], this.xHighestCompleteStep = [], this.snap = e;
        var i = [];

        for (n in t) {
            t.hasOwnProperty(n) && i.push([t[n], n]);
        }

        for (i.length && "object" == _typeof(i[0][0]) ? i.sort(function (t, e) {
            return t[0][0] - e[0][0];
        }) : i.sort(function (t, e) {
            return t[0] - e[0];
        }), n = 0; n < i.length; n++) {
            o(i[n][1], i[n][0], this);
        }

        for (this.xNumSteps = this.xSteps.slice(0), n = 0; n < this.xNumSteps.length; n++) {
            a(n, this.xNumSteps[n], this);
        }
    }

    l.prototype.getMargin = function (t) {
        var e = this.xNumSteps[0];
        if (e && t / e % 1 != 0) throw new Error("noUiSlider (" + ut + "): 'limit', 'margin' and 'padding' must be divisible by step.");
        return 2 === this.xPct.length && p(this.xVal, t);
    }, l.prototype.toStepping = function (t) {
        return t = r(this.xVal, this.xPct, t);
    }, l.prototype.fromStepping = function (t) {
        return function (t, e, r) {
            if (100 <= r) return t.slice(-1)[0];
            var n,
                i = f(r, e),
                o = t[i - 1],
                a = t[i],
                s = e[i - 1],
                l = e[i];
            return n = [o, a], (r - s) * c(s, l) * (n[1] - n[0]) / 100 + n[0];
        }(this.xVal, this.xPct, t);
    }, l.prototype.getStep = function (t) {
        return t = n(this.xPct, this.xSteps, this.snap, t);
    }, l.prototype.getDefaultStep = function (t, e, r) {
        var n = f(t, this.xPct);
        return (100 === t || e && t === this.xPct[n - 1]) && (n = Math.max(n - 1, 1)), (this.xVal[n] - this.xVal[n - 1]) / r;
    }, l.prototype.getNearbySteps = function (t) {
        var e = f(t, this.xPct);
        return {
            stepBefore: {
                startValue: this.xVal[e - 2],
                step: this.xNumSteps[e - 2],
                highestStep: this.xHighestCompleteStep[e - 2]
            },
            thisStep: {
                startValue: this.xVal[e - 1],
                step: this.xNumSteps[e - 1],
                highestStep: this.xHighestCompleteStep[e - 1]
            },
            stepAfter: {
                startValue: this.xVal[e],
                step: this.xNumSteps[e],
                highestStep: this.xHighestCompleteStep[e]
            }
        };
    }, l.prototype.countStepDecimals = function () {
        var t = this.xNumSteps.map(e);
        return Math.max.apply(null, t);
    }, l.prototype.convert = function (t) {
        return this.getStep(this.toStepping(t));
    };
    var u = {
        to: function to(t) {
            return void 0 !== t && t.toFixed(2);
        },
        from: Number
    };

    function d(t) {
        if ("object" == _typeof(e = t) && "function" == typeof e.to && "function" == typeof e.from) return !0;
        var e;
        throw new Error("noUiSlider (" + ut + "): 'format' requires 'to' and 'from' methods.");
    }

    function h(t, e) {
        if (!i(e)) throw new Error("noUiSlider (" + ut + "): 'step' is not numeric.");
        t.singleStep = e;
    }

    function m(t, e) {
        if ("object" != _typeof(e) || Array.isArray(e)) throw new Error("noUiSlider (" + ut + "): 'range' is not an object.");
        if (void 0 === e.min || void 0 === e.max) throw new Error("noUiSlider (" + ut + "): Missing 'min' or 'max' in 'range'.");
        if (e.min === e.max) throw new Error("noUiSlider (" + ut + "): 'range' 'min' and 'max' cannot be equal.");
        t.spectrum = new l(e, t.snap, t.singleStep);
    }

    function g(t, e) {
        if (e = ht(e), !Array.isArray(e) || !e.length) throw new Error("noUiSlider (" + ut + "): 'start' option is incorrect.");
        t.handles = e.length, t.start = e;
    }

    function v(t, e) {
        if ("boolean" != typeof (t.snap = e)) throw new Error("noUiSlider (" + ut + "): 'snap' option must be a boolean.");
    }

    function b(t, e) {
        if ("boolean" != typeof (t.animate = e)) throw new Error("noUiSlider (" + ut + "): 'animate' option must be a boolean.");
    }

    function S(t, e) {
        if ("number" != typeof (t.animationDuration = e)) throw new Error("noUiSlider (" + ut + "): 'animationDuration' option must be a number.");
    }

    function x(t, e) {
        var r,
            n = [!1];

        if ("lower" === e ? e = [!0, !1] : "upper" === e && (e = [!1, !0]), !0 === e || !1 === e) {
            for (r = 1; r < t.handles; r++) {
                n.push(e);
            }

            n.push(!1);
        } else {
            if (!Array.isArray(e) || !e.length || e.length !== t.handles + 1) throw new Error("noUiSlider (" + ut + "): 'connect' option doesn't match handle count.");
            n = e;
        }

        t.connect = n;
    }

    function w(t, e) {
        switch (e) {
            case "horizontal":
                t.ort = 0;
                break;

            case "vertical":
                t.ort = 1;
                break;

            default:
                throw new Error("noUiSlider (" + ut + "): 'orientation' option is invalid.");
        }
    }

    function y(t, e) {
        if (!i(e)) throw new Error("noUiSlider (" + ut + "): 'margin' option must be numeric.");
        if (0 !== e && (t.margin = t.spectrum.getMargin(e), !t.margin)) throw new Error("noUiSlider (" + ut + "): 'margin' option is only supported on linear sliders.");
    }

    function E(t, e) {
        if (!i(e)) throw new Error("noUiSlider (" + ut + "): 'limit' option must be numeric.");
        if (t.limit = t.spectrum.getMargin(e), !t.limit || t.handles < 2) throw new Error("noUiSlider (" + ut + "): 'limit' option is only supported on linear sliders with 2 or more handles.");
    }

    function C(t, e) {
        if (!i(e) && !Array.isArray(e)) throw new Error("noUiSlider (" + ut + "): 'padding' option must be numeric or array of exactly 2 numbers.");
        if (Array.isArray(e) && 2 !== e.length && !i(e[0]) && !i(e[1])) throw new Error("noUiSlider (" + ut + "): 'padding' option must be numeric or array of exactly 2 numbers.");

        if (0 !== e) {
            if (Array.isArray(e) || (e = [e, e]), !(t.padding = [t.spectrum.getMargin(e[0]), t.spectrum.getMargin(e[1])]) === t.padding[0] || !1 === t.padding[1]) throw new Error("noUiSlider (" + ut + "): 'padding' option is only supported on linear sliders.");
            if (t.padding[0] < 0 || t.padding[1] < 0) throw new Error("noUiSlider (" + ut + "): 'padding' option must be a positive number(s).");
            if (100 < t.padding[0] + t.padding[1]) throw new Error("noUiSlider (" + ut + "): 'padding' option must not exceed 100% of the range.");
        }
    }

    function N(t, e) {
        switch (e) {
            case "ltr":
                t.dir = 0;
                break;

            case "rtl":
                t.dir = 1;
                break;

            default:
                throw new Error("noUiSlider (" + ut + "): 'direction' option was not recognized.");
        }
    }

    function U(t, e) {
        if ("string" != typeof e) throw new Error("noUiSlider (" + ut + "): 'behaviour' must be a string containing options.");
        var r = 0 <= e.indexOf("tap"),
            n = 0 <= e.indexOf("drag"),
            i = 0 <= e.indexOf("fixed"),
            o = 0 <= e.indexOf("snap"),
            a = 0 <= e.indexOf("hover"),
            s = 0 <= e.indexOf("unconstrained");

        if (i) {
            if (2 !== t.handles) throw new Error("noUiSlider (" + ut + "): 'fixed' behaviour must be used with 2 handles");
            y(t, t.start[1] - t.start[0]);
        }

        if (s && (t.margin || t.limit)) throw new Error("noUiSlider (" + ut + "): 'unconstrained' behaviour cannot be used with margin or limit");
        t.events = {
            tap: r || o,
            drag: n,
            fixed: i,
            snap: o,
            hover: a,
            unconstrained: s
        };
    }

    function k(t, e) {
        if (!1 !== e)
            if (!0 === e) {
                t.tooltips = [];

                for (var r = 0; r < t.handles; r++) {
                    t.tooltips.push(!0);
                }
            } else {
                if (t.tooltips = ht(e), t.tooltips.length !== t.handles) throw new Error("noUiSlider (" + ut + "): must pass a formatter for all handles.");
                t.tooltips.forEach(function (t) {
                    if ("boolean" != typeof t && ("object" != _typeof(t) || "function" != typeof t.to)) throw new Error("noUiSlider (" + ut + "): 'tooltips' must be passed a formatter or 'false'.");
                });
            }
    }

    function P(t, e) {
        d(t.ariaFormat = e);
    }

    function A(t, e) {
        d(t.format = e);
    }

    function V(t, e) {
        if ("boolean" != typeof (t.keyboardSupport = e)) throw new Error("noUiSlider (" + ut + "): 'keyboardSupport' option must be a boolean.");
    }

    function M(t, e) {
        t.documentElement = e;
    }

    function O(t, e) {
        if ("string" != typeof e && !1 !== e) throw new Error("noUiSlider (" + ut + "): 'cssPrefix' must be a string or `false`.");
        t.cssPrefix = e;
    }

    function L(t, e) {
        if ("object" != _typeof(e)) throw new Error("noUiSlider (" + ut + "): 'cssClasses' must be an object.");
        if ("string" == typeof t.cssPrefix)
            for (var r in t.cssClasses = {}, e) {
                e.hasOwnProperty(r) && (t.cssClasses[r] = t.cssPrefix + e[r]);
            } else t.cssClasses = e;
    }

    function bt(e) {
        var r = {
                margin: 0,
                limit: 0,
                padding: 0,
                animate: !0,
                animationDuration: 300,
                ariaFormat: u,
                format: u
            },
            n = {
                step: {
                    r: !1,
                    t: h
                },
                start: {
                    r: !0,
                    t: g
                },
                connect: {
                    r: !0,
                    t: x
                },
                direction: {
                    r: !0,
                    t: N
                },
                snap: {
                    r: !1,
                    t: v
                },
                animate: {
                    r: !1,
                    t: b
                },
                animationDuration: {
                    r: !1,
                    t: S
                },
                range: {
                    r: !0,
                    t: m
                },
                orientation: {
                    r: !1,
                    t: w
                },
                margin: {
                    r: !1,
                    t: y
                },
                limit: {
                    r: !1,
                    t: E
                },
                padding: {
                    r: !1,
                    t: C
                },
                behaviour: {
                    r: !0,
                    t: U
                },
                ariaFormat: {
                    r: !1,
                    t: P
                },
                format: {
                    r: !1,
                    t: A
                },
                tooltips: {
                    r: !1,
                    t: k
                },
                keyboardSupport: {
                    r: !0,
                    t: V
                },
                documentElement: {
                    r: !1,
                    t: M
                },
                cssPrefix: {
                    r: !0,
                    t: O
                },
                cssClasses: {
                    r: !0,
                    t: L
                }
            },
            i = {
                connect: !1,
                direction: "ltr",
                behaviour: "tap",
                orientation: "horizontal",
                keyboardSupport: !0,
                cssPrefix: "noUi-",
                cssClasses: {
                    target: "target",
                    base: "base",
                    origin: "origin",
                    handle: "handle",
                    handleLower: "handle-lower",
                    handleUpper: "handle-upper",
                    touchArea: "touch-area",
                    horizontal: "horizontal",
                    vertical: "vertical",
                    background: "background",
                    connect: "connect",
                    connects: "connects",
                    ltr: "ltr",
                    rtl: "rtl",
                    draggable: "draggable",
                    drag: "state-drag",
                    tap: "state-tap",
                    active: "active",
                    tooltip: "tooltip",
                    pips: "pips",
                    pipsHorizontal: "pips-horizontal",
                    pipsVertical: "pips-vertical",
                    marker: "marker",
                    markerHorizontal: "marker-horizontal",
                    markerVertical: "marker-vertical",
                    markerNormal: "marker-normal",
                    markerLarge: "marker-large",
                    markerSub: "marker-sub",
                    value: "value",
                    valueHorizontal: "value-horizontal",
                    valueVertical: "value-vertical",
                    valueNormal: "value-normal",
                    valueLarge: "value-large",
                    valueSub: "value-sub"
                }
            };
        e.format && !e.ariaFormat && (e.ariaFormat = e.format), Object.keys(n).forEach(function (t) {
            if (!s(e[t]) && void 0 === i[t]) {
                if (n[t].r) throw new Error("noUiSlider (" + ut + "): '" + t + "' is required.");
                return !0;
            }

            n[t].t(r, s(e[t]) ? e[t] : i[t]);
        }), r.pips = e.pips;
        var t = document.createElement("div"),
            o = void 0 !== t.style.msTransform,
            a = void 0 !== t.style.transform;
        r.transformRule = a ? "transform" : o ? "msTransform" : "webkitTransform";
        return r.style = [
            ["left", "top"],
            ["right", "bottom"]
        ][r.dir][r.ort], r;
    }

    function z(t, f, o) {
        var l,
            u,
            a,
            c,
            i,
            s,
            e,
            p,
            d = window.navigator.pointerEnabled ? {
                start: "pointerdown",
                move: "pointermove",
                end: "pointerup"
            } : window.navigator.msPointerEnabled ? {
                start: "MSPointerDown",
                move: "MSPointerMove",
                end: "MSPointerUp"
            } : {
                start: "mousedown touchstart",
                move: "mousemove touchmove",
                end: "mouseup touchend"
            },
            h = window.CSS && CSS.supports && CSS.supports("touch-action", "none") && function () {
                var t = !1;

                try {
                    var e = Object.defineProperty({}, "passive", {
                        get: function get() {
                            t = !0;
                        }
                    });
                    window.addEventListener("test", null, e);
                } catch (t) {
                }

                return t;
            }(),
            y = t,
            E = f.spectrum,
            m = [],
            g = [],
            v = [],
            b = 0,
            S = {},
            x = t.ownerDocument,
            w = f.documentElement || x.documentElement,
            C = x.body,
            N = -1,
            U = 0,
            k = 1,
            P = 2,
            A = "rtl" === x.dir || 1 === f.ort ? 0 : 100;

        function V(t, e) {
            var r = x.createElement("div");
            return e && mt(r, e), t.appendChild(r), r;
        }

        function M(t, e) {
            var r = V(t, f.cssClasses.origin),
                n = V(r, f.cssClasses.handle);
            return V(n, f.cssClasses.touchArea), n.setAttribute("data-handle", e), f.keyboardSupport && (n.setAttribute("tabindex", "0"), n.addEventListener("keydown", function (t) {
                return function (t, e) {
                    if (L() || z(e)) return !1;
                    var r = ["Left", "Right"],
                        n = ["Down", "Up"];
                    f.dir && !f.ort ? r.reverse() : f.ort && !f.dir && n.reverse();
                    var i = t.key.replace("Arrow", ""),
                        o = i === n[0] || i === r[0],
                        a = i === n[1] || i === r[1];
                    if (!o && !a) return !0;
                    t.preventDefault();
                    var s = o ? 0 : 1,
                        l = lt(e)[s];
                    if (null === l) return !1;
                    !1 === l && (l = E.getDefaultStep(g[e], o, 10));
                    return l = Math.max(l, 1e-7), l *= o ? -1 : 1, at(e, m[e] + l, !0), !1;
                }(t, e);
            })), n.setAttribute("role", "slider"), n.setAttribute("aria-orientation", f.ort ? "vertical" : "horizontal"), 0 === e ? mt(n, f.cssClasses.handleLower) : e === f.handles - 1 && mt(n, f.cssClasses.handleUpper), r;
        }

        function O(t, e) {
            return !!e && V(t, f.cssClasses.connect);
        }

        function r(t, e) {
            return !!f.tooltips[e] && V(t.firstChild, f.cssClasses.tooltip);
        }

        function L() {
            return y.hasAttribute("disabled");
        }

        function z(t) {
            return u[t].hasAttribute("disabled");
        }

        function j() {
            i && (G("update.tooltips"), i.forEach(function (t) {
                t && ct(t);
            }), i = null);
        }

        function H() {
            j(), i = u.map(r), $("update.tooltips", function (t, e, r) {
                if (i[e]) {
                    var n = t[e];
                    !0 !== f.tooltips[e] && (n = f.tooltips[e].to(r[e])), i[e].innerHTML = n;
                }
            });
        }

        function F(e, i, o) {
            var a = x.createElement("div"),
                s = [];
            s[U] = f.cssClasses.valueNormal, s[k] = f.cssClasses.valueLarge, s[P] = f.cssClasses.valueSub;
            var l = [];
            l[U] = f.cssClasses.markerNormal, l[k] = f.cssClasses.markerLarge, l[P] = f.cssClasses.markerSub;
            var u = [f.cssClasses.valueHorizontal, f.cssClasses.valueVertical],
                c = [f.cssClasses.markerHorizontal, f.cssClasses.markerVertical];

            function p(t, e) {
                var r = e === f.cssClasses.value,
                    n = r ? s : l;
                return e + " " + (r ? u : c)[f.ort] + " " + n[t];
            }

            return mt(a, f.cssClasses.pips), mt(a, 0 === f.ort ? f.cssClasses.pipsHorizontal : f.cssClasses.pipsVertical), Object.keys(e).forEach(function (t) {
                !function (t, e, r) {
                    if ((r = i ? i(e, r) : r) !== N) {
                        var n = V(a, !1);
                        n.className = p(r, f.cssClasses.marker), n.style[f.style] = t + "%", U < r && ((n = V(a, !1)).className = p(r, f.cssClasses.value), n.setAttribute("data-value", e), n.style[f.style] = t + "%", n.innerHTML = o.to(e));
                    }
                }(t, e[t][0], e[t][1]);
            }), a;
        }

        function D() {
            c && (ct(c), c = null);
        }

        function T(t) {
            D();

            var m,
                g,
                v,
                b,
                e,
                r,
                S,
                x,
                w,
                n = t.mode,
                i = t.density || 1,
                o = t.filter || !1,
                a = function (t, e, r) {
                    if ("range" === t || "steps" === t) return E.xVal;

                    if ("count" === t) {
                        if (e < 2) throw new Error("noUiSlider (" + ut + "): 'values' (>= 2) required for mode 'count'.");
                        var n = e - 1,
                            i = 100 / n;

                        for (e = []; n--;) {
                            e[n] = n * i;
                        }

                        e.push(100), t = "positions";
                    }

                    return "positions" === t ? e.map(function (t) {
                        return E.fromStepping(r ? E.getStep(t) : t);
                    }) : "values" === t ? r ? e.map(function (t) {
                        return E.fromStepping(E.getStep(E.toStepping(t)));
                    }) : e : void 0;
                }(n, t.values || !1, t.stepped || !1),
                s = (m = i, g = n, v = a, b = {}, e = E.xVal[0], r = E.xVal[E.xVal.length - 1], x = S = !1, w = 0, (v = v.slice().sort(function (t, e) {
                    return t - e;
                }).filter(function (t) {
                    return !this[t] && (this[t] = !0);
                }, {}))[0] !== e && (v.unshift(e), S = !0), v[v.length - 1] !== r && (v.push(r), x = !0), v.forEach(function (t, e) {
                    var r,
                        n,
                        i,
                        o,
                        a,
                        s,
                        l,
                        u,
                        c,
                        p,
                        f = t,
                        d = v[e + 1],
                        h = "steps" === g;
                    if (h && (r = E.xNumSteps[e]), r || (r = d - f), !1 !== f && void 0 !== d)
                        for (r = Math.max(r, 1e-7), n = f; n <= d; n = (n + r).toFixed(7) / 1) {
                            for (u = (a = (o = E.toStepping(n)) - w) / m, p = a / (c = Math.round(u)), i = 1; i <= c; i += 1) {
                                b[(s = w + i * p).toFixed(5)] = [E.fromStepping(s), 0];
                            }

                            l = -1 < v.indexOf(n) ? k : h ? P : U, !e && S && (l = 0), n === d && x || (b[o.toFixed(5)] = [n, l]), w = o;
                        }
                }), b),
                l = t.format || {
                    to: Math.round
                };

            return c = y.appendChild(F(s, o, l));
        }

        function R() {
            var t = l.getBoundingClientRect(),
                e = "offset" + ["Width", "Height"][f.ort];
            return 0 === f.ort ? t.width || l[e] : t.height || l[e];
        }

        function B(n, i, o, a) {
            var e = function e(t) {
                    return !!(t = function (t, e, r) {
                        var n,
                            i,
                            o = 0 === t.type.indexOf("touch"),
                            a = 0 === t.type.indexOf("mouse"),
                            s = 0 === t.type.indexOf("pointer");
                        0 === t.type.indexOf("MSPointer") && (s = !0);

                        if (o) {
                            var l = function l(t) {
                                return t.target === r || r.contains(t.target);
                            };

                            if ("touchstart" === t.type) {
                                var u = Array.prototype.filter.call(t.touches, l);
                                if (1 < u.length) return !1;
                                n = u[0].pageX, i = u[0].pageY;
                            } else {
                                var c = Array.prototype.find.call(t.changedTouches, l);
                                if (!c) return !1;
                                n = c.pageX, i = c.pageY;
                            }
                        }

                        e = e || vt(x), (a || s) && (n = t.clientX + e.x, i = t.clientY + e.y);
                        return t.pageOffset = e, t.points = [n, i], t.cursor = a || s, t;
                    }(t, a.pageOffset, a.target || i)) && !(L() && !a.doNotReject) && (e = y, r = f.cssClasses.tap, !((e.classList ? e.classList.contains(r) : new RegExp("\\b" + r + "\\b").test(e.className)) && !a.doNotReject) && !(n === d.start && void 0 !== t.buttons && 1 < t.buttons) && (!a.hover || !t.buttons) && (h || t.preventDefault(), t.calcPoint = t.points[f.ort], void o(t, a)));
                    var e, r;
                },
                r = [];

            return n.split(" ").forEach(function (t) {
                i.addEventListener(t, e, !!h && {
                    passive: !0
                }), r.push([t, e]);
            }), r;
        }

        function q(t) {
            var e,
                r,
                n,
                i,
                o,
                a,
                s = 100 * (t - (e = l, r = f.ort, n = e.getBoundingClientRect(), i = e.ownerDocument, o = i.documentElement, a = vt(i), /webkit.*Chrome.*Mobile/i.test(navigator.userAgent) && (a.x = 0), r ? n.top + a.y - o.clientTop : n.left + a.x - o.clientLeft)) / R();
            return s = dt(s), f.dir ? 100 - s : s;
        }

        function X(t, e) {
            "mouseout" === t.type && "HTML" === t.target.nodeName && null === t.relatedTarget && _(t, e);
        }

        function Y(t, e) {
            if (-1 === navigator.appVersion.indexOf("MSIE 9") && 0 === t.buttons && 0 !== e.buttonsProperty) return _(t, e);
            var r = (f.dir ? -1 : 1) * (t.calcPoint - e.startCalcPoint);
            Z(0 < r, 100 * r / e.baseSize, e.locations, e.handleNumbers);
        }

        function _(t, e) {
            e.handle && (gt(e.handle, f.cssClasses.active), b -= 1), e.listeners.forEach(function (t) {
                w.removeEventListener(t[0], t[1]);
            }), 0 === b && (gt(y, f.cssClasses.drag), et(), t.cursor && (C.style.cursor = "", C.removeEventListener("selectstart", pt))), e.handleNumbers.forEach(function (t) {
                J("change", t), J("set", t), J("end", t);
            });
        }

        function I(t, e) {
            if (e.handleNumbers.some(z)) return !1;
            var r;
            1 === e.handleNumbers.length && (r = u[e.handleNumbers[0]].children[0], b += 1, mt(r, f.cssClasses.active));
            t.stopPropagation();
            var n = [],
                i = B(d.move, w, Y, {
                    target: t.target,
                    handle: r,
                    listeners: n,
                    startCalcPoint: t.calcPoint,
                    baseSize: R(),
                    pageOffset: t.pageOffset,
                    handleNumbers: e.handleNumbers,
                    buttonsProperty: t.buttons,
                    locations: g.slice()
                }),
                o = B(d.end, w, _, {
                    target: t.target,
                    handle: r,
                    listeners: n,
                    doNotReject: !0,
                    handleNumbers: e.handleNumbers
                }),
                a = B("mouseout", w, X, {
                    target: t.target,
                    handle: r,
                    listeners: n,
                    doNotReject: !0,
                    handleNumbers: e.handleNumbers
                });
            n.push.apply(n, i.concat(o, a)), t.cursor && (C.style.cursor = getComputedStyle(t.target).cursor, 1 < u.length && mt(y, f.cssClasses.drag), C.addEventListener("selectstart", pt, !1)), e.handleNumbers.forEach(function (t) {
                J("start", t);
            });
        }

        function n(t) {
            t.stopPropagation();
            var n,
                i,
                o,
                e = q(t.calcPoint),
                r = (n = e, o = !(i = 100), u.forEach(function (t, e) {
                    if (!z(e)) {
                        var r = Math.abs(g[e] - n);
                        (r < i || 100 === r && 100 === i) && (o = e, i = r);
                    }
                }), o);
            if (!1 === r) return !1;
            f.events.snap || ft(y, f.cssClasses.tap, f.animationDuration), rt(r, e, !0, !0), et(), J("slide", r, !0), J("update", r, !0), J("change", r, !0), J("set", r, !0), f.events.snap && I(t, {
                handleNumbers: [r]
            });
        }

        function W(t) {
            var e = q(t.calcPoint),
                r = E.getStep(e),
                n = E.fromStepping(r);
            Object.keys(S).forEach(function (t) {
                "hover" === t.split(".")[0] && S[t].forEach(function (t) {
                    t.call(s, n);
                });
            });
        }

        function $(t, e) {
            S[t] = S[t] || [], S[t].push(e), "update" === t.split(".")[0] && u.forEach(function (t, e) {
                J("update", e);
            });
        }

        function G(t) {
            var n = t && t.split(".")[0],
                i = n && t.substring(n.length);
            Object.keys(S).forEach(function (t) {
                var e = t.split(".")[0],
                    r = t.substring(e.length);
                n && n !== e || i && i !== r || delete S[t];
            });
        }

        function J(r, n, i) {
            Object.keys(S).forEach(function (t) {
                var e = t.split(".")[0];
                r === e && S[t].forEach(function (t) {
                    t.call(s, m.map(f.format.to), n, m.slice(), i || !1, g.slice());
                });
            });
        }

        function K(t, e, r, n, i, o) {
            return 1 < u.length && !f.events.unconstrained && (n && 0 < e && (r = Math.max(r, t[e - 1] + f.margin)), i && e < u.length - 1 && (r = Math.min(r, t[e + 1] - f.margin))), 1 < u.length && f.limit && (n && 0 < e && (r = Math.min(r, t[e - 1] + f.limit)), i && e < u.length - 1 && (r = Math.max(r, t[e + 1] - f.limit))), f.padding && (0 === e && (r = Math.max(r, f.padding[0])), e === u.length - 1 && (r = Math.min(r, 100 - f.padding[1]))), !((r = dt(r = E.getStep(r))) === t[e] && !o) && r;
        }

        function Q(t, e) {
            var r = f.ort;
            return (r ? e : t) + ", " + (r ? t : e);
        }

        function Z(t, n, r, e) {
            var i = r.slice(),
                o = [!t, t],
                a = [t, !t];
            e = e.slice(), t && e.reverse(), 1 < e.length ? e.forEach(function (t, e) {
                var r = K(i, t, i[t] + n, o[e], a[e], !1);
                !1 === r ? n = 0 : (n = r - i[t], i[t] = r);
            }) : o = a = [!0];
            var s = !1;
            e.forEach(function (t, e) {
                s = rt(t, r[t] + n, o[e], a[e]) || s;
            }), s && e.forEach(function (t) {
                J("update", t), J("slide", t);
            });
        }

        function tt(t, e) {
            return f.dir ? 100 - t - e : t;
        }

        function et() {
            v.forEach(function (t) {
                var e = 50 < g[t] ? -1 : 1,
                    r = 3 + (u.length + e * t);
                u[t].style.zIndex = r;
            });
        }

        function rt(t, e, r, n) {
            return !1 !== (e = K(g, t, e, r, n, !1)) && (function (t, e) {
                g[t] = e, m[t] = E.fromStepping(e);
                var r = "translate(" + Q(tt(e, 0) - A + "%", "0") + ")";
                u[t].style[f.transformRule] = r, nt(t), nt(t + 1);
            }(t, e), !0);
        }

        function nt(t) {
            if (a[t]) {
                var e = 0,
                    r = 100;
                0 !== t && (e = g[t - 1]), t !== a.length - 1 && (r = g[t]);
                var n = r - e,
                    i = "translate(" + Q(tt(e, n) + "%", "0") + ")",
                    o = "scale(" + Q(n / 100, "1") + ")";
                a[t].style[f.transformRule] = i + " " + o;
            }
        }

        function it(t, e) {
            return null === t || !1 === t || void 0 === t ? g[e] : ("number" == typeof t && (t = String(t)), t = f.format.from(t), !1 === (t = E.toStepping(t)) || isNaN(t) ? g[e] : t);
        }

        function ot(t, e) {
            var r = ht(t),
                n = void 0 === g[0];
            e = void 0 === e || !!e, f.animate && !n && ft(y, f.cssClasses.tap, f.animationDuration), v.forEach(function (t) {
                rt(t, it(r[t], t), !0, !1);
            }), v.forEach(function (t) {
                rt(t, g[t], !0, !0);
            }), et(), v.forEach(function (t) {
                J("update", t), null !== r[t] && e && J("set", t);
            });
        }

        function at(t, e, r) {
            if (!(0 <= (t = Number(t)) && t < v.length)) throw new Error("noUiSlider (" + ut + "): invalid handle number, got: " + t);
            rt(t, it(e, t), !0, !0), J("update", t), r && J("set", t);
        }

        function st() {
            var t = m.map(f.format.to);
            return 1 === t.length ? t[0] : t;
        }

        function lt(t) {
            var e = g[t],
                r = E.getNearbySteps(e),
                n = m[t],
                i = r.thisStep.step,
                o = null;
            if (f.snap) return [n - r.stepBefore.startValue || null, r.stepAfter.startValue - n || null];
            !1 !== i && n + i > r.stepAfter.startValue && (i = r.stepAfter.startValue - n), o = n > r.thisStep.startValue ? r.thisStep.step : !1 !== r.stepBefore.step && n - r.stepBefore.highestStep, 100 === e ? i = null : 0 === e && (o = null);
            var a = E.countStepDecimals();
            return null !== i && !1 !== i && (i = Number(i.toFixed(a))), null !== o && !1 !== o && (o = Number(o.toFixed(a))), [o, i];
        }

        return mt(e = y, f.cssClasses.target), 0 === f.dir ? mt(e, f.cssClasses.ltr) : mt(e, f.cssClasses.rtl), 0 === f.ort ? mt(e, f.cssClasses.horizontal) : mt(e, f.cssClasses.vertical), l = V(e, f.cssClasses.base),
            function (t, e) {
                var r = V(e, f.cssClasses.connects);
                u = [], (a = []).push(O(r, t[0]));

                for (var n = 0; n < f.handles; n++) {
                    u.push(M(e, n)), v[n] = n, a.push(O(r, t[n + 1]));
                }
            }(f.connect, l), (p = f.events).fixed || u.forEach(function (t, e) {
            B(d.start, t.children[0], I, {
                handleNumbers: [e]
            });
        }), p.tap && B(d.start, l, n, {}), p.hover && B(d.move, l, W, {
            hover: !0
        }), p.drag && a.forEach(function (t, e) {
            if (!1 !== t && 0 !== e && e !== a.length - 1) {
                var r = u[e - 1],
                    n = u[e],
                    i = [t];
                mt(t, f.cssClasses.draggable), p.fixed && (i.push(r.children[0]), i.push(n.children[0])), i.forEach(function (t) {
                    B(d.start, t, I, {
                        handles: [r, n],
                        handleNumbers: [e - 1, e]
                    });
                });
            }
        }), ot(f.start), f.pips && T(f.pips), f.tooltips && H(), $("update", function (t, e, a, r, s) {
            v.forEach(function (t) {
                var e = u[t],
                    r = K(g, t, 0, !0, !0, !0),
                    n = K(g, t, 100, !0, !0, !0),
                    i = s[t],
                    o = f.ariaFormat.to(a[t]);
                r = E.fromStepping(r).toFixed(1), n = E.fromStepping(n).toFixed(1), i = E.fromStepping(i).toFixed(1), e.children[0].setAttribute("aria-valuemin", r), e.children[0].setAttribute("aria-valuemax", n), e.children[0].setAttribute("aria-valuenow", i), e.children[0].setAttribute("aria-valuetext", o);
            });
        }), s = {
            destroy: function destroy() {
                for (var t in f.cssClasses) {
                    f.cssClasses.hasOwnProperty(t) && gt(y, f.cssClasses[t]);
                }

                for (; y.firstChild;) {
                    y.removeChild(y.firstChild);
                }

                delete y.noUiSlider;
            },
            steps: function steps() {
                return v.map(lt);
            },
            on: $,
            off: G,
            get: st,
            set: ot,
            setHandle: at,
            reset: function reset(t) {
                ot(f.start, t);
            },
            __moveHandles: function __moveHandles(t, e, r) {
                Z(t, e, g, r);
            },
            options: o,
            updateOptions: function updateOptions(e, t) {
                var r = st(),
                    n = ["margin", "limit", "padding", "range", "animate", "snap", "step", "format", "pips", "tooltips"];
                n.forEach(function (t) {
                    void 0 !== e[t] && (o[t] = e[t]);
                });
                var i = bt(o);
                n.forEach(function (t) {
                    void 0 !== e[t] && (f[t] = i[t]);
                }), E = i.spectrum, f.margin = i.margin, f.limit = i.limit, f.padding = i.padding, f.pips ? T(f.pips) : D(), f.tooltips ? H() : j(), g = [], ot(e.start || r, t);
            },
            target: y,
            removePips: D,
            removeTooltips: j,
            pips: T
        };
    }

    return {
        __spectrum: l,
        version: ut,
        create: function create(t, e) {
            if (!t || !t.nodeName) throw new Error("noUiSlider (" + ut + "): create requires a single element, got: " + t);
            if (t.noUiSlider) throw new Error("noUiSlider (" + ut + "): Slider was already initialized.");
            var r = z(t, bt(e), e);
            return t.noUiSlider = r;
        }
    };
});
"use strict";

function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
            return typeof obj;
        };
    } else {
        _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
    }
    return _typeof(obj);
}

/**
 * Owl Carousel v2.3.4
 * Copyright 2013-2018 David Deutsch
 * Licensed under: SEE LICENSE IN https://github.com/OwlCarousel2/OwlCarousel2/blob/master/LICENSE
 */
!function (a, b, c, d) {
    function e(b, c) {
        this.settings = null, this.options = a.extend({}, e.Defaults, c), this.$element = a(b), this._handlers = {}, this._plugins = {}, this._supress = {}, this._current = null, this._speed = null, this._coordinates = [], this._breakpoint = null, this._width = null, this._items = [], this._clones = [], this._mergers = [], this._widths = [], this._invalidated = {}, this._pipe = [], this._drag = {
            time: null,
            target: null,
            pointer: null,
            stage: {
                start: null,
                current: null
            },
            direction: null
        }, this._states = {
            current: {},
            tags: {
                initializing: ["busy"],
                animating: ["busy"],
                dragging: ["interacting"]
            }
        }, a.each(["onResize", "onThrottledResize"], a.proxy(function (b, c) {
            this._handlers[c] = a.proxy(this[c], this);
        }, this)), a.each(e.Plugins, a.proxy(function (a, b) {
            this._plugins[a.charAt(0).toLowerCase() + a.slice(1)] = new b(this);
        }, this)), a.each(e.Workers, a.proxy(function (b, c) {
            this._pipe.push({
                filter: c.filter,
                run: a.proxy(c.run, this)
            });
        }, this)), this.setup(), this.initialize();
    }

    e.Defaults = {
        items: 3,
        loop: !1,
        center: !1,
        rewind: !1,
        checkVisibility: !0,
        mouseDrag: !0,
        touchDrag: !0,
        pullDrag: !0,
        freeDrag: !1,
        margin: 0,
        stagePadding: 0,
        merge: !1,
        mergeFit: !0,
        autoWidth: !1,
        startPosition: 0,
        rtl: !1,
        smartSpeed: 250,
        fluidSpeed: !1,
        dragEndSpeed: !1,
        responsive: {},
        responsiveRefreshRate: 200,
        responsiveBaseElement: b,
        fallbackEasing: "swing",
        slideTransition: "",
        info: !1,
        nestedItemSelector: !1,
        itemElement: "div",
        stageElement: "div",
        refreshClass: "owl-refresh",
        loadedClass: "owl-loaded",
        loadingClass: "owl-loading",
        rtlClass: "owl-rtl",
        responsiveClass: "owl-responsive",
        dragClass: "owl-drag",
        itemClass: "owl-item",
        stageClass: "owl-stage",
        stageOuterClass: "owl-stage-outer",
        grabClass: "owl-grab"
    }, e.Width = {
        Default: "default",
        Inner: "inner",
        Outer: "outer"
    }, e.Type = {
        Event: "event",
        State: "state"
    }, e.Plugins = {}, e.Workers = [{
        filter: ["width", "settings"],
        run: function run() {
            this._width = this.$element.width();
        }
    }, {
        filter: ["width", "items", "settings"],
        run: function run(a) {
            a.current = this._items && this._items[this.relative(this._current)];
        }
    }, {
        filter: ["items", "settings"],
        run: function run() {
            this.$stage.children(".cloned").remove();
        }
    }, {
        filter: ["width", "items", "settings"],
        run: function run(a) {
            var b = this.settings.margin || "",
                c = !this.settings.autoWidth,
                d = this.settings.rtl,
                e = {
                    width: "auto",
                    "margin-left": d ? b : "",
                    "margin-right": d ? "" : b
                };
            !c && this.$stage.children().css(e), a.css = e;
        }
    }, {
        filter: ["width", "items", "settings"],
        run: function run(a) {
            var b = (this.width() / this.settings.items).toFixed(3) - this.settings.margin,
                c = null,
                d = this._items.length,
                e = !this.settings.autoWidth,
                f = [];

            for (a.items = {
                merge: !1,
                width: b
            }; d--;) {
                c = this._mergers[d], c = this.settings.mergeFit && Math.min(c, this.settings.items) || c, a.items.merge = c > 1 || a.items.merge, f[d] = e ? b * c : this._items[d].width();
            }

            this._widths = f;
        }
    }, {
        filter: ["items", "settings"],
        run: function run() {
            var b = [],
                c = this._items,
                d = this.settings,
                e = Math.max(2 * d.items, 4),
                f = 2 * Math.ceil(c.length / 2),
                g = d.loop && c.length ? d.rewind ? e : Math.max(e, f) : 0,
                h = "",
                i = "";

            for (g /= 2; g > 0;) {
                b.push(this.normalize(b.length / 2, !0)), h += c[b[b.length - 1]][0].outerHTML, b.push(this.normalize(c.length - 1 - (b.length - 1) / 2, !0)), i = c[b[b.length - 1]][0].outerHTML + i, g -= 1;
            }

            this._clones = b, a(h).addClass("cloned").appendTo(this.$stage), a(i).addClass("cloned").prependTo(this.$stage);
        }
    }, {
        filter: ["width", "items", "settings"],
        run: function run() {
            for (var a = this.settings.rtl ? 1 : -1, b = this._clones.length + this._items.length, c = -1, d = 0, e = 0, f = []; ++c < b;) {
                d = f[c - 1] || 0, e = this._widths[this.relative(c)] + this.settings.margin, f.push(d + e * a);
            }

            this._coordinates = f;
        }
    }, {
        filter: ["width", "items", "settings"],
        run: function run() {
            var a = this.settings.stagePadding,
                b = this._coordinates,
                c = {
                    width: Math.ceil(Math.abs(b[b.length - 1])) + 2 * a,
                    "padding-left": a || "",
                    "padding-right": a || ""
                };
            this.$stage.css(c);
        }
    }, {
        filter: ["width", "items", "settings"],
        run: function run(a) {
            var b = this._coordinates.length,
                c = !this.settings.autoWidth,
                d = this.$stage.children();
            if (c && a.items.merge)
                for (; b--;) {
                    a.css.width = this._widths[this.relative(b)], d.eq(b).css(a.css);
                } else c && (a.css.width = a.items.width, d.css(a.css));
        }
    }, {
        filter: ["items"],
        run: function run() {
            this._coordinates.length < 1 && this.$stage.removeAttr("style");
        }
    }, {
        filter: ["width", "items", "settings"],
        run: function run(a) {
            a.current = a.current ? this.$stage.children().index(a.current) : 0, a.current = Math.max(this.minimum(), Math.min(this.maximum(), a.current)), this.reset(a.current);
        }
    }, {
        filter: ["position"],
        run: function run() {
            this.animate(this.coordinates(this._current));
        }
    }, {
        filter: ["width", "position", "items", "settings"],
        run: function run() {
            var a,
                b,
                c,
                d,
                e = this.settings.rtl ? 1 : -1,
                f = 2 * this.settings.stagePadding,
                g = this.coordinates(this.current()) + f,
                h = g + this.width() * e,
                i = [];

            for (c = 0, d = this._coordinates.length; c < d; c++) {
                a = this._coordinates[c - 1] || 0, b = Math.abs(this._coordinates[c]) + f * e, (this.op(a, "<=", g) && this.op(a, ">", h) || this.op(b, "<", g) && this.op(b, ">", h)) && i.push(c);
            }

            this.$stage.children(".active").removeClass("active"), this.$stage.children(":eq(" + i.join("), :eq(") + ")").addClass("active"), this.$stage.children(".center").removeClass("center"), this.settings.center && this.$stage.children().eq(this.current()).addClass("center");
        }
    }], e.prototype.initializeStage = function () {
        this.$stage = this.$element.find("." + this.settings.stageClass), this.$stage.length || (this.$element.addClass(this.options.loadingClass), this.$stage = a("<" + this.settings.stageElement + ">", {
            "class": this.settings.stageClass
        }).wrap(a("<div/>", {
            "class": this.settings.stageOuterClass
        })), this.$element.append(this.$stage.parent()));
    }, e.prototype.initializeItems = function () {
        var b = this.$element.find(".owl-item");
        if (b.length) return this._items = b.get().map(function (b) {
            return a(b);
        }), this._mergers = this._items.map(function () {
            return 1;
        }), void this.refresh();
        this.replace(this.$element.children().not(this.$stage.parent())), this.isVisible() ? this.refresh() : this.invalidate("width"), this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass);
    }, e.prototype.initialize = function () {
        if (this.enter("initializing"), this.trigger("initialize"), this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl), this.settings.autoWidth && !this.is("pre-loading")) {
            var a, b, c;
            a = this.$element.find("img"), b = this.settings.nestedItemSelector ? "." + this.settings.nestedItemSelector : d, c = this.$element.children(b).width(), a.length && c <= 0 && this.preloadAutoWidthImages(a);
        }

        this.initializeStage(), this.initializeItems(), this.registerEventHandlers(), this.leave("initializing"), this.trigger("initialized");
    }, e.prototype.isVisible = function () {
        return !this.settings.checkVisibility || this.$element.is(":visible");
    }, e.prototype.setup = function () {
        var b = this.viewport(),
            c = this.options.responsive,
            d = -1,
            e = null;
        c ? (a.each(c, function (a) {
            a <= b && a > d && (d = Number(a));
        }), e = a.extend({}, this.options, c[d]), "function" == typeof e.stagePadding && (e.stagePadding = e.stagePadding()), delete e.responsive, e.responsiveClass && this.$element.attr("class", this.$element.attr("class").replace(new RegExp("(" + this.options.responsiveClass + "-)\\S+\\s", "g"), "$1" + d))) : e = a.extend({}, this.options), this.trigger("change", {
            property: {
                name: "settings",
                value: e
            }
        }), this._breakpoint = d, this.settings = e, this.invalidate("settings"), this.trigger("changed", {
            property: {
                name: "settings",
                value: this.settings
            }
        });
    }, e.prototype.optionsLogic = function () {
        this.settings.autoWidth && (this.settings.stagePadding = !1, this.settings.merge = !1);
    }, e.prototype.prepare = function (b) {
        var c = this.trigger("prepare", {
            content: b
        });
        return c.data || (c.data = a("<" + this.settings.itemElement + "/>").addClass(this.options.itemClass).append(b)), this.trigger("prepared", {
            content: c.data
        }), c.data;
    }, e.prototype.update = function () {
        for (var b = 0, c = this._pipe.length, d = a.proxy(function (a) {
            return this[a];
        }, this._invalidated), e = {}; b < c;) {
            (this._invalidated.all || a.grep(this._pipe[b].filter, d).length > 0) && this._pipe[b].run(e), b++;
        }

        this._invalidated = {}, !this.is("valid") && this.enter("valid");
    }, e.prototype.width = function (a) {
        switch (a = a || e.Width.Default) {
            case e.Width.Inner:
            case e.Width.Outer:
                return this._width;

            default:
                return this._width - 2 * this.settings.stagePadding + this.settings.margin;
        }
    }, e.prototype.refresh = function () {
        this.enter("refreshing"), this.trigger("refresh"), this.setup(), this.optionsLogic(), this.$element.addClass(this.options.refreshClass), this.update(), this.$element.removeClass(this.options.refreshClass), this.leave("refreshing"), this.trigger("refreshed");
    }, e.prototype.onThrottledResize = function () {
        b.clearTimeout(this.resizeTimer), this.resizeTimer = b.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate);
    }, e.prototype.onResize = function () {
        return !!this._items.length && this._width !== this.$element.width() && !!this.isVisible() && (this.enter("resizing"), this.trigger("resize").isDefaultPrevented() ? (this.leave("resizing"), !1) : (this.invalidate("width"), this.refresh(), this.leave("resizing"), void this.trigger("resized")));
    }, e.prototype.registerEventHandlers = function () {
        a.support.transition && this.$stage.on(a.support.transition.end + ".owl.core", a.proxy(this.onTransitionEnd, this)), !1 !== this.settings.responsive && this.on(b, "resize", this._handlers.onThrottledResize), this.settings.mouseDrag && (this.$element.addClass(this.options.dragClass), this.$stage.on("mousedown.owl.core", a.proxy(this.onDragStart, this)), this.$stage.on("dragstart.owl.core selectstart.owl.core", function () {
            return !1;
        })), this.settings.touchDrag && (this.$stage.on("touchstart.owl.core", a.proxy(this.onDragStart, this)), this.$stage.on("touchcancel.owl.core", a.proxy(this.onDragEnd, this)));
    }, e.prototype.onDragStart = function (b) {
        var d = null;
        3 !== b.which && (a.support.transform ? (d = this.$stage.css("transform").replace(/.*\(|\)| /g, "").split(","), d = {
            x: d[16 === d.length ? 12 : 4],
            y: d[16 === d.length ? 13 : 5]
        }) : (d = this.$stage.position(), d = {
            x: this.settings.rtl ? d.left + this.$stage.width() - this.width() + this.settings.margin : d.left,
            y: d.top
        }), this.is("animating") && (a.support.transform ? this.animate(d.x) : this.$stage.stop(), this.invalidate("position")), this.$element.toggleClass(this.options.grabClass, "mousedown" === b.type), this.speed(0), this._drag.time = new Date().getTime(), this._drag.target = a(b.target), this._drag.stage.start = d, this._drag.stage.current = d, this._drag.pointer = this.pointer(b), a(c).on("mouseup.owl.core touchend.owl.core", a.proxy(this.onDragEnd, this)), a(c).one("mousemove.owl.core touchmove.owl.core", a.proxy(function (b) {
            var d = this.difference(this._drag.pointer, this.pointer(b));
            a(c).on("mousemove.owl.core touchmove.owl.core", a.proxy(this.onDragMove, this)), Math.abs(d.x) < Math.abs(d.y) && this.is("valid") || (b.preventDefault(), this.enter("dragging"), this.trigger("drag"));
        }, this)));
    }, e.prototype.onDragMove = function (a) {
        var b = null,
            c = null,
            d = null,
            e = this.difference(this._drag.pointer, this.pointer(a)),
            f = this.difference(this._drag.stage.start, e);
        this.is("dragging") && (a.preventDefault(), this.settings.loop ? (b = this.coordinates(this.minimum()), c = this.coordinates(this.maximum() + 1) - b, f.x = ((f.x - b) % c + c) % c + b) : (b = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum()), c = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum()), d = this.settings.pullDrag ? -1 * e.x / 5 : 0, f.x = Math.max(Math.min(f.x, b + d), c + d)), this._drag.stage.current = f, this.animate(f.x));
    }, e.prototype.onDragEnd = function (b) {
        var d = this.difference(this._drag.pointer, this.pointer(b)),
            e = this._drag.stage.current,
            f = d.x > 0 ^ this.settings.rtl ? "left" : "right";
        a(c).off(".owl.core"), this.$element.removeClass(this.options.grabClass), (0 !== d.x && this.is("dragging") || !this.is("valid")) && (this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed), this.current(this.closest(e.x, 0 !== d.x ? f : this._drag.direction)), this.invalidate("position"), this.update(), this._drag.direction = f, (Math.abs(d.x) > 3 || new Date().getTime() - this._drag.time > 300) && this._drag.target.one("click.owl.core", function () {
            return !1;
        })), this.is("dragging") && (this.leave("dragging"), this.trigger("dragged"));
    }, e.prototype.closest = function (b, c) {
        var e = -1,
            f = 30,
            g = this.width(),
            h = this.coordinates();
        return this.settings.freeDrag || a.each(h, a.proxy(function (a, i) {
            return "left" === c && b > i - f && b < i + f ? e = a : "right" === c && b > i - g - f && b < i - g + f ? e = a + 1 : this.op(b, "<", i) && this.op(b, ">", h[a + 1] !== d ? h[a + 1] : i - g) && (e = "left" === c ? a + 1 : a), -1 === e;
        }, this)), this.settings.loop || (this.op(b, ">", h[this.minimum()]) ? e = b = this.minimum() : this.op(b, "<", h[this.maximum()]) && (e = b = this.maximum())), e;
    }, e.prototype.animate = function (b) {
        var c = this.speed() > 0;
        this.is("animating") && this.onTransitionEnd(), c && (this.enter("animating"), this.trigger("translate")), a.support.transform3d && a.support.transition ? this.$stage.css({
            transform: "translate3d(" + b + "px,0px,0px)",
            transition: this.speed() / 1e3 + "s" + (this.settings.slideTransition ? " " + this.settings.slideTransition : "")
        }) : c ? this.$stage.animate({
            left: b + "px"
        }, this.speed(), this.settings.fallbackEasing, a.proxy(this.onTransitionEnd, this)) : this.$stage.css({
            left: b + "px"
        });
    }, e.prototype.is = function (a) {
        return this._states.current[a] && this._states.current[a] > 0;
    }, e.prototype.current = function (a) {
        if (a === d) return this._current;
        if (0 === this._items.length) return d;

        if (a = this.normalize(a), this._current !== a) {
            var b = this.trigger("change", {
                property: {
                    name: "position",
                    value: a
                }
            });
            b.data !== d && (a = this.normalize(b.data)), this._current = a, this.invalidate("position"), this.trigger("changed", {
                property: {
                    name: "position",
                    value: this._current
                }
            });
        }

        return this._current;
    }, e.prototype.invalidate = function (b) {
        return "string" === a.type(b) && (this._invalidated[b] = !0, this.is("valid") && this.leave("valid")), a.map(this._invalidated, function (a, b) {
            return b;
        });
    }, e.prototype.reset = function (a) {
        (a = this.normalize(a)) !== d && (this._speed = 0, this._current = a, this.suppress(["translate", "translated"]), this.animate(this.coordinates(a)), this.release(["translate", "translated"]));
    }, e.prototype.normalize = function (a, b) {
        var c = this._items.length,
            e = b ? 0 : this._clones.length;
        return !this.isNumeric(a) || c < 1 ? a = d : (a < 0 || a >= c + e) && (a = ((a - e / 2) % c + c) % c + e / 2), a;
    }, e.prototype.relative = function (a) {
        return a -= this._clones.length / 2, this.normalize(a, !0);
    }, e.prototype.maximum = function (a) {
        var b,
            c,
            d,
            e = this.settings,
            f = this._coordinates.length;
        if (e.loop) f = this._clones.length / 2 + this._items.length - 1;
        else if (e.autoWidth || e.merge) {
            if (b = this._items.length)
                for (c = this._items[--b].width(), d = this.$element.width(); b-- && !((c += this._items[b].width() + this.settings.margin) > d);) {
                    ;
                }
            f = b + 1;
        } else f = e.center ? this._items.length - 1 : this._items.length - e.items;
        return a && (f -= this._clones.length / 2), Math.max(f, 0);
    }, e.prototype.minimum = function (a) {
        return a ? 0 : this._clones.length / 2;
    }, e.prototype.items = function (a) {
        return a === d ? this._items.slice() : (a = this.normalize(a, !0), this._items[a]);
    }, e.prototype.mergers = function (a) {
        return a === d ? this._mergers.slice() : (a = this.normalize(a, !0), this._mergers[a]);
    }, e.prototype.clones = function (b) {
        var c = this._clones.length / 2,
            e = c + this._items.length,
            f = function f(a) {
                return a % 2 == 0 ? e + a / 2 : c - (a + 1) / 2;
            };

        return b === d ? a.map(this._clones, function (a, b) {
            return f(b);
        }) : a.map(this._clones, function (a, c) {
            return a === b ? f(c) : null;
        });
    }, e.prototype.speed = function (a) {
        return a !== d && (this._speed = a), this._speed;
    }, e.prototype.coordinates = function (b) {
        var c,
            e = 1,
            f = b - 1;
        return b === d ? a.map(this._coordinates, a.proxy(function (a, b) {
            return this.coordinates(b);
        }, this)) : (this.settings.center ? (this.settings.rtl && (e = -1, f = b + 1), c = this._coordinates[b], c += (this.width() - c + (this._coordinates[f] || 0)) / 2 * e) : c = this._coordinates[f] || 0, c = Math.ceil(c));
    }, e.prototype.duration = function (a, b, c) {
        return 0 === c ? 0 : Math.min(Math.max(Math.abs(b - a), 1), 6) * Math.abs(c || this.settings.smartSpeed);
    }, e.prototype.to = function (a, b) {
        var c = this.current(),
            d = null,
            e = a - this.relative(c),
            f = (e > 0) - (e < 0),
            g = this._items.length,
            h = this.minimum(),
            i = this.maximum();
        this.settings.loop ? (!this.settings.rewind && Math.abs(e) > g / 2 && (e += -1 * f * g), a = c + e, (d = ((a - h) % g + g) % g + h) !== a && d - e <= i && d - e > 0 && (c = d - e, a = d, this.reset(c))) : this.settings.rewind ? (i += 1, a = (a % i + i) % i) : a = Math.max(h, Math.min(i, a)), this.speed(this.duration(c, a, b)), this.current(a), this.isVisible() && this.update();
    }, e.prototype.next = function (a) {
        a = a || !1, this.to(this.relative(this.current()) + 1, a);
    }, e.prototype.prev = function (a) {
        a = a || !1, this.to(this.relative(this.current()) - 1, a);
    }, e.prototype.onTransitionEnd = function (a) {
        if (a !== d && (a.stopPropagation(), (a.target || a.srcElement || a.originalTarget) !== this.$stage.get(0))) return !1;
        this.leave("animating"), this.trigger("translated");
    }, e.prototype.viewport = function () {
        var d;
        return this.options.responsiveBaseElement !== b ? d = a(this.options.responsiveBaseElement).width() : b.innerWidth ? d = b.innerWidth : c.documentElement && c.documentElement.clientWidth ? d = c.documentElement.clientWidth : console.warn("Can not detect viewport width."), d;
    }, e.prototype.replace = function (b) {
        this.$stage.empty(), this._items = [], b && (b = b instanceof jQuery ? b : a(b)), this.settings.nestedItemSelector && (b = b.find("." + this.settings.nestedItemSelector)), b.filter(function () {
            return 1 === this.nodeType;
        }).each(a.proxy(function (a, b) {
            b = this.prepare(b), this.$stage.append(b), this._items.push(b), this._mergers.push(1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1);
        }, this)), this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0), this.invalidate("items");
    }, e.prototype.add = function (b, c) {
        var e = this.relative(this._current);
        c = c === d ? this._items.length : this.normalize(c, !0), b = b instanceof jQuery ? b : a(b), this.trigger("add", {
            content: b,
            position: c
        }), b = this.prepare(b), 0 === this._items.length || c === this._items.length ? (0 === this._items.length && this.$stage.append(b), 0 !== this._items.length && this._items[c - 1].after(b), this._items.push(b), this._mergers.push(1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1)) : (this._items[c].before(b), this._items.splice(c, 0, b), this._mergers.splice(c, 0, 1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1)), this._items[e] && this.reset(this._items[e].index()), this.invalidate("items"), this.trigger("added", {
            content: b,
            position: c
        });
    }, e.prototype.remove = function (a) {
        (a = this.normalize(a, !0)) !== d && (this.trigger("remove", {
            content: this._items[a],
            position: a
        }), this._items[a].remove(), this._items.splice(a, 1), this._mergers.splice(a, 1), this.invalidate("items"), this.trigger("removed", {
            content: null,
            position: a
        }));
    }, e.prototype.preloadAutoWidthImages = function (b) {
        b.each(a.proxy(function (b, c) {
            this.enter("pre-loading"), c = a(c), a(new Image()).one("load", a.proxy(function (a) {
                c.attr("src", a.target.src), c.css("opacity", 1), this.leave("pre-loading"), !this.is("pre-loading") && !this.is("initializing") && this.refresh();
            }, this)).attr("src", c.attr("src") || c.attr("data-src") || c.attr("data-src-retina"));
        }, this));
    }, e.prototype.destroy = function () {
        this.$element.off(".owl.core"), this.$stage.off(".owl.core"), a(c).off(".owl.core"), !1 !== this.settings.responsive && (b.clearTimeout(this.resizeTimer), this.off(b, "resize", this._handlers.onThrottledResize));

        for (var d in this._plugins) {
            this._plugins[d].destroy();
        }

        this.$stage.children(".cloned").remove(), this.$stage.unwrap(), this.$stage.children().contents().unwrap(), this.$stage.children().unwrap(), this.$stage.remove(), this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class", this.$element.attr("class").replace(new RegExp(this.options.responsiveClass + "-\\S+\\s", "g"), "")).removeData("owl.carousel");
    }, e.prototype.op = function (a, b, c) {
        var d = this.settings.rtl;

        switch (b) {
            case "<":
                return d ? a > c : a < c;

            case ">":
                return d ? a < c : a > c;

            case ">=":
                return d ? a <= c : a >= c;

            case "<=":
                return d ? a >= c : a <= c;
        }
    }, e.prototype.on = function (a, b, c, d) {
        a.addEventListener ? a.addEventListener(b, c, d) : a.attachEvent && a.attachEvent("on" + b, c);
    }, e.prototype.off = function (a, b, c, d) {
        a.removeEventListener ? a.removeEventListener(b, c, d) : a.detachEvent && a.detachEvent("on" + b, c);
    }, e.prototype.trigger = function (b, c, d, f, g) {
        var h = {
                item: {
                    count: this._items.length,
                    index: this.current()
                }
            },
            i = a.camelCase(a.grep(["on", b, d], function (a) {
                return a;
            }).join("-").toLowerCase()),
            j = a.Event([b, "owl", d || "carousel"].join(".").toLowerCase(), a.extend({
                relatedTarget: this
            }, h, c));
        return this._supress[b] || (a.each(this._plugins, function (a, b) {
            b.onTrigger && b.onTrigger(j);
        }), this.register({
            type: e.Type.Event,
            name: b
        }), this.$element.trigger(j), this.settings && "function" == typeof this.settings[i] && this.settings[i].call(this, j)), j;
    }, e.prototype.enter = function (b) {
        a.each([b].concat(this._states.tags[b] || []), a.proxy(function (a, b) {
            this._states.current[b] === d && (this._states.current[b] = 0), this._states.current[b]++;
        }, this));
    }, e.prototype.leave = function (b) {
        a.each([b].concat(this._states.tags[b] || []), a.proxy(function (a, b) {
            this._states.current[b]--;
        }, this));
    }, e.prototype.register = function (b) {
        if (b.type === e.Type.Event) {
            if (a.event.special[b.name] || (a.event.special[b.name] = {}), !a.event.special[b.name].owl) {
                var c = a.event.special[b.name]._default;
                a.event.special[b.name]._default = function (a) {
                    return !c || !c.apply || a.namespace && -1 !== a.namespace.indexOf("owl") ? a.namespace && a.namespace.indexOf("owl") > -1 : c.apply(this, arguments);
                }, a.event.special[b.name].owl = !0;
            }
        } else b.type === e.Type.State && (this._states.tags[b.name] ? this._states.tags[b.name] = this._states.tags[b.name].concat(b.tags) : this._states.tags[b.name] = b.tags, this._states.tags[b.name] = a.grep(this._states.tags[b.name], a.proxy(function (c, d) {
            return a.inArray(c, this._states.tags[b.name]) === d;
        }, this)));
    }, e.prototype.suppress = function (b) {
        a.each(b, a.proxy(function (a, b) {
            this._supress[b] = !0;
        }, this));
    }, e.prototype.release = function (b) {
        a.each(b, a.proxy(function (a, b) {
            delete this._supress[b];
        }, this));
    }, e.prototype.pointer = function (a) {
        var c = {
            x: null,
            y: null
        };
        return a = a.originalEvent || a || b.event, a = a.touches && a.touches.length ? a.touches[0] : a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : a, a.pageX ? (c.x = a.pageX, c.y = a.pageY) : (c.x = a.clientX, c.y = a.clientY), c;
    }, e.prototype.isNumeric = function (a) {
        return !isNaN(parseFloat(a));
    }, e.prototype.difference = function (a, b) {
        return {
            x: a.x - b.x,
            y: a.y - b.y
        };
    }, a.fn.owlCarousel = function (b) {
        var c = Array.prototype.slice.call(arguments, 1);
        return this.each(function () {
            var d = a(this),
                f = d.data("owl.carousel");
            f || (f = new e(this, "object" == _typeof(b) && b), d.data("owl.carousel", f), a.each(["next", "prev", "to", "destroy", "refresh", "replace", "add", "remove"], function (b, c) {
                f.register({
                    type: e.Type.Event,
                    name: c
                }), f.$element.on(c + ".owl.carousel.core", a.proxy(function (a) {
                    a.namespace && a.relatedTarget !== this && (this.suppress([c]), f[c].apply(this, [].slice.call(arguments, 1)), this.release([c]));
                }, f));
            })), "string" == typeof b && "_" !== b.charAt(0) && f[b].apply(f, c);
        });
    }, a.fn.owlCarousel.Constructor = e;
}(window.Zepto || window.jQuery, window, document),
    function (a, b, c, d) {
        var e = function e(b) {
            this._core = b, this._interval = null, this._visible = null, this._handlers = {
                "initialized.owl.carousel": a.proxy(function (a) {
                    a.namespace && this._core.settings.autoRefresh && this.watch();
                }, this)
            }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers);
        };

        e.Defaults = {
            autoRefresh: !0,
            autoRefreshInterval: 500
        }, e.prototype.watch = function () {
            this._interval || (this._visible = this._core.isVisible(), this._interval = b.setInterval(a.proxy(this.refresh, this), this._core.settings.autoRefreshInterval));
        }, e.prototype.refresh = function () {
            this._core.isVisible() !== this._visible && (this._visible = !this._visible, this._core.$element.toggleClass("owl-hidden", !this._visible), this._visible && this._core.invalidate("width") && this._core.refresh());
        }, e.prototype.destroy = function () {
            var a, c;
            b.clearInterval(this._interval);

            for (a in this._handlers) {
                this._core.$element.off(a, this._handlers[a]);
            }

            for (c in Object.getOwnPropertyNames(this)) {
                "function" != typeof this[c] && (this[c] = null);
            }
        }, a.fn.owlCarousel.Constructor.Plugins.AutoRefresh = e;
    }(window.Zepto || window.jQuery, window, document),
    function (a, b, c, d) {
        var e = function e(b) {
            this._core = b, this._loaded = [], this._handlers = {
                "initialized.owl.carousel change.owl.carousel resized.owl.carousel": a.proxy(function (b) {
                    if (b.namespace && this._core.settings && this._core.settings.lazyLoad && (b.property && "position" == b.property.name || "initialized" == b.type)) {
                        var c = this._core.settings,
                            e = c.center && Math.ceil(c.items / 2) || c.items,
                            f = c.center && -1 * e || 0,
                            g = (b.property && b.property.value !== d ? b.property.value : this._core.current()) + f,
                            h = this._core.clones().length,
                            i = a.proxy(function (a, b) {
                                this.load(b);
                            }, this);

                        for (c.lazyLoadEager > 0 && (e += c.lazyLoadEager, c.loop && (g -= c.lazyLoadEager, e++)); f++ < e;) {
                            this.load(h / 2 + this._core.relative(g)), h && a.each(this._core.clones(this._core.relative(g)), i), g++;
                        }
                    }
                }, this)
            }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers);
        };

        e.Defaults = {
            lazyLoad: !1,
            lazyLoadEager: 0
        }, e.prototype.load = function (c) {
            var d = this._core.$stage.children().eq(c),
                e = d && d.find(".owl-lazy");

            !e || a.inArray(d.get(0), this._loaded) > -1 || (e.each(a.proxy(function (c, d) {
                var e,
                    f = a(d),
                    g = b.devicePixelRatio > 1 && f.attr("data-src-retina") || f.attr("data-src") || f.attr("data-srcset");
                this._core.trigger("load", {
                    element: f,
                    url: g
                }, "lazy"), f.is("img") ? f.one("load.owl.lazy", a.proxy(function () {
                    f.css("opacity", 1), this._core.trigger("loaded", {
                        element: f,
                        url: g
                    }, "lazy");
                }, this)).attr("src", g) : f.is("source") ? f.one("load.owl.lazy", a.proxy(function () {
                    this._core.trigger("loaded", {
                        element: f,
                        url: g
                    }, "lazy");
                }, this)).attr("srcset", g) : (e = new Image(), e.onload = a.proxy(function () {
                    f.css({
                        "background-image": 'url("' + g + '")',
                        opacity: "1"
                    }), this._core.trigger("loaded", {
                        element: f,
                        url: g
                    }, "lazy");
                }, this), e.src = g);
            }, this)), this._loaded.push(d.get(0)));
        }, e.prototype.destroy = function () {
            var a, b;

            for (a in this.handlers) {
                this._core.$element.off(a, this.handlers[a]);
            }

            for (b in Object.getOwnPropertyNames(this)) {
                "function" != typeof this[b] && (this[b] = null);
            }
        }, a.fn.owlCarousel.Constructor.Plugins.Lazy = e;
    }(window.Zepto || window.jQuery, window, document),
    function (a, b, c, d) {
        var e = function e(c) {
            this._core = c, this._previousHeight = null, this._handlers = {
                "initialized.owl.carousel refreshed.owl.carousel": a.proxy(function (a) {
                    a.namespace && this._core.settings.autoHeight && this.update();
                }, this),
                "changed.owl.carousel": a.proxy(function (a) {
                    a.namespace && this._core.settings.autoHeight && "position" === a.property.name && this.update();
                }, this),
                "loaded.owl.lazy": a.proxy(function (a) {
                    a.namespace && this._core.settings.autoHeight && a.element.closest("." + this._core.settings.itemClass).index() === this._core.current() && this.update();
                }, this)
            }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers), this._intervalId = null;
            var d = this;
            a(b).on("load", function () {
                d._core.settings.autoHeight && d.update();
            }), a(b).resize(function () {
                d._core.settings.autoHeight && (null != d._intervalId && clearTimeout(d._intervalId), d._intervalId = setTimeout(function () {
                    d.update();
                }, 250));
            });
        };

        e.Defaults = {
            autoHeight: !1,
            autoHeightClass: "owl-height"
        }, e.prototype.update = function () {
            var b = this._core._current,
                c = b + this._core.settings.items,
                d = this._core.settings.lazyLoad,
                e = this._core.$stage.children().toArray().slice(b, c),
                f = [],
                g = 0;

            a.each(e, function (b, c) {
                f.push(a(c).height());
            }), g = Math.max.apply(null, f), g <= 1 && d && this._previousHeight && (g = this._previousHeight), this._previousHeight = g, this._core.$stage.parent().height(g).addClass(this._core.settings.autoHeightClass);
        }, e.prototype.destroy = function () {
            var a, b;

            for (a in this._handlers) {
                this._core.$element.off(a, this._handlers[a]);
            }

            for (b in Object.getOwnPropertyNames(this)) {
                "function" != typeof this[b] && (this[b] = null);
            }
        }, a.fn.owlCarousel.Constructor.Plugins.AutoHeight = e;
    }(window.Zepto || window.jQuery, window, document),
    function (a, b, c, d) {
        var e = function e(b) {
            this._core = b, this._videos = {}, this._playing = null, this._handlers = {
                "initialized.owl.carousel": a.proxy(function (a) {
                    a.namespace && this._core.register({
                        type: "state",
                        name: "playing",
                        tags: ["interacting"]
                    });
                }, this),
                "resize.owl.carousel": a.proxy(function (a) {
                    a.namespace && this._core.settings.video && this.isInFullScreen() && a.preventDefault();
                }, this),
                "refreshed.owl.carousel": a.proxy(function (a) {
                    a.namespace && this._core.is("resizing") && this._core.$stage.find(".cloned .owl-video-frame").remove();
                }, this),
                "changed.owl.carousel": a.proxy(function (a) {
                    a.namespace && "position" === a.property.name && this._playing && this.stop();
                }, this),
                "prepared.owl.carousel": a.proxy(function (b) {
                    if (b.namespace) {
                        var c = a(b.content).find(".owl-video");
                        c.length && (c.css("display", "none"), this.fetch(c, a(b.content)));
                    }
                }, this)
            }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers), this._core.$element.on("click.owl.video", ".owl-video-play-icon", a.proxy(function (a) {
                this.play(a);
            }, this));
        };

        e.Defaults = {
            video: !1,
            videoHeight: !1,
            videoWidth: !1
        }, e.prototype.fetch = function (a, b) {
            var c = function () {
                    return a.attr("data-vimeo-id") ? "vimeo" : a.attr("data-vzaar-id") ? "vzaar" : "youtube";
                }(),
                d = a.attr("data-vimeo-id") || a.attr("data-youtube-id") || a.attr("data-vzaar-id"),
                e = a.attr("data-width") || this._core.settings.videoWidth,
                f = a.attr("data-height") || this._core.settings.videoHeight,
                g = a.attr("href");

            if (!g) throw new Error("Missing video URL.");
            if (d = g.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com|be\-nocookie\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/), d[3].indexOf("youtu") > -1) c = "youtube";
            else if (d[3].indexOf("vimeo") > -1) c = "vimeo";
            else {
                if (!(d[3].indexOf("vzaar") > -1)) throw new Error("Video URL not supported.");
                c = "vzaar";
            }
            d = d[6], this._videos[g] = {
                type: c,
                id: d,
                width: e,
                height: f
            }, b.attr("data-video", g), this.thumbnail(a, this._videos[g]);
        }, e.prototype.thumbnail = function (b, c) {
            var d,
                e,
                f,
                g = c.width && c.height ? "width:" + c.width + "px;height:" + c.height + "px;" : "",
                h = b.find("img"),
                i = "src",
                j = "",
                k = this._core.settings,
                l = function l(c) {
                    e = '<div class="owl-video-play-icon"></div>', d = k.lazyLoad ? a("<div/>", {
                        "class": "owl-video-tn " + j,
                        srcType: c
                    }) : a("<div/>", {
                        "class": "owl-video-tn",
                        style: "opacity:1;background-image:url(" + c + ")"
                    }), b.after(d), b.after(e);
                };

            if (b.wrap(a("<div/>", {
                "class": "owl-video-wrapper",
                style: g
            })), this._core.settings.lazyLoad && (i = "data-src", j = "owl-lazy"), h.length) return l(h.attr(i)), h.remove(), !1;
            "youtube" === c.type ? (f = "//img.youtube.com/vi/" + c.id + "/hqdefault.jpg", l(f)) : "vimeo" === c.type ? a.ajax({
                type: "GET",
                url: "//vimeo.com/api/v2/video/" + c.id + ".json",
                jsonp: "callback",
                dataType: "jsonp",
                success: function success(a) {
                    f = a[0].thumbnail_large, l(f);
                }
            }) : "vzaar" === c.type && a.ajax({
                type: "GET",
                url: "//vzaar.com/api/videos/" + c.id + ".json",
                jsonp: "callback",
                dataType: "jsonp",
                success: function success(a) {
                    f = a.framegrab_url, l(f);
                }
            });
        }, e.prototype.stop = function () {
            this._core.trigger("stop", null, "video"), this._playing.find(".owl-video-frame").remove(), this._playing.removeClass("owl-video-playing"), this._playing = null, this._core.leave("playing"), this._core.trigger("stopped", null, "video");
        }, e.prototype.play = function (b) {
            var c,
                d = a(b.target),
                e = d.closest("." + this._core.settings.itemClass),
                f = this._videos[e.attr("data-video")],
                g = f.width || "100%",
                h = f.height || this._core.$stage.height();

            this._playing || (this._core.enter("playing"), this._core.trigger("play", null, "video"), e = this._core.items(this._core.relative(e.index())), this._core.reset(e.index()), c = a('<iframe frameborder="0" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>'), c.attr("height", h), c.attr("width", g), "youtube" === f.type ? c.attr("src", "//www.youtube.com/embed/" + f.id + "?autoplay=1&rel=0&v=" + f.id) : "vimeo" === f.type ? c.attr("src", "//player.vimeo.com/video/" + f.id + "?autoplay=1") : "vzaar" === f.type && c.attr("src", "//view.vzaar.com/" + f.id + "/player?autoplay=true"), a(c).wrap('<div class="owl-video-frame" />').insertAfter(e.find(".owl-video")), this._playing = e.addClass("owl-video-playing"));
        }, e.prototype.isInFullScreen = function () {
            var b = c.fullscreenElement || c.mozFullScreenElement || c.webkitFullscreenElement;
            return b && a(b).parent().hasClass("owl-video-frame");
        }, e.prototype.destroy = function () {
            var a, b;

            this._core.$element.off("click.owl.video");

            for (a in this._handlers) {
                this._core.$element.off(a, this._handlers[a]);
            }

            for (b in Object.getOwnPropertyNames(this)) {
                "function" != typeof this[b] && (this[b] = null);
            }
        }, a.fn.owlCarousel.Constructor.Plugins.Video = e;
    }(window.Zepto || window.jQuery, window, document),
    function (a, b, c, d) {
        var e = function e(b) {
            this.core = b, this.core.options = a.extend({}, e.Defaults, this.core.options), this.swapping = !0, this.previous = d, this.next = d, this.handlers = {
                "change.owl.carousel": a.proxy(function (a) {
                    a.namespace && "position" == a.property.name && (this.previous = this.core.current(), this.next = a.property.value);
                }, this),
                "drag.owl.carousel dragged.owl.carousel translated.owl.carousel": a.proxy(function (a) {
                    a.namespace && (this.swapping = "translated" == a.type);
                }, this),
                "translate.owl.carousel": a.proxy(function (a) {
                    a.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn) && this.swap();
                }, this)
            }, this.core.$element.on(this.handlers);
        };

        e.Defaults = {
            animateOut: !1,
            animateIn: !1
        }, e.prototype.swap = function () {
            if (1 === this.core.settings.items && a.support.animation && a.support.transition) {
                this.core.speed(0);
                var b,
                    c = a.proxy(this.clear, this),
                    d = this.core.$stage.children().eq(this.previous),
                    e = this.core.$stage.children().eq(this.next),
                    f = this.core.settings.animateIn,
                    g = this.core.settings.animateOut;
                this.core.current() !== this.previous && (g && (b = this.core.coordinates(this.previous) - this.core.coordinates(this.next), d.one(a.support.animation.end, c).css({
                    left: b + "px"
                }).addClass("animated owl-animated-out").addClass(g)), f && e.one(a.support.animation.end, c).addClass("animated owl-animated-in").addClass(f));
            }
        }, e.prototype.clear = function (b) {
            a(b.target).css({
                left: ""
            }).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut), this.core.onTransitionEnd();
        }, e.prototype.destroy = function () {
            var a, b;

            for (a in this.handlers) {
                this.core.$element.off(a, this.handlers[a]);
            }

            for (b in Object.getOwnPropertyNames(this)) {
                "function" != typeof this[b] && (this[b] = null);
            }
        }, a.fn.owlCarousel.Constructor.Plugins.Animate = e;
    }(window.Zepto || window.jQuery, window, document),
    function (a, b, c, d) {
        var e = function e(b) {
            this._core = b, this._call = null, this._time = 0, this._timeout = 0, this._paused = !0, this._handlers = {
                "changed.owl.carousel": a.proxy(function (a) {
                    a.namespace && "settings" === a.property.name ? this._core.settings.autoplay ? this.play() : this.stop() : a.namespace && "position" === a.property.name && this._paused && (this._time = 0);
                }, this),
                "initialized.owl.carousel": a.proxy(function (a) {
                    a.namespace && this._core.settings.autoplay && this.play();
                }, this),
                "play.owl.autoplay": a.proxy(function (a, b, c) {
                    a.namespace && this.play(b, c);
                }, this),
                "stop.owl.autoplay": a.proxy(function (a) {
                    a.namespace && this.stop();
                }, this),
                "mouseover.owl.autoplay": a.proxy(function () {
                    this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.pause();
                }, this),
                "mouseleave.owl.autoplay": a.proxy(function () {
                    this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.play();
                }, this),
                "touchstart.owl.core": a.proxy(function () {
                    this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.pause();
                }, this),
                "touchend.owl.core": a.proxy(function () {
                    this._core.settings.autoplayHoverPause && this.play();
                }, this)
            }, this._core.$element.on(this._handlers), this._core.options = a.extend({}, e.Defaults, this._core.options);
        };

        e.Defaults = {
            autoplay: !1,
            autoplayTimeout: 5e3,
            autoplayHoverPause: !1,
            autoplaySpeed: !1
        }, e.prototype._next = function (d) {
            this._call = b.setTimeout(a.proxy(this._next, this, d), this._timeout * (Math.round(this.read() / this._timeout) + 1) - this.read()), this._core.is("interacting") || c.hidden || this._core.next(d || this._core.settings.autoplaySpeed);
        }, e.prototype.read = function () {
            return new Date().getTime() - this._time;
        }, e.prototype.play = function (c, d) {
            var e;
            this._core.is("rotating") || this._core.enter("rotating"), c = c || this._core.settings.autoplayTimeout, e = Math.min(this._time % (this._timeout || c), c), this._paused ? (this._time = this.read(), this._paused = !1) : b.clearTimeout(this._call), this._time += this.read() % c - e, this._timeout = c, this._call = b.setTimeout(a.proxy(this._next, this, d), c - e);
        }, e.prototype.stop = function () {
            this._core.is("rotating") && (this._time = 0, this._paused = !0, b.clearTimeout(this._call), this._core.leave("rotating"));
        }, e.prototype.pause = function () {
            this._core.is("rotating") && !this._paused && (this._time = this.read(), this._paused = !0, b.clearTimeout(this._call));
        }, e.prototype.destroy = function () {
            var a, b;
            this.stop();

            for (a in this._handlers) {
                this._core.$element.off(a, this._handlers[a]);
            }

            for (b in Object.getOwnPropertyNames(this)) {
                "function" != typeof this[b] && (this[b] = null);
            }
        }, a.fn.owlCarousel.Constructor.Plugins.autoplay = e;
    }(window.Zepto || window.jQuery, window, document),
    function (a, b, c, d) {
        "use strict";

        var e = function e(b) {
            this._core = b, this._initialized = !1, this._pages = [], this._controls = {}, this._templates = [], this.$element = this._core.$element, this._overrides = {
                next: this._core.next,
                prev: this._core.prev,
                to: this._core.to
            }, this._handlers = {
                "prepared.owl.carousel": a.proxy(function (b) {
                    b.namespace && this._core.settings.dotsData && this._templates.push('<div class="' + this._core.settings.dotClass + '">' + a(b.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot") + "</div>");
                }, this),
                "added.owl.carousel": a.proxy(function (a) {
                    a.namespace && this._core.settings.dotsData && this._templates.splice(a.position, 0, this._templates.pop());
                }, this),
                "remove.owl.carousel": a.proxy(function (a) {
                    a.namespace && this._core.settings.dotsData && this._templates.splice(a.position, 1);
                }, this),
                "changed.owl.carousel": a.proxy(function (a) {
                    a.namespace && "position" == a.property.name && this.draw();
                }, this),
                "initialized.owl.carousel": a.proxy(function (a) {
                    a.namespace && !this._initialized && (this._core.trigger("initialize", null, "navigation"), this.initialize(), this.update(), this.draw(), this._initialized = !0, this._core.trigger("initialized", null, "navigation"));
                }, this),
                "refreshed.owl.carousel": a.proxy(function (a) {
                    a.namespace && this._initialized && (this._core.trigger("refresh", null, "navigation"), this.update(), this.draw(), this._core.trigger("refreshed", null, "navigation"));
                }, this)
            }, this._core.options = a.extend({}, e.Defaults, this._core.options), this.$element.on(this._handlers);
        };

        e.Defaults = {
            nav: !1,
            navText: ['<span aria-label="Previous">&#x2039;</span>', '<span aria-label="Next">&#x203a;</span>'],
            navSpeed: !1,
            navElement: 'button type="button" role="presentation"',
            navContainer: !1,
            navContainerClass: "owl-nav",
            navClass: ["owl-prev", "owl-next"],
            slideBy: 1,
            dotClass: "owl-dot",
            dotsClass: "owl-dots",
            dots: !0,
            dotsEach: !1,
            dotsData: !1,
            dotsSpeed: !1,
            dotsContainer: !1
        }, e.prototype.initialize = function () {
            var b,
                c = this._core.settings;
            this._controls.$relative = (c.navContainer ? a(c.navContainer) : a("<div>").addClass(c.navContainerClass).appendTo(this.$element)).addClass("disabled"), this._controls.$previous = a("<" + c.navElement + ">").addClass(c.navClass[0]).html(c.navText[0]).prependTo(this._controls.$relative).on("click", a.proxy(function (a) {
                this.prev(c.navSpeed);
            }, this)), this._controls.$next = a("<" + c.navElement + ">").addClass(c.navClass[1]).html(c.navText[1]).appendTo(this._controls.$relative).on("click", a.proxy(function (a) {
                this.next(c.navSpeed);
            }, this)), c.dotsData || (this._templates = [a('<button role="button">').addClass(c.dotClass).append(a("<span>")).prop("outerHTML")]), this._controls.$absolute = (c.dotsContainer ? a(c.dotsContainer) : a("<div>").addClass(c.dotsClass).appendTo(this.$element)).addClass("disabled"), this._controls.$absolute.on("click", "button", a.proxy(function (b) {
                var d = a(b.target).parent().is(this._controls.$absolute) ? a(b.target).index() : a(b.target).parent().index();
                b.preventDefault(), this.to(d, c.dotsSpeed);
            }, this));

            for (b in this._overrides) {
                this._core[b] = a.proxy(this[b], this);
            }
        }, e.prototype.destroy = function () {
            var a, b, c, d, e;
            e = this._core.settings;

            for (a in this._handlers) {
                this.$element.off(a, this._handlers[a]);
            }

            for (b in this._controls) {
                "$relative" === b && e.navContainer ? this._controls[b].html("") : this._controls[b].remove();
            }

            for (d in this.overides) {
                this._core[d] = this._overrides[d];
            }

            for (c in Object.getOwnPropertyNames(this)) {
                "function" != typeof this[c] && (this[c] = null);
            }
        }, e.prototype.update = function () {
            var a,
                b,
                c,
                d = this._core.clones().length / 2,
                e = d + this._core.items().length,
                f = this._core.maximum(!0),
                g = this._core.settings,
                h = g.center || g.autoWidth || g.dotsData ? 1 : g.dotsEach || g.items;

            if ("page" !== g.slideBy && (g.slideBy = Math.min(g.slideBy, g.items)), g.dots || "page" == g.slideBy)
                for (this._pages = [], a = d, b = 0, c = 0; a < e; a++) {
                    if (b >= h || 0 === b) {
                        if (this._pages.push({
                            start: Math.min(f, a - d),
                            end: a - d + h - 1
                        }), Math.min(f, a - d) === f) break;
                        b = 0, ++c;
                    }

                    b += this._core.mergers(this._core.relative(a));
                }
        }, e.prototype.draw = function () {
            var b,
                c = this._core.settings,
                d = this._core.items().length <= c.items,
                e = this._core.relative(this._core.current()),
                f = c.loop || c.rewind;

            this._controls.$relative.toggleClass("disabled", !c.nav || d), c.nav && (this._controls.$previous.toggleClass("disabled", !f && e <= this._core.minimum(!0)), this._controls.$next.toggleClass("disabled", !f && e >= this._core.maximum(!0))), this._controls.$absolute.toggleClass("disabled", !c.dots || d), c.dots && (b = this._pages.length - this._controls.$absolute.children().length, c.dotsData && 0 !== b ? this._controls.$absolute.html(this._templates.join("")) : b > 0 ? this._controls.$absolute.append(new Array(b + 1).join(this._templates[0])) : b < 0 && this._controls.$absolute.children().slice(b).remove(), this._controls.$absolute.find(".active").removeClass("active"), this._controls.$absolute.children().eq(a.inArray(this.current(), this._pages)).addClass("active"));
        }, e.prototype.onTrigger = function (b) {
            var c = this._core.settings;
            b.page = {
                index: a.inArray(this.current(), this._pages),
                count: this._pages.length,
                size: c && (c.center || c.autoWidth || c.dotsData ? 1 : c.dotsEach || c.items)
            };
        }, e.prototype.current = function () {
            var b = this._core.relative(this._core.current());

            return a.grep(this._pages, a.proxy(function (a, c) {
                return a.start <= b && a.end >= b;
            }, this)).pop();
        }, e.prototype.getPosition = function (b) {
            var c,
                d,
                e = this._core.settings;
            return "page" == e.slideBy ? (c = a.inArray(this.current(), this._pages), d = this._pages.length, b ? ++c : --c, c = this._pages[(c % d + d) % d].start) : (c = this._core.relative(this._core.current()), d = this._core.items().length, b ? c += e.slideBy : c -= e.slideBy), c;
        }, e.prototype.next = function (b) {
            a.proxy(this._overrides.to, this._core)(this.getPosition(!0), b);
        }, e.prototype.prev = function (b) {
            a.proxy(this._overrides.to, this._core)(this.getPosition(!1), b);
        }, e.prototype.to = function (b, c, d) {
            var e;
            !d && this._pages.length ? (e = this._pages.length, a.proxy(this._overrides.to, this._core)(this._pages[(b % e + e) % e].start, c)) : a.proxy(this._overrides.to, this._core)(b, c);
        }, a.fn.owlCarousel.Constructor.Plugins.Navigation = e;
    }(window.Zepto || window.jQuery, window, document),
    function (a, b, c, d) {
        "use strict";

        var e = function e(c) {
            this._core = c, this._hashes = {}, this.$element = this._core.$element, this._handlers = {
                "initialized.owl.carousel": a.proxy(function (c) {
                    c.namespace && "URLHash" === this._core.settings.startPosition && a(b).trigger("hashchange.owl.navigation");
                }, this),
                "prepared.owl.carousel": a.proxy(function (b) {
                    if (b.namespace) {
                        var c = a(b.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");
                        if (!c) return;
                        this._hashes[c] = b.content;
                    }
                }, this),
                "changed.owl.carousel": a.proxy(function (c) {
                    if (c.namespace && "position" === c.property.name) {
                        var d = this._core.items(this._core.relative(this._core.current())),
                            e = a.map(this._hashes, function (a, b) {
                                return a === d ? b : null;
                            }).join();

                        if (!e || b.location.hash.slice(1) === e) return;
                        b.location.hash = e;
                    }
                }, this)
            }, this._core.options = a.extend({}, e.Defaults, this._core.options), this.$element.on(this._handlers), a(b).on("hashchange.owl.navigation", a.proxy(function (a) {
                var c = b.location.hash.substring(1),
                    e = this._core.$stage.children(),
                    f = this._hashes[c] && e.index(this._hashes[c]);

                f !== d && f !== this._core.current() && this._core.to(this._core.relative(f), !1, !0);
            }, this));
        };

        e.Defaults = {
            URLhashListener: !1
        }, e.prototype.destroy = function () {
            var c, d;
            a(b).off("hashchange.owl.navigation");

            for (c in this._handlers) {
                this._core.$element.off(c, this._handlers[c]);
            }

            for (d in Object.getOwnPropertyNames(this)) {
                "function" != typeof this[d] && (this[d] = null);
            }
        }, a.fn.owlCarousel.Constructor.Plugins.Hash = e;
    }(window.Zepto || window.jQuery, window, document),
    function (a, b, c, d) {
        function e(b, c) {
            var e = !1,
                f = b.charAt(0).toUpperCase() + b.slice(1);
            return a.each((b + " " + h.join(f + " ") + f).split(" "), function (a, b) {
                if (g[b] !== d) return e = !c || b, !1;
            }), e;
        }

        function f(a) {
            return e(a, !0);
        }

        var g = a("<support>").get(0).style,
            h = "Webkit Moz O ms".split(" "),
            i = {
                transition: {
                    end: {
                        WebkitTransition: "webkitTransitionEnd",
                        MozTransition: "transitionend",
                        OTransition: "oTransitionEnd",
                        transition: "transitionend"
                    }
                },
                animation: {
                    end: {
                        WebkitAnimation: "webkitAnimationEnd",
                        MozAnimation: "animationend",
                        OAnimation: "oAnimationEnd",
                        animation: "animationend"
                    }
                }
            },
            j = {
                csstransforms: function csstransforms() {
                    return !!e("transform");
                },
                csstransforms3d: function csstransforms3d() {
                    return !!e("perspective");
                },
                csstransitions: function csstransitions() {
                    return !!e("transition");
                },
                cssanimations: function cssanimations() {
                    return !!e("animation");
                }
            };
        j.csstransitions() && (a.support.transition = new String(f("transition")), a.support.transition.end = i.transition.end[a.support.transition]), j.cssanimations() && (a.support.animation = new String(f("animation")), a.support.animation.end = i.animation.end[a.support.animation]), j.csstransforms() && (a.support.transform = new String(f("transform")), a.support.transform3d = j.csstransforms3d());
    }(window.Zepto || window.jQuery, window, document);
"use strict";

var defaultSettings = 'fa';

(function ($) {
    $.fn.persiaNumber = function (settings) {
        if (typeof settings == 'string' && settings.length > 0) defaultSettings = settings;
        var range = 1728;

        if (settings == 'ar') {
            range = 1584;
        }

        window.persiaNumberedDOM = this;
        convert(this, range);
        $(document).ajaxComplete(function () {
            var thisObj = window.persiaNumberedDOM;
            convert(thisObj, range);
        });

        function convert(obj, range) {
            obj.find("*").addBack().contents().each(function () {
                if (this.nodeType === 3 && this.parentNode.localName != "style" && this.parentNode.localName != "script") {
                    this.nodeValue = this.nodeValue.replace(this.nodeValue.match(/[0-9]*\.[0-9]+/), function (txt) {
                        return txt.replace(/\./, ',');
                    });
                    this.nodeValue = this.nodeValue.replace(/\d/g, function (v) {
                        return String.fromCharCode(v.charCodeAt(0) + range);
                    });
                }
            });
        }
    };
})(jQuery);

var origParseInt = parseInt;

parseInt = function parseInt(str) {
    str = str && str.toString().replace(/[\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9]/g, function (v) {
        return String.fromCharCode(v.charCodeAt(0) - 1728);
    }).replace(/[\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669]/g, function (v) {
        return String.fromCharCode(v.charCodeAt(0) - 1584);
    }).replace(/[\u066B]/g, '.');
    return origParseInt(str);
};

var origParseFloat = parseFloat;

parseFloat = function parseFloat(str) {
    str = str && str.toString().replace(/[\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9]/g, function (v) {
        return String.fromCharCode(v.charCodeAt(0) - 1728);
    }).replace(/[\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669]/g, function (v) {
        return String.fromCharCode(v.charCodeAt(0) - 1584);
    }).replace(/[\u066B]/g, '.');
    return origParseFloat(str);
};
"use strict";

!function () {
    var e = function e(t, i) {
        function s() {
            this.q = [], this.add = function (e) {
                this.q.push(e);
            };
            var e, t;

            this.call = function () {
                for (e = 0, t = this.q.length; e < t; e++) {
                    this.q[e].call();
                }
            };
        }

        function o(e, t) {
            return e.currentStyle ? e.currentStyle[t] : window.getComputedStyle ? window.getComputedStyle(e, null).getPropertyValue(t) : e.style[t];
        }

        function n(e, t) {
            if (e.resizedAttached) {
                if (e.resizedAttached) return void e.resizedAttached.add(t);
            } else e.resizedAttached = new s(), e.resizedAttached.add(t);

            e.resizeSensor = document.createElement("div"), e.resizeSensor.className = "resize-sensor";
            var i = "position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;",
                n = "position: absolute; left: 0; top: 0; transition: 0s;";
            e.resizeSensor.style.cssText = i, e.resizeSensor.innerHTML = '<div class="resize-sensor-expand" style="' + i + '"><div style="' + n + '"></div></div><div class="resize-sensor-shrink" style="' + i + '"><div style="' + n + ' width: 200%; height: 200%"></div></div>', e.appendChild(e.resizeSensor), {
                fixed: 1,
                absolute: 1
            }[o(e, "position")] || (e.style.position = "relative");
            var d,
                r,
                l = e.resizeSensor.childNodes[0],
                c = l.childNodes[0],
                h = e.resizeSensor.childNodes[1],
                a = (h.childNodes[0], function () {
                    c.style.width = l.offsetWidth + 10 + "px", c.style.height = l.offsetHeight + 10 + "px", l.scrollLeft = l.scrollWidth, l.scrollTop = l.scrollHeight, h.scrollLeft = h.scrollWidth, h.scrollTop = h.scrollHeight, d = e.offsetWidth, r = e.offsetHeight;
                });
            a();

            var f = function f() {
                    e.resizedAttached && e.resizedAttached.call();
                },
                u = function u(e, t, i) {
                    e.attachEvent ? e.attachEvent("on" + t, i) : e.addEventListener(t, i);
                },
                p = function p() {
                    e.offsetWidth == d && e.offsetHeight == r || f(), a();
                };

            u(l, "scroll", p), u(h, "scroll", p);
        }

        var d = Object.prototype.toString.call(t),
            r = "[object Array]" === d || "[object NodeList]" === d || "[object HTMLCollection]" === d || "undefined" != typeof jQuery && t instanceof jQuery || "undefined" != typeof Elements && t instanceof Elements;
        if (r)
            for (var l = 0, c = t.length; l < c; l++) {
                n(t[l], i);
            } else n(t, i);

        this.detach = function () {
            if (r)
                for (var i = 0, s = t.length; i < s; i++) {
                    e.detach(t[i]);
                } else e.detach(t);
        };
    };

    e.detach = function (e) {
        e.resizeSensor && (e.removeChild(e.resizeSensor), delete e.resizeSensor, delete e.resizedAttached);
    }, "undefined" != typeof module && "undefined" != typeof module.exports ? module.exports = e : window.ResizeSensor = e;
}();
"use strict";

function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
            return typeof obj;
        };
    } else {
        _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
    }
    return _typeof(obj);
}

/*! Select2 4.0.6-rc.1 | https://github.com/select2/select2/blob/master/LICENSE.md */
!function (a) {
    "function" == typeof define && define.amd ? define(["jquery"], a) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = function (b, c) {
        return void 0 === c && (c = "undefined" != typeof window ? require("jquery") : require("jquery")(b)), a(c), c;
    } : a(jQuery);
}(function (a) {
    var b = function () {
            if (a && a.fn && a.fn.select2 && a.fn.select2.amd) var b = a.fn.select2.amd;
            var b;
            return function () {
                if (!b || !b.requirejs) {
                    b ? c = b : b = {};
                    var a, c, d;
                    !function (b) {
                        function e(a, b) {
                            return v.call(a, b);
                        }

                        function f(a, b) {
                            var c,
                                d,
                                e,
                                f,
                                g,
                                h,
                                i,
                                j,
                                k,
                                l,
                                m,
                                n,
                                o = b && b.split("/"),
                                p = t.map,
                                q = p && p["*"] || {};

                            if (a) {
                                for (a = a.split("/"), g = a.length - 1, t.nodeIdCompat && x.test(a[g]) && (a[g] = a[g].replace(x, "")), "." === a[0].charAt(0) && o && (n = o.slice(0, o.length - 1), a = n.concat(a)), k = 0; k < a.length; k++) {
                                    if ("." === (m = a[k])) a.splice(k, 1), k -= 1;
                                    else if (".." === m) {
                                        if (0 === k || 1 === k && ".." === a[2] || ".." === a[k - 1]) continue;
                                        k > 0 && (a.splice(k - 1, 2), k -= 2);
                                    }
                                }

                                a = a.join("/");
                            }

                            if ((o || q) && p) {
                                for (c = a.split("/"), k = c.length; k > 0; k -= 1) {
                                    if (d = c.slice(0, k).join("/"), o)
                                        for (l = o.length; l > 0; l -= 1) {
                                            if ((e = p[o.slice(0, l).join("/")]) && (e = e[d])) {
                                                f = e, h = k;
                                                break;
                                            }
                                        }
                                    if (f) break;
                                    !i && q && q[d] && (i = q[d], j = k);
                                }

                                !f && i && (f = i, h = j), f && (c.splice(0, h, f), a = c.join("/"));
                            }

                            return a;
                        }

                        function g(a, c) {
                            return function () {
                                var d = w.call(arguments, 0);
                                return "string" != typeof d[0] && 1 === d.length && d.push(null), _o.apply(b, d.concat([a, c]));
                            };
                        }

                        function h(a) {
                            return function (b) {
                                return f(b, a);
                            };
                        }

                        function i(a) {
                            return function (b) {
                                r[a] = b;
                            };
                        }

                        function j(a) {
                            if (e(s, a)) {
                                var c = s[a];
                                delete s[a], u[a] = !0, n.apply(b, c);
                            }

                            if (!e(r, a) && !e(u, a)) throw new Error("No " + a);
                            return r[a];
                        }

                        function k(a) {
                            var b,
                                c = a ? a.indexOf("!") : -1;
                            return c > -1 && (b = a.substring(0, c), a = a.substring(c + 1, a.length)), [b, a];
                        }

                        function l(a) {
                            return a ? k(a) : [];
                        }

                        function m(a) {
                            return function () {
                                return t && t.config && t.config[a] || {};
                            };
                        }

                        var n,
                            _o,
                            p,
                            q,
                            r = {},
                            s = {},
                            t = {},
                            u = {},
                            v = Object.prototype.hasOwnProperty,
                            w = [].slice,
                            x = /\.js$/;

                        p = function p(a, b) {
                            var c,
                                d = k(a),
                                e = d[0],
                                g = b[1];
                            return a = d[1], e && (e = f(e, g), c = j(e)), e ? a = c && c.normalize ? c.normalize(a, h(g)) : f(a, g) : (a = f(a, g), d = k(a), e = d[0], a = d[1], e && (c = j(e))), {
                                f: e ? e + "!" + a : a,
                                n: a,
                                pr: e,
                                p: c
                            };
                        }, q = {
                            require: function require(a) {
                                return g(a);
                            },
                            exports: function exports(a) {
                                var b = r[a];
                                return void 0 !== b ? b : r[a] = {};
                            },
                            module: function module(a) {
                                return {
                                    id: a,
                                    uri: "",
                                    exports: r[a],
                                    config: m(a)
                                };
                            }
                        }, n = function n(a, c, d, f) {
                            var h,
                                k,
                                m,
                                n,
                                o,
                                t,
                                v,
                                w = [],
                                x = _typeof(d);

                            if (f = f || a, t = l(f), "undefined" === x || "function" === x) {
                                for (c = !c.length && d.length ? ["require", "exports", "module"] : c, o = 0; o < c.length; o += 1) {
                                    if (n = p(c[o], t), "require" === (k = n.f)) w[o] = q.require(a);
                                    else if ("exports" === k) w[o] = q.exports(a), v = !0;
                                    else if ("module" === k) h = w[o] = q.module(a);
                                    else if (e(r, k) || e(s, k) || e(u, k)) w[o] = j(k);
                                    else {
                                        if (!n.p) throw new Error(a + " missing " + k);
                                        n.p.load(n.n, g(f, !0), i(k), {}), w[o] = r[k];
                                    }
                                }

                                m = d ? d.apply(r[a], w) : void 0, a && (h && h.exports !== b && h.exports !== r[a] ? r[a] = h.exports : m === b && v || (r[a] = m));
                            } else a && (r[a] = d);
                        }, a = c = _o = function o(a, c, d, e, f) {
                            if ("string" == typeof a) return q[a] ? q[a](c) : j(p(a, l(c)).f);

                            if (!a.splice) {
                                if (t = a, t.deps && _o(t.deps, t.callback), !c) return;
                                c.splice ? (a = c, c = d, d = null) : a = b;
                            }

                            return c = c || function () {
                            }, "function" == typeof d && (d = e, e = f), e ? n(b, a, c, d) : setTimeout(function () {
                                n(b, a, c, d);
                            }, 4), _o;
                        }, _o.config = function (a) {
                            return _o(a);
                        }, a._defined = r, d = function d(a, b, c) {
                            if ("string" != typeof a) throw new Error("See almond README: incorrect module build, no module name");
                            b.splice || (c = b, b = []), e(r, a) || e(s, a) || (s[a] = [a, b, c]);
                        }, d.amd = {
                            jQuery: !0
                        };
                    }(), b.requirejs = a, b.require = c, b.define = d;
                }
            }(), b.define("almond", function () {
            }), b.define("jquery", [], function () {
                var b = a || $;
                return null == b && console && console.error && console.error("Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page."), b;
            }), b.define("select2/utils", ["jquery"], function (a) {
                function b(a) {
                    var b = a.prototype,
                        c = [];

                    for (var d in b) {
                        "function" == typeof b[d] && "constructor" !== d && c.push(d);
                    }

                    return c;
                }

                var c = {};
                c.Extend = function (a, b) {
                    function c() {
                        this.constructor = a;
                    }

                    var d = {}.hasOwnProperty;

                    for (var e in b) {
                        d.call(b, e) && (a[e] = b[e]);
                    }

                    return c.prototype = b.prototype, a.prototype = new c(), a.__super__ = b.prototype, a;
                }, c.Decorate = function (a, c) {
                    function d() {
                        var b = Array.prototype.unshift,
                            d = c.prototype.constructor.length,
                            e = a.prototype.constructor;
                        d > 0 && (b.call(arguments, a.prototype.constructor), e = c.prototype.constructor), e.apply(this, arguments);
                    }

                    function e() {
                        this.constructor = d;
                    }

                    var f = b(c),
                        g = b(a);
                    c.displayName = a.displayName, d.prototype = new e();

                    for (var h = 0; h < g.length; h++) {
                        var i = g[h];
                        d.prototype[i] = a.prototype[i];
                    }

                    for (var j = function j(a) {
                        var b = function b() {
                        };

                        (a in d.prototype) && (b = d.prototype[a]);
                        var e = c.prototype[a];
                        return function () {
                            return Array.prototype.unshift.call(arguments, b), e.apply(this, arguments);
                        };
                    }, k = 0; k < f.length; k++) {
                        var l = f[k];
                        d.prototype[l] = j(l);
                    }

                    return d;
                };

                var d = function d() {
                    this.listeners = {};
                };

                d.prototype.on = function (a, b) {
                    this.listeners = this.listeners || {}, a in this.listeners ? this.listeners[a].push(b) : this.listeners[a] = [b];
                }, d.prototype.trigger = function (a) {
                    var b = Array.prototype.slice,
                        c = b.call(arguments, 1);
                    this.listeners = this.listeners || {}, null == c && (c = []), 0 === c.length && c.push({}), c[0]._type = a, a in this.listeners && this.invoke(this.listeners[a], b.call(arguments, 1)), "*" in this.listeners && this.invoke(this.listeners["*"], arguments);
                }, d.prototype.invoke = function (a, b) {
                    for (var c = 0, d = a.length; c < d; c++) {
                        a[c].apply(this, b);
                    }
                }, c.Observable = d, c.generateChars = function (a) {
                    for (var b = "", c = 0; c < a; c++) {
                        b += Math.floor(36 * Math.random()).toString(36);
                    }

                    return b;
                }, c.bind = function (a, b) {
                    return function () {
                        a.apply(b, arguments);
                    };
                }, c._convertData = function (a) {
                    for (var b in a) {
                        var c = b.split("-"),
                            d = a;

                        if (1 !== c.length) {
                            for (var e = 0; e < c.length; e++) {
                                var f = c[e];
                                f = f.substring(0, 1).toLowerCase() + f.substring(1), f in d || (d[f] = {}), e == c.length - 1 && (d[f] = a[b]), d = d[f];
                            }

                            delete a[b];
                        }
                    }

                    return a;
                }, c.hasScroll = function (b, c) {
                    var d = a(c),
                        e = c.style.overflowX,
                        f = c.style.overflowY;
                    return (e !== f || "hidden" !== f && "visible" !== f) && ("scroll" === e || "scroll" === f || d.innerHeight() < c.scrollHeight || d.innerWidth() < c.scrollWidth);
                }, c.escapeMarkup = function (a) {
                    var b = {
                        "\\": "&#92;",
                        "&": "&amp;",
                        "<": "&lt;",
                        ">": "&gt;",
                        '"': "&quot;",
                        "'": "&#39;",
                        "/": "&#47;"
                    };
                    return "string" != typeof a ? a : String(a).replace(/[&<>"'\/\\]/g, function (a) {
                        return b[a];
                    });
                }, c.appendMany = function (b, c) {
                    if ("1.7" === a.fn.jquery.substr(0, 3)) {
                        var d = a();
                        a.map(c, function (a) {
                            d = d.add(a);
                        }), c = d;
                    }

                    b.append(c);
                }, c.__cache = {};
                var e = 0;
                return c.GetUniqueElementId = function (a) {
                    var b = a.getAttribute("data-select2-id");
                    return null == b && (a.id ? (b = a.id, a.setAttribute("data-select2-id", b)) : (a.setAttribute("data-select2-id", ++e), b = e.toString())), b;
                }, c.StoreData = function (a, b, d) {
                    var e = c.GetUniqueElementId(a);
                    c.__cache[e] || (c.__cache[e] = {}), c.__cache[e][b] = d;
                }, c.GetData = function (b, d) {
                    var e = c.GetUniqueElementId(b);
                    return d ? c.__cache[e] && null != c.__cache[e][d] ? c.__cache[e][d] : a(b).data(d) : c.__cache[e];
                }, c.RemoveData = function (a) {
                    var b = c.GetUniqueElementId(a);
                    null != c.__cache[b] && delete c.__cache[b];
                }, c;
            }), b.define("select2/results", ["jquery", "./utils"], function (a, b) {
                function c(a, b, d) {
                    this.$element = a, this.data = d, this.options = b, c.__super__.constructor.call(this);
                }

                return b.Extend(c, b.Observable), c.prototype.render = function () {
                    var b = a('<ul class="select2-results__options" role="tree"></ul>');
                    return this.options.get("multiple") && b.attr("aria-multiselectable", "true"), this.$results = b, b;
                }, c.prototype.clear = function () {
                    this.$results.empty();
                }, c.prototype.displayMessage = function (b) {
                    var c = this.options.get("escapeMarkup");
                    this.clear(), this.hideLoading();
                    var d = a('<li role="treeitem" aria-live="assertive" class="select2-results__option"></li>'),
                        e = this.options.get("translations").get(b.message);
                    d.append(c(e(b.args))), d[0].className += " select2-results__message", this.$results.append(d);
                }, c.prototype.hideMessages = function () {
                    this.$results.find(".select2-results__message").remove();
                }, c.prototype.append = function (a) {
                    this.hideLoading();
                    var b = [];
                    if (null == a.results || 0 === a.results.length) return void (0 === this.$results.children().length && this.trigger("results:message", {
                        message: "noResults"
                    }));
                    a.results = this.sort(a.results);

                    for (var c = 0; c < a.results.length; c++) {
                        var d = a.results[c],
                            e = this.option(d);
                        b.push(e);
                    }

                    this.$results.append(b);
                }, c.prototype.position = function (a, b) {
                    b.find(".select2-results").append(a);
                }, c.prototype.sort = function (a) {
                    return this.options.get("sorter")(a);
                }, c.prototype.highlightFirstItem = function () {
                    var a = this.$results.find(".select2-results__option[aria-selected]"),
                        b = a.filter("[aria-selected=true]");
                    b.length > 0 ? b.first().trigger("mouseenter") : a.first().trigger("mouseenter"), this.ensureHighlightVisible();
                }, c.prototype.setClasses = function () {
                    var c = this;
                    this.data.current(function (d) {
                        var e = a.map(d, function (a) {
                            return a.id.toString();
                        });
                        c.$results.find(".select2-results__option[aria-selected]").each(function () {
                            var c = a(this),
                                d = b.GetData(this, "data"),
                                f = "" + d.id;
                            null != d.element && d.element.selected || null == d.element && a.inArray(f, e) > -1 ? c.attr("aria-selected", "true") : c.attr("aria-selected", "false");
                        });
                    });
                }, c.prototype.showLoading = function (a) {
                    this.hideLoading();
                    var b = this.options.get("translations").get("searching"),
                        c = {
                            disabled: !0,
                            loading: !0,
                            text: b(a)
                        },
                        d = this.option(c);
                    d.className += " loading-results", this.$results.prepend(d);
                }, c.prototype.hideLoading = function () {
                    this.$results.find(".loading-results").remove();
                }, c.prototype.option = function (c) {
                    var d = document.createElement("li");
                    d.className = "select2-results__option";
                    var e = {
                        role: "treeitem",
                        "aria-selected": "false"
                    };
                    c.disabled && (delete e["aria-selected"], e["aria-disabled"] = "true"), null == c.id && delete e["aria-selected"], null != c._resultId && (d.id = c._resultId), c.title && (d.title = c.title), c.children && (e.role = "group", e["aria-label"] = c.text, delete e["aria-selected"]);

                    for (var f in e) {
                        var g = e[f];
                        d.setAttribute(f, g);
                    }

                    if (c.children) {
                        var h = a(d),
                            i = document.createElement("strong");
                        i.className = "select2-results__group";
                        a(i);
                        this.template(c, i);

                        for (var j = [], k = 0; k < c.children.length; k++) {
                            var l = c.children[k],
                                m = this.option(l);
                            j.push(m);
                        }

                        var n = a("<ul></ul>", {
                            "class": "select2-results__options select2-results__options--nested"
                        });
                        n.append(j), h.append(i), h.append(n);
                    } else this.template(c, d);

                    return b.StoreData(d, "data", c), d;
                }, c.prototype.bind = function (c, d) {
                    var e = this,
                        f = c.id + "-results";
                    this.$results.attr("id", f), c.on("results:all", function (a) {
                        e.clear(), e.append(a.data), c.isOpen() && (e.setClasses(), e.highlightFirstItem());
                    }), c.on("results:append", function (a) {
                        e.append(a.data), c.isOpen() && e.setClasses();
                    }), c.on("query", function (a) {
                        e.hideMessages(), e.showLoading(a);
                    }), c.on("select", function () {
                        c.isOpen() && (e.setClasses(), e.highlightFirstItem());
                    }), c.on("unselect", function () {
                        c.isOpen() && (e.setClasses(), e.highlightFirstItem());
                    }), c.on("open", function () {
                        e.$results.attr("aria-expanded", "true"), e.$results.attr("aria-hidden", "false"), e.setClasses(), e.ensureHighlightVisible();
                    }), c.on("close", function () {
                        e.$results.attr("aria-expanded", "false"), e.$results.attr("aria-hidden", "true"), e.$results.removeAttr("aria-activedescendant");
                    }), c.on("results:toggle", function () {
                        var a = e.getHighlightedResults();
                        0 !== a.length && a.trigger("mouseup");
                    }), c.on("results:select", function () {
                        var a = e.getHighlightedResults();

                        if (0 !== a.length) {
                            var c = b.GetData(a[0], "data");
                            "true" == a.attr("aria-selected") ? e.trigger("close", {}) : e.trigger("select", {
                                data: c
                            });
                        }
                    }), c.on("results:previous", function () {
                        var a = e.getHighlightedResults(),
                            b = e.$results.find("[aria-selected]"),
                            c = b.index(a);

                        if (!(c <= 0)) {
                            var d = c - 1;
                            0 === a.length && (d = 0);
                            var f = b.eq(d);
                            f.trigger("mouseenter");
                            var g = e.$results.offset().top,
                                h = f.offset().top,
                                i = e.$results.scrollTop() + (h - g);
                            0 === d ? e.$results.scrollTop(0) : h - g < 0 && e.$results.scrollTop(i);
                        }
                    }), c.on("results:next", function () {
                        var a = e.getHighlightedResults(),
                            b = e.$results.find("[aria-selected]"),
                            c = b.index(a),
                            d = c + 1;

                        if (!(d >= b.length)) {
                            var f = b.eq(d);
                            f.trigger("mouseenter");
                            var g = e.$results.offset().top + e.$results.outerHeight(!1),
                                h = f.offset().top + f.outerHeight(!1),
                                i = e.$results.scrollTop() + h - g;
                            0 === d ? e.$results.scrollTop(0) : h > g && e.$results.scrollTop(i);
                        }
                    }), c.on("results:focus", function (a) {
                        a.element.addClass("select2-results__option--highlighted");
                    }), c.on("results:message", function (a) {
                        e.displayMessage(a);
                    }), a.fn.mousewheel && this.$results.on("mousewheel", function (a) {
                        var b = e.$results.scrollTop(),
                            c = e.$results.get(0).scrollHeight - b + a.deltaY,
                            d = a.deltaY > 0 && b - a.deltaY <= 0,
                            f = a.deltaY < 0 && c <= e.$results.height();
                        d ? (e.$results.scrollTop(0), a.preventDefault(), a.stopPropagation()) : f && (e.$results.scrollTop(e.$results.get(0).scrollHeight - e.$results.height()), a.preventDefault(), a.stopPropagation());
                    }), this.$results.on("mouseup", ".select2-results__option[aria-selected]", function (c) {
                        var d = a(this),
                            f = b.GetData(this, "data");
                        if ("true" === d.attr("aria-selected")) return void (e.options.get("multiple") ? e.trigger("unselect", {
                            originalEvent: c,
                            data: f
                        }) : e.trigger("close", {}));
                        e.trigger("select", {
                            originalEvent: c,
                            data: f
                        });
                    }), this.$results.on("mouseenter", ".select2-results__option[aria-selected]", function (c) {
                        var d = b.GetData(this, "data");
                        e.getHighlightedResults().removeClass("select2-results__option--highlighted"), e.trigger("results:focus", {
                            data: d,
                            element: a(this)
                        });
                    });
                }, c.prototype.getHighlightedResults = function () {
                    return this.$results.find(".select2-results__option--highlighted");
                }, c.prototype.destroy = function () {
                    this.$results.remove();
                }, c.prototype.ensureHighlightVisible = function () {
                    var a = this.getHighlightedResults();

                    if (0 !== a.length) {
                        var b = this.$results.find("[aria-selected]"),
                            c = b.index(a),
                            d = this.$results.offset().top,
                            e = a.offset().top,
                            f = this.$results.scrollTop() + (e - d),
                            g = e - d;
                        f -= 2 * a.outerHeight(!1), c <= 2 ? this.$results.scrollTop(0) : (g > this.$results.outerHeight() || g < 0) && this.$results.scrollTop(f);
                    }
                }, c.prototype.template = function (b, c) {
                    var d = this.options.get("templateResult"),
                        e = this.options.get("escapeMarkup"),
                        f = d(b, c);
                    null == f ? c.style.display = "none" : "string" == typeof f ? c.innerHTML = e(f) : a(c).append(f);
                }, c;
            }), b.define("select2/keys", [], function () {
                return {
                    BACKSPACE: 8,
                    TAB: 9,
                    ENTER: 13,
                    SHIFT: 16,
                    CTRL: 17,
                    ALT: 18,
                    ESC: 27,
                    SPACE: 32,
                    PAGE_UP: 33,
                    PAGE_DOWN: 34,
                    END: 35,
                    HOME: 36,
                    LEFT: 37,
                    UP: 38,
                    RIGHT: 39,
                    DOWN: 40,
                    DELETE: 46
                };
            }), b.define("select2/selection/base", ["jquery", "../utils", "../keys"], function (a, b, c) {
                function d(a, b) {
                    this.$element = a, this.options = b, d.__super__.constructor.call(this);
                }

                return b.Extend(d, b.Observable), d.prototype.render = function () {
                    var c = a('<span class="select2-selection" role="combobox"  aria-haspopup="true" aria-expanded="false"></span>');
                    return this._tabindex = 0, null != b.GetData(this.$element[0], "old-tabindex") ? this._tabindex = b.GetData(this.$element[0], "old-tabindex") : null != this.$element.attr("tabindex") && (this._tabindex = this.$element.attr("tabindex")), c.attr("title", this.$element.attr("title")), c.attr("tabindex", this._tabindex), this.$selection = c, c;
                }, d.prototype.bind = function (a, b) {
                    var d = this,
                        e = (a.id, a.id + "-results");
                    this.container = a, this.$selection.on("focus", function (a) {
                        d.trigger("focus", a);
                    }), this.$selection.on("blur", function (a) {
                        d._handleBlur(a);
                    }), this.$selection.on("keydown", function (a) {
                        d.trigger("keypress", a), a.which === c.SPACE && a.preventDefault();
                    }), a.on("results:focus", function (a) {
                        d.$selection.attr("aria-activedescendant", a.data._resultId);
                    }), a.on("selection:update", function (a) {
                        d.update(a.data);
                    }), a.on("open", function () {
                        d.$selection.attr("aria-expanded", "true"), d.$selection.attr("aria-owns", e), d._attachCloseHandler(a);
                    }), a.on("close", function () {
                        d.$selection.attr("aria-expanded", "false"), d.$selection.removeAttr("aria-activedescendant"), d.$selection.removeAttr("aria-owns"), d.$selection.focus(), window.setTimeout(function () {
                            d.$selection.focus();
                        }, 0), d._detachCloseHandler(a);
                    }), a.on("enable", function () {
                        d.$selection.attr("tabindex", d._tabindex);
                    }), a.on("disable", function () {
                        d.$selection.attr("tabindex", "-1");
                    });
                }, d.prototype._handleBlur = function (b) {
                    var c = this;
                    window.setTimeout(function () {
                        document.activeElement == c.$selection[0] || a.contains(c.$selection[0], document.activeElement) || c.trigger("blur", b);
                    }, 1);
                }, d.prototype._attachCloseHandler = function (c) {
                    a(document.body).on("mousedown.select2." + c.id, function (c) {
                        var d = a(c.target),
                            e = d.closest(".select2");
                        a(".select2.select2-container--open").each(function () {
                            a(this), this != e[0] && b.GetData(this, "element").select2("close");
                        });
                    });
                }, d.prototype._detachCloseHandler = function (b) {
                    a(document.body).off("mousedown.select2." + b.id);
                }, d.prototype.position = function (a, b) {
                    b.find(".selection").append(a);
                }, d.prototype.destroy = function () {
                    this._detachCloseHandler(this.container);
                }, d.prototype.update = function (a) {
                    throw new Error("The `update` method must be defined in child classes.");
                }, d;
            }), b.define("select2/selection/single", ["jquery", "./base", "../utils", "../keys"], function (a, b, c, d) {
                function e() {
                    e.__super__.constructor.apply(this, arguments);
                }

                return c.Extend(e, b), e.prototype.render = function () {
                    var a = e.__super__.render.call(this);

                    return a.addClass("select2-selection--single"), a.html('<span class="select2-selection__rendered"></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span>'), a;
                }, e.prototype.bind = function (a, b) {
                    var c = this;

                    e.__super__.bind.apply(this, arguments);

                    var d = a.id + "-container";
                    this.$selection.find(".select2-selection__rendered").attr("id", d).attr("role", "textbox").attr("aria-readonly", "true"), this.$selection.attr("aria-labelledby", d), this.$selection.on("mousedown", function (a) {
                        1 === a.which && c.trigger("toggle", {
                            originalEvent: a
                        });
                    }), this.$selection.on("focus", function (a) {
                    }), this.$selection.on("blur", function (a) {
                    }), a.on("focus", function (b) {
                        a.isOpen() || c.$selection.focus();
                    });
                }, e.prototype.clear = function () {
                    var a = this.$selection.find(".select2-selection__rendered");
                    a.empty(), a.removeAttr("title");
                }, e.prototype.display = function (a, b) {
                    var c = this.options.get("templateSelection");
                    return this.options.get("escapeMarkup")(c(a, b));
                }, e.prototype.selectionContainer = function () {
                    return a("<span></span>");
                }, e.prototype.update = function (a) {
                    if (0 === a.length) return void this.clear();
                    var b = a[0],
                        c = this.$selection.find(".select2-selection__rendered"),
                        d = this.display(b, c);
                    c.empty().append(d), c.attr("title", b.title || b.text);
                }, e;
            }), b.define("select2/selection/multiple", ["jquery", "./base", "../utils"], function (a, b, c) {
                function d(a, b) {
                    d.__super__.constructor.apply(this, arguments);
                }

                return c.Extend(d, b), d.prototype.render = function () {
                    var a = d.__super__.render.call(this);

                    return a.addClass("select2-selection--multiple"), a.html('<ul class="select2-selection__rendered"></ul>'), a;
                }, d.prototype.bind = function (b, e) {
                    var f = this;
                    d.__super__.bind.apply(this, arguments), this.$selection.on("click", function (a) {
                        f.trigger("toggle", {
                            originalEvent: a
                        });
                    }), this.$selection.on("click", ".select2-selection__choice__remove", function (b) {
                        if (!f.options.get("disabled")) {
                            var d = a(this),
                                e = d.parent(),
                                g = c.GetData(e[0], "data");
                            f.trigger("unselect", {
                                originalEvent: b,
                                data: g
                            });
                        }
                    });
                }, d.prototype.clear = function () {
                    var a = this.$selection.find(".select2-selection__rendered");
                    a.empty(), a.removeAttr("title");
                }, d.prototype.display = function (a, b) {
                    var c = this.options.get("templateSelection");
                    return this.options.get("escapeMarkup")(c(a, b));
                }, d.prototype.selectionContainer = function () {
                    return a('<li class="select2-selection__choice"><span class="select2-selection__choice__remove" role="presentation">&times;</span></li>');
                }, d.prototype.update = function (a) {
                    if (this.clear(), 0 !== a.length) {
                        for (var b = [], d = 0; d < a.length; d++) {
                            var e = a[d],
                                f = this.selectionContainer(),
                                g = this.display(e, f);
                            f.append(g), f.attr("title", e.title || e.text), c.StoreData(f[0], "data", e), b.push(f);
                        }

                        var h = this.$selection.find(".select2-selection__rendered");
                        c.appendMany(h, b);
                    }
                }, d;
            }), b.define("select2/selection/placeholder", ["../utils"], function (a) {
                function b(a, b, c) {
                    this.placeholder = this.normalizePlaceholder(c.get("placeholder")), a.call(this, b, c);
                }

                return b.prototype.normalizePlaceholder = function (a, b) {
                    return "string" == typeof b && (b = {
                        id: "",
                        text: b
                    }), b;
                }, b.prototype.createPlaceholder = function (a, b) {
                    var c = this.selectionContainer();
                    return c.html(this.display(b)), c.addClass("select2-selection__placeholder").removeClass("select2-selection__choice"), c;
                }, b.prototype.update = function (a, b) {
                    var c = 1 == b.length && b[0].id != this.placeholder.id;
                    if (b.length > 1 || c) return a.call(this, b);
                    this.clear();
                    var d = this.createPlaceholder(this.placeholder);
                    this.$selection.find(".select2-selection__rendered").append(d);
                }, b;
            }), b.define("select2/selection/allowClear", ["jquery", "../keys", "../utils"], function (a, b, c) {
                function d() {
                }

                return d.prototype.bind = function (a, b, c) {
                    var d = this;
                    a.call(this, b, c), null == this.placeholder && this.options.get("debug") && window.console && console.error && console.error("Select2: The `allowClear` option should be used in combination with the `placeholder` option."), this.$selection.on("mousedown", ".select2-selection__clear", function (a) {
                        d._handleClear(a);
                    }), b.on("keypress", function (a) {
                        d._handleKeyboardClear(a, b);
                    });
                }, d.prototype._handleClear = function (a, b) {
                    if (!this.options.get("disabled")) {
                        var d = this.$selection.find(".select2-selection__clear");

                        if (0 !== d.length) {
                            b.stopPropagation();
                            var e = c.GetData(d[0], "data"),
                                f = this.$element.val();
                            this.$element.val(this.placeholder.id);
                            var g = {
                                data: e
                            };
                            if (this.trigger("clear", g), g.prevented) return void this.$element.val(f);

                            for (var h = 0; h < e.length; h++) {
                                if (g = {
                                    data: e[h]
                                }, this.trigger("unselect", g), g.prevented) return void this.$element.val(f);
                            }

                            this.$element.trigger("change"), this.trigger("toggle", {});
                        }
                    }
                }, d.prototype._handleKeyboardClear = function (a, c, d) {
                    d.isOpen() || c.which != b.DELETE && c.which != b.BACKSPACE || this._handleClear(c);
                }, d.prototype.update = function (b, d) {
                    if (b.call(this, d), !(this.$selection.find(".select2-selection__placeholder").length > 0 || 0 === d.length)) {
                        var e = a('<span class="select2-selection__clear">&times;</span>');
                        c.StoreData(e[0], "data", d), this.$selection.find(".select2-selection__rendered").prepend(e);
                    }
                }, d;
            }), b.define("select2/selection/search", ["jquery", "../utils", "../keys"], function (a, b, c) {
                function d(a, b, c) {
                    a.call(this, b, c);
                }

                return d.prototype.render = function (b) {
                    var c = a('<li class="select2-search select2-search--inline"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="textbox" aria-autocomplete="list" /></li>');
                    this.$searchContainer = c, this.$search = c.find("input");
                    var d = b.call(this);
                    return this._transferTabIndex(), d;
                }, d.prototype.bind = function (a, d, e) {
                    var f = this;
                    a.call(this, d, e), d.on("open", function () {
                        f.$search.trigger("focus");
                    }), d.on("close", function () {
                        f.$search.val(""), f.$search.removeAttr("aria-activedescendant"), f.$search.trigger("focus");
                    }), d.on("enable", function () {
                        f.$search.prop("disabled", !1), f._transferTabIndex();
                    }), d.on("disable", function () {
                        f.$search.prop("disabled", !0);
                    }), d.on("focus", function (a) {
                        f.$search.trigger("focus");
                    }), d.on("results:focus", function (a) {
                        f.$search.attr("aria-activedescendant", a.id);
                    }), this.$selection.on("focusin", ".select2-search--inline", function (a) {
                        f.trigger("focus", a);
                    }), this.$selection.on("focusout", ".select2-search--inline", function (a) {
                        f._handleBlur(a);
                    }), this.$selection.on("keydown", ".select2-search--inline", function (a) {
                        if (a.stopPropagation(), f.trigger("keypress", a), f._keyUpPrevented = a.isDefaultPrevented(), a.which === c.BACKSPACE && "" === f.$search.val()) {
                            var d = f.$searchContainer.prev(".select2-selection__choice");

                            if (d.length > 0) {
                                var e = b.GetData(d[0], "data");
                                f.searchRemoveChoice(e), a.preventDefault();
                            }
                        }
                    });
                    var g = document.documentMode,
                        h = g && g <= 11;
                    this.$selection.on("input.searchcheck", ".select2-search--inline", function (a) {
                        if (h) return void f.$selection.off("input.search input.searchcheck");
                        f.$selection.off("keyup.search");
                    }), this.$selection.on("keyup.search input.search", ".select2-search--inline", function (a) {
                        if (h && "input" === a.type) return void f.$selection.off("input.search input.searchcheck");
                        var b = a.which;
                        b != c.SHIFT && b != c.CTRL && b != c.ALT && b != c.TAB && f.handleSearch(a);
                    });
                }, d.prototype._transferTabIndex = function (a) {
                    this.$search.attr("tabindex", this.$selection.attr("tabindex")), this.$selection.attr("tabindex", "-1");
                }, d.prototype.createPlaceholder = function (a, b) {
                    this.$search.attr("placeholder", b.text);
                }, d.prototype.update = function (a, b) {
                    var c = this.$search[0] == document.activeElement;

                    if (this.$search.attr("placeholder", ""), a.call(this, b), this.$selection.find(".select2-selection__rendered").append(this.$searchContainer), this.resizeSearch(), c) {
                        this.$element.find("[data-select2-tag]").length ? this.$element.focus() : this.$search.focus();
                    }
                }, d.prototype.handleSearch = function () {
                    if (this.resizeSearch(), !this._keyUpPrevented) {
                        var a = this.$search.val();
                        this.trigger("query", {
                            term: a
                        });
                    }

                    this._keyUpPrevented = !1;
                }, d.prototype.searchRemoveChoice = function (a, b) {
                    this.trigger("unselect", {
                        data: b
                    }), this.$search.val(b.text), this.handleSearch();
                }, d.prototype.resizeSearch = function () {
                    this.$search.css("width", "25px");
                    var a = "";
                    if ("" !== this.$search.attr("placeholder")) a = this.$selection.find(".select2-selection__rendered").innerWidth();
                    else {
                        a = .75 * (this.$search.val().length + 1) + "em";
                    }
                    this.$search.css("width", a);
                }, d;
            }), b.define("select2/selection/eventRelay", ["jquery"], function (a) {
                function b() {
                }

                return b.prototype.bind = function (b, c, d) {
                    var e = this,
                        f = ["open", "opening", "close", "closing", "select", "selecting", "unselect", "unselecting", "clear", "clearing"],
                        g = ["opening", "closing", "selecting", "unselecting", "clearing"];
                    b.call(this, c, d), c.on("*", function (b, c) {
                        if (-1 !== a.inArray(b, f)) {
                            c = c || {};
                            var d = a.Event("select2:" + b, {
                                params: c
                            });
                            e.$element.trigger(d), -1 !== a.inArray(b, g) && (c.prevented = d.isDefaultPrevented());
                        }
                    });
                }, b;
            }), b.define("select2/translation", ["jquery", "require"], function (a, b) {
                function c(a) {
                    this.dict = a || {};
                }

                return c.prototype.all = function () {
                    return this.dict;
                }, c.prototype.get = function (a) {
                    return this.dict[a];
                }, c.prototype.extend = function (b) {
                    this.dict = a.extend({}, b.all(), this.dict);
                }, c._cache = {}, c.loadPath = function (a) {
                    if (!(a in c._cache)) {
                        var d = b(a);
                        c._cache[a] = d;
                    }

                    return new c(c._cache[a]);
                }, c;
            }), b.define("select2/diacritics", [], function () {
                return {
                    "Ⓐ": "A",
                    "Ａ": "A",
                    "À": "A",
                    "Á": "A",
                    "Â": "A",
                    "Ầ": "A",
                    "Ấ": "A",
                    "Ẫ": "A",
                    "Ẩ": "A",
                    "Ã": "A",
                    "Ā": "A",
                    "Ă": "A",
                    "Ằ": "A",
                    "Ắ": "A",
                    "Ẵ": "A",
                    "Ẳ": "A",
                    "Ȧ": "A",
                    "Ǡ": "A",
                    "Ä": "A",
                    "Ǟ": "A",
                    "Ả": "A",
                    "Å": "A",
                    "Ǻ": "A",
                    "Ǎ": "A",
                    "Ȁ": "A",
                    "Ȃ": "A",
                    "Ạ": "A",
                    "Ậ": "A",
                    "Ặ": "A",
                    "Ḁ": "A",
                    "Ą": "A",
                    "Ⱥ": "A",
                    "Ɐ": "A",
                    "Ꜳ": "AA",
                    "Æ": "AE",
                    "Ǽ": "AE",
                    "Ǣ": "AE",
                    "Ꜵ": "AO",
                    "Ꜷ": "AU",
                    "Ꜹ": "AV",
                    "Ꜻ": "AV",
                    "Ꜽ": "AY",
                    "Ⓑ": "B",
                    "Ｂ": "B",
                    "Ḃ": "B",
                    "Ḅ": "B",
                    "Ḇ": "B",
                    "Ƀ": "B",
                    "Ƃ": "B",
                    "Ɓ": "B",
                    "Ⓒ": "C",
                    "Ｃ": "C",
                    "Ć": "C",
                    "Ĉ": "C",
                    "Ċ": "C",
                    "Č": "C",
                    "Ç": "C",
                    "Ḉ": "C",
                    "Ƈ": "C",
                    "Ȼ": "C",
                    "Ꜿ": "C",
                    "Ⓓ": "D",
                    "Ｄ": "D",
                    "Ḋ": "D",
                    "Ď": "D",
                    "Ḍ": "D",
                    "Ḑ": "D",
                    "Ḓ": "D",
                    "Ḏ": "D",
                    "Đ": "D",
                    "Ƌ": "D",
                    "Ɗ": "D",
                    "Ɖ": "D",
                    "Ꝺ": "D",
                    "Ǳ": "DZ",
                    "Ǆ": "DZ",
                    "ǲ": "Dz",
                    "ǅ": "Dz",
                    "Ⓔ": "E",
                    "Ｅ": "E",
                    "È": "E",
                    "É": "E",
                    "Ê": "E",
                    "Ề": "E",
                    "Ế": "E",
                    "Ễ": "E",
                    "Ể": "E",
                    "Ẽ": "E",
                    "Ē": "E",
                    "Ḕ": "E",
                    "Ḗ": "E",
                    "Ĕ": "E",
                    "Ė": "E",
                    "Ë": "E",
                    "Ẻ": "E",
                    "Ě": "E",
                    "Ȅ": "E",
                    "Ȇ": "E",
                    "Ẹ": "E",
                    "Ệ": "E",
                    "Ȩ": "E",
                    "Ḝ": "E",
                    "Ę": "E",
                    "Ḙ": "E",
                    "Ḛ": "E",
                    "Ɛ": "E",
                    "Ǝ": "E",
                    "Ⓕ": "F",
                    "Ｆ": "F",
                    "Ḟ": "F",
                    "Ƒ": "F",
                    "Ꝼ": "F",
                    "Ⓖ": "G",
                    "Ｇ": "G",
                    "Ǵ": "G",
                    "Ĝ": "G",
                    "Ḡ": "G",
                    "Ğ": "G",
                    "Ġ": "G",
                    "Ǧ": "G",
                    "Ģ": "G",
                    "Ǥ": "G",
                    "Ɠ": "G",
                    "Ꞡ": "G",
                    "Ᵹ": "G",
                    "Ꝿ": "G",
                    "Ⓗ": "H",
                    "Ｈ": "H",
                    "Ĥ": "H",
                    "Ḣ": "H",
                    "Ḧ": "H",
                    "Ȟ": "H",
                    "Ḥ": "H",
                    "Ḩ": "H",
                    "Ḫ": "H",
                    "Ħ": "H",
                    "Ⱨ": "H",
                    "Ⱶ": "H",
                    "Ɥ": "H",
                    "Ⓘ": "I",
                    "Ｉ": "I",
                    "Ì": "I",
                    "Í": "I",
                    "Î": "I",
                    "Ĩ": "I",
                    "Ī": "I",
                    "Ĭ": "I",
                    "İ": "I",
                    "Ï": "I",
                    "Ḯ": "I",
                    "Ỉ": "I",
                    "Ǐ": "I",
                    "Ȉ": "I",
                    "Ȋ": "I",
                    "Ị": "I",
                    "Į": "I",
                    "Ḭ": "I",
                    "Ɨ": "I",
                    "Ⓙ": "J",
                    "Ｊ": "J",
                    "Ĵ": "J",
                    "Ɉ": "J",
                    "Ⓚ": "K",
                    "Ｋ": "K",
                    "Ḱ": "K",
                    "Ǩ": "K",
                    "Ḳ": "K",
                    "Ķ": "K",
                    "Ḵ": "K",
                    "Ƙ": "K",
                    "Ⱪ": "K",
                    "Ꝁ": "K",
                    "Ꝃ": "K",
                    "Ꝅ": "K",
                    "Ꞣ": "K",
                    "Ⓛ": "L",
                    "Ｌ": "L",
                    "Ŀ": "L",
                    "Ĺ": "L",
                    "Ľ": "L",
                    "Ḷ": "L",
                    "Ḹ": "L",
                    "Ļ": "L",
                    "Ḽ": "L",
                    "Ḻ": "L",
                    "Ł": "L",
                    "Ƚ": "L",
                    "Ɫ": "L",
                    "Ⱡ": "L",
                    "Ꝉ": "L",
                    "Ꝇ": "L",
                    "Ꞁ": "L",
                    "Ǉ": "LJ",
                    "ǈ": "Lj",
                    "Ⓜ": "M",
                    "Ｍ": "M",
                    "Ḿ": "M",
                    "Ṁ": "M",
                    "Ṃ": "M",
                    "Ɱ": "M",
                    "Ɯ": "M",
                    "Ⓝ": "N",
                    "Ｎ": "N",
                    "Ǹ": "N",
                    "Ń": "N",
                    "Ñ": "N",
                    "Ṅ": "N",
                    "Ň": "N",
                    "Ṇ": "N",
                    "Ņ": "N",
                    "Ṋ": "N",
                    "Ṉ": "N",
                    "Ƞ": "N",
                    "Ɲ": "N",
                    "Ꞑ": "N",
                    "Ꞥ": "N",
                    "Ǌ": "NJ",
                    "ǋ": "Nj",
                    "Ⓞ": "O",
                    "Ｏ": "O",
                    "Ò": "O",
                    "Ó": "O",
                    "Ô": "O",
                    "Ồ": "O",
                    "Ố": "O",
                    "Ỗ": "O",
                    "Ổ": "O",
                    "Õ": "O",
                    "Ṍ": "O",
                    "Ȭ": "O",
                    "Ṏ": "O",
                    "Ō": "O",
                    "Ṑ": "O",
                    "Ṓ": "O",
                    "Ŏ": "O",
                    "Ȯ": "O",
                    "Ȱ": "O",
                    "Ö": "O",
                    "Ȫ": "O",
                    "Ỏ": "O",
                    "Ő": "O",
                    "Ǒ": "O",
                    "Ȍ": "O",
                    "Ȏ": "O",
                    "Ơ": "O",
                    "Ờ": "O",
                    "Ớ": "O",
                    "Ỡ": "O",
                    "Ở": "O",
                    "Ợ": "O",
                    "Ọ": "O",
                    "Ộ": "O",
                    "Ǫ": "O",
                    "Ǭ": "O",
                    "Ø": "O",
                    "Ǿ": "O",
                    "Ɔ": "O",
                    "Ɵ": "O",
                    "Ꝋ": "O",
                    "Ꝍ": "O",
                    "Ƣ": "OI",
                    "Ꝏ": "OO",
                    "Ȣ": "OU",
                    "Ⓟ": "P",
                    "Ｐ": "P",
                    "Ṕ": "P",
                    "Ṗ": "P",
                    "Ƥ": "P",
                    "Ᵽ": "P",
                    "Ꝑ": "P",
                    "Ꝓ": "P",
                    "Ꝕ": "P",
                    "Ⓠ": "Q",
                    "Ｑ": "Q",
                    "Ꝗ": "Q",
                    "Ꝙ": "Q",
                    "Ɋ": "Q",
                    "Ⓡ": "R",
                    "Ｒ": "R",
                    "Ŕ": "R",
                    "Ṙ": "R",
                    "Ř": "R",
                    "Ȑ": "R",
                    "Ȓ": "R",
                    "Ṛ": "R",
                    "Ṝ": "R",
                    "Ŗ": "R",
                    "Ṟ": "R",
                    "Ɍ": "R",
                    "Ɽ": "R",
                    "Ꝛ": "R",
                    "Ꞧ": "R",
                    "Ꞃ": "R",
                    "Ⓢ": "S",
                    "Ｓ": "S",
                    "ẞ": "S",
                    "Ś": "S",
                    "Ṥ": "S",
                    "Ŝ": "S",
                    "Ṡ": "S",
                    "Š": "S",
                    "Ṧ": "S",
                    "Ṣ": "S",
                    "Ṩ": "S",
                    "Ș": "S",
                    "Ş": "S",
                    "Ȿ": "S",
                    "Ꞩ": "S",
                    "Ꞅ": "S",
                    "Ⓣ": "T",
                    "Ｔ": "T",
                    "Ṫ": "T",
                    "Ť": "T",
                    "Ṭ": "T",
                    "Ț": "T",
                    "Ţ": "T",
                    "Ṱ": "T",
                    "Ṯ": "T",
                    "Ŧ": "T",
                    "Ƭ": "T",
                    "Ʈ": "T",
                    "Ⱦ": "T",
                    "Ꞇ": "T",
                    "Ꜩ": "TZ",
                    "Ⓤ": "U",
                    "Ｕ": "U",
                    "Ù": "U",
                    "Ú": "U",
                    "Û": "U",
                    "Ũ": "U",
                    "Ṹ": "U",
                    "Ū": "U",
                    "Ṻ": "U",
                    "Ŭ": "U",
                    "Ü": "U",
                    "Ǜ": "U",
                    "Ǘ": "U",
                    "Ǖ": "U",
                    "Ǚ": "U",
                    "Ủ": "U",
                    "Ů": "U",
                    "Ű": "U",
                    "Ǔ": "U",
                    "Ȕ": "U",
                    "Ȗ": "U",
                    "Ư": "U",
                    "Ừ": "U",
                    "Ứ": "U",
                    "Ữ": "U",
                    "Ử": "U",
                    "Ự": "U",
                    "Ụ": "U",
                    "Ṳ": "U",
                    "Ų": "U",
                    "Ṷ": "U",
                    "Ṵ": "U",
                    "Ʉ": "U",
                    "Ⓥ": "V",
                    "Ｖ": "V",
                    "Ṽ": "V",
                    "Ṿ": "V",
                    "Ʋ": "V",
                    "Ꝟ": "V",
                    "Ʌ": "V",
                    "Ꝡ": "VY",
                    "Ⓦ": "W",
                    "Ｗ": "W",
                    "Ẁ": "W",
                    "Ẃ": "W",
                    "Ŵ": "W",
                    "Ẇ": "W",
                    "Ẅ": "W",
                    "Ẉ": "W",
                    "Ⱳ": "W",
                    "Ⓧ": "X",
                    "Ｘ": "X",
                    "Ẋ": "X",
                    "Ẍ": "X",
                    "Ⓨ": "Y",
                    "Ｙ": "Y",
                    "Ỳ": "Y",
                    "Ý": "Y",
                    "Ŷ": "Y",
                    "Ỹ": "Y",
                    "Ȳ": "Y",
                    "Ẏ": "Y",
                    "Ÿ": "Y",
                    "Ỷ": "Y",
                    "Ỵ": "Y",
                    "Ƴ": "Y",
                    "Ɏ": "Y",
                    "Ỿ": "Y",
                    "Ⓩ": "Z",
                    "Ｚ": "Z",
                    "Ź": "Z",
                    "Ẑ": "Z",
                    "Ż": "Z",
                    "Ž": "Z",
                    "Ẓ": "Z",
                    "Ẕ": "Z",
                    "Ƶ": "Z",
                    "Ȥ": "Z",
                    "Ɀ": "Z",
                    "Ⱬ": "Z",
                    "Ꝣ": "Z",
                    "ⓐ": "a",
                    "ａ": "a",
                    "ẚ": "a",
                    "à": "a",
                    "á": "a",
                    "â": "a",
                    "ầ": "a",
                    "ấ": "a",
                    "ẫ": "a",
                    "ẩ": "a",
                    "ã": "a",
                    "ā": "a",
                    "ă": "a",
                    "ằ": "a",
                    "ắ": "a",
                    "ẵ": "a",
                    "ẳ": "a",
                    "ȧ": "a",
                    "ǡ": "a",
                    "ä": "a",
                    "ǟ": "a",
                    "ả": "a",
                    "å": "a",
                    "ǻ": "a",
                    "ǎ": "a",
                    "ȁ": "a",
                    "ȃ": "a",
                    "ạ": "a",
                    "ậ": "a",
                    "ặ": "a",
                    "ḁ": "a",
                    "ą": "a",
                    "ⱥ": "a",
                    "ɐ": "a",
                    "ꜳ": "aa",
                    "æ": "ae",
                    "ǽ": "ae",
                    "ǣ": "ae",
                    "ꜵ": "ao",
                    "ꜷ": "au",
                    "ꜹ": "av",
                    "ꜻ": "av",
                    "ꜽ": "ay",
                    "ⓑ": "b",
                    "ｂ": "b",
                    "ḃ": "b",
                    "ḅ": "b",
                    "ḇ": "b",
                    "ƀ": "b",
                    "ƃ": "b",
                    "ɓ": "b",
                    "ⓒ": "c",
                    "ｃ": "c",
                    "ć": "c",
                    "ĉ": "c",
                    "ċ": "c",
                    "č": "c",
                    "ç": "c",
                    "ḉ": "c",
                    "ƈ": "c",
                    "ȼ": "c",
                    "ꜿ": "c",
                    "ↄ": "c",
                    "ⓓ": "d",
                    "ｄ": "d",
                    "ḋ": "d",
                    "ď": "d",
                    "ḍ": "d",
                    "ḑ": "d",
                    "ḓ": "d",
                    "ḏ": "d",
                    "đ": "d",
                    "ƌ": "d",
                    "ɖ": "d",
                    "ɗ": "d",
                    "ꝺ": "d",
                    "ǳ": "dz",
                    "ǆ": "dz",
                    "ⓔ": "e",
                    "ｅ": "e",
                    "è": "e",
                    "é": "e",
                    "ê": "e",
                    "ề": "e",
                    "ế": "e",
                    "ễ": "e",
                    "ể": "e",
                    "ẽ": "e",
                    "ē": "e",
                    "ḕ": "e",
                    "ḗ": "e",
                    "ĕ": "e",
                    "ė": "e",
                    "ë": "e",
                    "ẻ": "e",
                    "ě": "e",
                    "ȅ": "e",
                    "ȇ": "e",
                    "ẹ": "e",
                    "ệ": "e",
                    "ȩ": "e",
                    "ḝ": "e",
                    "ę": "e",
                    "ḙ": "e",
                    "ḛ": "e",
                    "ɇ": "e",
                    "ɛ": "e",
                    "ǝ": "e",
                    "ⓕ": "f",
                    "ｆ": "f",
                    "ḟ": "f",
                    "ƒ": "f",
                    "ꝼ": "f",
                    "ⓖ": "g",
                    "ｇ": "g",
                    "ǵ": "g",
                    "ĝ": "g",
                    "ḡ": "g",
                    "ğ": "g",
                    "ġ": "g",
                    "ǧ": "g",
                    "ģ": "g",
                    "ǥ": "g",
                    "ɠ": "g",
                    "ꞡ": "g",
                    "ᵹ": "g",
                    "ꝿ": "g",
                    "ⓗ": "h",
                    "ｈ": "h",
                    "ĥ": "h",
                    "ḣ": "h",
                    "ḧ": "h",
                    "ȟ": "h",
                    "ḥ": "h",
                    "ḩ": "h",
                    "ḫ": "h",
                    "ẖ": "h",
                    "ħ": "h",
                    "ⱨ": "h",
                    "ⱶ": "h",
                    "ɥ": "h",
                    "ƕ": "hv",
                    "ⓘ": "i",
                    "ｉ": "i",
                    "ì": "i",
                    "í": "i",
                    "î": "i",
                    "ĩ": "i",
                    "ī": "i",
                    "ĭ": "i",
                    "ï": "i",
                    "ḯ": "i",
                    "ỉ": "i",
                    "ǐ": "i",
                    "ȉ": "i",
                    "ȋ": "i",
                    "ị": "i",
                    "į": "i",
                    "ḭ": "i",
                    "ɨ": "i",
                    "ı": "i",
                    "ⓙ": "j",
                    "ｊ": "j",
                    "ĵ": "j",
                    "ǰ": "j",
                    "ɉ": "j",
                    "ⓚ": "k",
                    "ｋ": "k",
                    "ḱ": "k",
                    "ǩ": "k",
                    "ḳ": "k",
                    "ķ": "k",
                    "ḵ": "k",
                    "ƙ": "k",
                    "ⱪ": "k",
                    "ꝁ": "k",
                    "ꝃ": "k",
                    "ꝅ": "k",
                    "ꞣ": "k",
                    "ⓛ": "l",
                    "ｌ": "l",
                    "ŀ": "l",
                    "ĺ": "l",
                    "ľ": "l",
                    "ḷ": "l",
                    "ḹ": "l",
                    "ļ": "l",
                    "ḽ": "l",
                    "ḻ": "l",
                    "ſ": "l",
                    "ł": "l",
                    "ƚ": "l",
                    "ɫ": "l",
                    "ⱡ": "l",
                    "ꝉ": "l",
                    "ꞁ": "l",
                    "ꝇ": "l",
                    "ǉ": "lj",
                    "ⓜ": "m",
                    "ｍ": "m",
                    "ḿ": "m",
                    "ṁ": "m",
                    "ṃ": "m",
                    "ɱ": "m",
                    "ɯ": "m",
                    "ⓝ": "n",
                    "ｎ": "n",
                    "ǹ": "n",
                    "ń": "n",
                    "ñ": "n",
                    "ṅ": "n",
                    "ň": "n",
                    "ṇ": "n",
                    "ņ": "n",
                    "ṋ": "n",
                    "ṉ": "n",
                    "ƞ": "n",
                    "ɲ": "n",
                    "ŉ": "n",
                    "ꞑ": "n",
                    "ꞥ": "n",
                    "ǌ": "nj",
                    "ⓞ": "o",
                    "ｏ": "o",
                    "ò": "o",
                    "ó": "o",
                    "ô": "o",
                    "ồ": "o",
                    "ố": "o",
                    "ỗ": "o",
                    "ổ": "o",
                    "õ": "o",
                    "ṍ": "o",
                    "ȭ": "o",
                    "ṏ": "o",
                    "ō": "o",
                    "ṑ": "o",
                    "ṓ": "o",
                    "ŏ": "o",
                    "ȯ": "o",
                    "ȱ": "o",
                    "ö": "o",
                    "ȫ": "o",
                    "ỏ": "o",
                    "ő": "o",
                    "ǒ": "o",
                    "ȍ": "o",
                    "ȏ": "o",
                    "ơ": "o",
                    "ờ": "o",
                    "ớ": "o",
                    "ỡ": "o",
                    "ở": "o",
                    "ợ": "o",
                    "ọ": "o",
                    "ộ": "o",
                    "ǫ": "o",
                    "ǭ": "o",
                    "ø": "o",
                    "ǿ": "o",
                    "ɔ": "o",
                    "ꝋ": "o",
                    "ꝍ": "o",
                    "ɵ": "o",
                    "ƣ": "oi",
                    "ȣ": "ou",
                    "ꝏ": "oo",
                    "ⓟ": "p",
                    "ｐ": "p",
                    "ṕ": "p",
                    "ṗ": "p",
                    "ƥ": "p",
                    "ᵽ": "p",
                    "ꝑ": "p",
                    "ꝓ": "p",
                    "ꝕ": "p",
                    "ⓠ": "q",
                    "ｑ": "q",
                    "ɋ": "q",
                    "ꝗ": "q",
                    "ꝙ": "q",
                    "ⓡ": "r",
                    "ｒ": "r",
                    "ŕ": "r",
                    "ṙ": "r",
                    "ř": "r",
                    "ȑ": "r",
                    "ȓ": "r",
                    "ṛ": "r",
                    "ṝ": "r",
                    "ŗ": "r",
                    "ṟ": "r",
                    "ɍ": "r",
                    "ɽ": "r",
                    "ꝛ": "r",
                    "ꞧ": "r",
                    "ꞃ": "r",
                    "ⓢ": "s",
                    "ｓ": "s",
                    "ß": "s",
                    "ś": "s",
                    "ṥ": "s",
                    "ŝ": "s",
                    "ṡ": "s",
                    "š": "s",
                    "ṧ": "s",
                    "ṣ": "s",
                    "ṩ": "s",
                    "ș": "s",
                    "ş": "s",
                    "ȿ": "s",
                    "ꞩ": "s",
                    "ꞅ": "s",
                    "ẛ": "s",
                    "ⓣ": "t",
                    "ｔ": "t",
                    "ṫ": "t",
                    "ẗ": "t",
                    "ť": "t",
                    "ṭ": "t",
                    "ț": "t",
                    "ţ": "t",
                    "ṱ": "t",
                    "ṯ": "t",
                    "ŧ": "t",
                    "ƭ": "t",
                    "ʈ": "t",
                    "ⱦ": "t",
                    "ꞇ": "t",
                    "ꜩ": "tz",
                    "ⓤ": "u",
                    "ｕ": "u",
                    "ù": "u",
                    "ú": "u",
                    "û": "u",
                    "ũ": "u",
                    "ṹ": "u",
                    "ū": "u",
                    "ṻ": "u",
                    "ŭ": "u",
                    "ü": "u",
                    "ǜ": "u",
                    "ǘ": "u",
                    "ǖ": "u",
                    "ǚ": "u",
                    "ủ": "u",
                    "ů": "u",
                    "ű": "u",
                    "ǔ": "u",
                    "ȕ": "u",
                    "ȗ": "u",
                    "ư": "u",
                    "ừ": "u",
                    "ứ": "u",
                    "ữ": "u",
                    "ử": "u",
                    "ự": "u",
                    "ụ": "u",
                    "ṳ": "u",
                    "ų": "u",
                    "ṷ": "u",
                    "ṵ": "u",
                    "ʉ": "u",
                    "ⓥ": "v",
                    "ｖ": "v",
                    "ṽ": "v",
                    "ṿ": "v",
                    "ʋ": "v",
                    "ꝟ": "v",
                    "ʌ": "v",
                    "ꝡ": "vy",
                    "ⓦ": "w",
                    "ｗ": "w",
                    "ẁ": "w",
                    "ẃ": "w",
                    "ŵ": "w",
                    "ẇ": "w",
                    "ẅ": "w",
                    "ẘ": "w",
                    "ẉ": "w",
                    "ⱳ": "w",
                    "ⓧ": "x",
                    "ｘ": "x",
                    "ẋ": "x",
                    "ẍ": "x",
                    "ⓨ": "y",
                    "ｙ": "y",
                    "ỳ": "y",
                    "ý": "y",
                    "ŷ": "y",
                    "ỹ": "y",
                    "ȳ": "y",
                    "ẏ": "y",
                    "ÿ": "y",
                    "ỷ": "y",
                    "ẙ": "y",
                    "ỵ": "y",
                    "ƴ": "y",
                    "ɏ": "y",
                    "ỿ": "y",
                    "ⓩ": "z",
                    "ｚ": "z",
                    "ź": "z",
                    "ẑ": "z",
                    "ż": "z",
                    "ž": "z",
                    "ẓ": "z",
                    "ẕ": "z",
                    "ƶ": "z",
                    "ȥ": "z",
                    "ɀ": "z",
                    "ⱬ": "z",
                    "ꝣ": "z",
                    "Ά": "Α",
                    "Έ": "Ε",
                    "Ή": "Η",
                    "Ί": "Ι",
                    "Ϊ": "Ι",
                    "Ό": "Ο",
                    "Ύ": "Υ",
                    "Ϋ": "Υ",
                    "Ώ": "Ω",
                    "ά": "α",
                    "έ": "ε",
                    "ή": "η",
                    "ί": "ι",
                    "ϊ": "ι",
                    "ΐ": "ι",
                    "ό": "ο",
                    "ύ": "υ",
                    "ϋ": "υ",
                    "ΰ": "υ",
                    "ω": "ω",
                    "ς": "σ"
                };
            }), b.define("select2/data/base", ["../utils"], function (a) {
                function b(a, c) {
                    b.__super__.constructor.call(this);
                }

                return a.Extend(b, a.Observable), b.prototype.current = function (a) {
                    throw new Error("The `current` method must be defined in child classes.");
                }, b.prototype.query = function (a, b) {
                    throw new Error("The `query` method must be defined in child classes.");
                }, b.prototype.bind = function (a, b) {
                }, b.prototype.destroy = function () {
                }, b.prototype.generateResultId = function (b, c) {
                    var d = b.id + "-result-";
                    return d += a.generateChars(4), null != c.id ? d += "-" + c.id.toString() : d += "-" + a.generateChars(4), d;
                }, b;
            }), b.define("select2/data/select", ["./base", "../utils", "jquery"], function (a, b, c) {
                function d(a, b) {
                    this.$element = a, this.options = b, d.__super__.constructor.call(this);
                }

                return b.Extend(d, a), d.prototype.current = function (a) {
                    var b = [],
                        d = this;
                    this.$element.find(":selected").each(function () {
                        var a = c(this),
                            e = d.item(a);
                        b.push(e);
                    }), a(b);
                }, d.prototype.select = function (a) {
                    var b = this;
                    if (a.selected = !0, c(a.element).is("option")) return a.element.selected = !0, void this.$element.trigger("change");
                    if (this.$element.prop("multiple")) this.current(function (d) {
                        var e = [];
                        a = [a], a.push.apply(a, d);

                        for (var f = 0; f < a.length; f++) {
                            var g = a[f].id;
                            -
                                1 === c.inArray(g, e) && e.push(g);
                        }

                        b.$element.val(e), b.$element.trigger("change");
                    });
                    else {
                        var d = a.id;
                        this.$element.val(d), this.$element.trigger("change");
                    }
                }, d.prototype.unselect = function (a) {
                    var b = this;

                    if (this.$element.prop("multiple")) {
                        if (a.selected = !1, c(a.element).is("option")) return a.element.selected = !1, void this.$element.trigger("change");
                        this.current(function (d) {
                            for (var e = [], f = 0; f < d.length; f++) {
                                var g = d[f].id;
                                g !== a.id && -1 === c.inArray(g, e) && e.push(g);
                            }

                            b.$element.val(e), b.$element.trigger("change");
                        });
                    }
                }, d.prototype.bind = function (a, b) {
                    var c = this;
                    this.container = a, a.on("select", function (a) {
                        c.select(a.data);
                    }), a.on("unselect", function (a) {
                        c.unselect(a.data);
                    });
                }, d.prototype.destroy = function () {
                    this.$element.find("*").each(function () {
                        b.RemoveData(this);
                    });
                }, d.prototype.query = function (a, b) {
                    var d = [],
                        e = this;
                    this.$element.children().each(function () {
                        var b = c(this);

                        if (b.is("option") || b.is("optgroup")) {
                            var f = e.item(b),
                                g = e.matches(a, f);
                            null !== g && d.push(g);
                        }
                    }), b({
                        results: d
                    });
                }, d.prototype.addOptions = function (a) {
                    b.appendMany(this.$element, a);
                }, d.prototype.option = function (a) {
                    var d;
                    a.children ? (d = document.createElement("optgroup"), d.label = a.text) : (d = document.createElement("option"), void 0 !== d.textContent ? d.textContent = a.text : d.innerText = a.text), void 0 !== a.id && (d.value = a.id), a.disabled && (d.disabled = !0), a.selected && (d.selected = !0), a.title && (d.title = a.title);

                    var e = c(d),
                        f = this._normalizeItem(a);

                    return f.element = d, b.StoreData(d, "data", f), e;
                }, d.prototype.item = function (a) {
                    var d = {};
                    if (null != (d = b.GetData(a[0], "data"))) return d;
                    if (a.is("option")) d = {
                        id: a.val(),
                        text: a.text(),
                        disabled: a.prop("disabled"),
                        selected: a.prop("selected"),
                        title: a.prop("title")
                    };
                    else if (a.is("optgroup")) {
                        d = {
                            text: a.prop("label"),
                            children: [],
                            title: a.prop("title")
                        };

                        for (var e = a.children("option"), f = [], g = 0; g < e.length; g++) {
                            var h = c(e[g]),
                                i = this.item(h);
                            f.push(i);
                        }

                        d.children = f;
                    }
                    return d = this._normalizeItem(d), d.element = a[0], b.StoreData(a[0], "data", d), d;
                }, d.prototype._normalizeItem = function (a) {
                    a !== Object(a) && (a = {
                        id: a,
                        text: a
                    }), a = c.extend({}, {
                        text: ""
                    }, a);
                    var b = {
                        selected: !1,
                        disabled: !1
                    };
                    return null != a.id && (a.id = a.id.toString()), null != a.text && (a.text = a.text.toString()), null == a._resultId && a.id && null != this.container && (a._resultId = this.generateResultId(this.container, a)), c.extend({}, b, a);
                }, d.prototype.matches = function (a, b) {
                    return this.options.get("matcher")(a, b);
                }, d;
            }), b.define("select2/data/array", ["./select", "../utils", "jquery"], function (a, b, c) {
                function d(a, b) {
                    var c = b.get("data") || [];
                    d.__super__.constructor.call(this, a, b), this.addOptions(this.convertToOptions(c));
                }

                return b.Extend(d, a), d.prototype.select = function (a) {
                    var b = this.$element.find("option").filter(function (b, c) {
                        return c.value == a.id.toString();
                    });
                    0 === b.length && (b = this.option(a), this.addOptions(b)), d.__super__.select.call(this, a);
                }, d.prototype.convertToOptions = function (a) {
                    function d(a) {
                        return function () {
                            return c(this).val() == a.id;
                        };
                    }

                    for (var e = this, f = this.$element.find("option"), g = f.map(function () {
                        return e.item(c(this)).id;
                    }).get(), h = [], i = 0; i < a.length; i++) {
                        var j = this._normalizeItem(a[i]);

                        if (c.inArray(j.id, g) >= 0) {
                            var k = f.filter(d(j)),
                                l = this.item(k),
                                m = c.extend(!0, {}, j, l),
                                n = this.option(m);
                            k.replaceWith(n);
                        } else {
                            var o = this.option(j);

                            if (j.children) {
                                var p = this.convertToOptions(j.children);
                                b.appendMany(o, p);
                            }

                            h.push(o);
                        }
                    }

                    return h;
                }, d;
            }), b.define("select2/data/ajax", ["./array", "../utils", "jquery"], function (a, b, c) {
                function d(a, b) {
                    this.ajaxOptions = this._applyDefaults(b.get("ajax")), null != this.ajaxOptions.processResults && (this.processResults = this.ajaxOptions.processResults), d.__super__.constructor.call(this, a, b);
                }

                return b.Extend(d, a), d.prototype._applyDefaults = function (a) {
                    var b = {
                        data: function data(a) {
                            return c.extend({}, a, {
                                q: a.term
                            });
                        },
                        transport: function transport(a, b, d) {
                            var e = c.ajax(a);
                            return e.then(b), e.fail(d), e;
                        }
                    };
                    return c.extend({}, b, a, !0);
                }, d.prototype.processResults = function (a) {
                    return a;
                }, d.prototype.query = function (a, b) {
                    function d() {
                        var d = f.transport(f, function (d) {
                            var f = e.processResults(d, a);
                            e.options.get("debug") && window.console && console.error && (f && f.results && c.isArray(f.results) || console.error("Select2: The AJAX results did not return an array in the `results` key of the response.")), b(f);
                        }, function () {
                            "status" in d && (0 === d.status || "0" === d.status) || e.trigger("results:message", {
                                message: "errorLoading"
                            });
                        });
                        e._request = d;
                    }

                    var e = this;
                    null != this._request && (c.isFunction(this._request.abort) && this._request.abort(), this._request = null);
                    var f = c.extend({
                        type: "GET"
                    }, this.ajaxOptions);
                    "function" == typeof f.url && (f.url = f.url.call(this.$element, a)), "function" == typeof f.data && (f.data = f.data.call(this.$element, a)), this.ajaxOptions.delay && null != a.term ? (this._queryTimeout && window.clearTimeout(this._queryTimeout), this._queryTimeout = window.setTimeout(d, this.ajaxOptions.delay)) : d();
                }, d;
            }), b.define("select2/data/tags", ["jquery"], function (a) {
                function b(b, c, d) {
                    var e = d.get("tags"),
                        f = d.get("createTag");
                    void 0 !== f && (this.createTag = f);
                    var g = d.get("insertTag");
                    if (void 0 !== g && (this.insertTag = g), b.call(this, c, d), a.isArray(e))
                        for (var h = 0; h < e.length; h++) {
                            var i = e[h],
                                j = this._normalizeItem(i),
                                k = this.option(j);

                            this.$element.append(k);
                        }
                }

                return b.prototype.query = function (a, b, c) {
                    function d(a, f) {
                        for (var g = a.results, h = 0; h < g.length; h++) {
                            var i = g[h],
                                j = null != i.children && !d({
                                    results: i.children
                                }, !0);
                            if ((i.text || "").toUpperCase() === (b.term || "").toUpperCase() || j) return !f && (a.data = g, void c(a));
                        }

                        if (f) return !0;
                        var k = e.createTag(b);

                        if (null != k) {
                            var l = e.option(k);
                            l.attr("data-select2-tag", !0), e.addOptions([l]), e.insertTag(g, k);
                        }

                        a.results = g, c(a);
                    }

                    var e = this;
                    if (this._removeOldTags(), null == b.term || null != b.page) return void a.call(this, b, c);
                    a.call(this, b, d);
                }, b.prototype.createTag = function (b, c) {
                    var d = a.trim(c.term);
                    return "" === d ? null : {
                        id: d,
                        text: d
                    };
                }, b.prototype.insertTag = function (a, b, c) {
                    b.unshift(c);
                }, b.prototype._removeOldTags = function (b) {
                    this._lastTag;
                    this.$element.find("option[data-select2-tag]").each(function () {
                        this.selected || a(this).remove();
                    });
                }, b;
            }), b.define("select2/data/tokenizer", ["jquery"], function (a) {
                function b(a, b, c) {
                    var d = c.get("tokenizer");
                    void 0 !== d && (this.tokenizer = d), a.call(this, b, c);
                }

                return b.prototype.bind = function (a, b, c) {
                    a.call(this, b, c), this.$search = b.dropdown.$search || b.selection.$search || c.find(".select2-search__field");
                }, b.prototype.query = function (b, c, d) {
                    function e(b) {
                        var c = g._normalizeItem(b);

                        if (!g.$element.find("option").filter(function () {
                            return a(this).val() === c.id;
                        }).length) {
                            var d = g.option(c);
                            d.attr("data-select2-tag", !0), g._removeOldTags(), g.addOptions([d]);
                        }

                        f(c);
                    }

                    function f(a) {
                        g.trigger("select", {
                            data: a
                        });
                    }

                    var g = this;
                    c.term = c.term || "";
                    var h = this.tokenizer(c, this.options, e);
                    h.term !== c.term && (this.$search.length && (this.$search.val(h.term), this.$search.focus()), c.term = h.term), b.call(this, c, d);
                }, b.prototype.tokenizer = function (b, c, d, e) {
                    for (var f = d.get("tokenSeparators") || [], g = c.term, h = 0, i = this.createTag || function (a) {
                        return {
                            id: a.term,
                            text: a.term
                        };
                    }; h < g.length;) {
                        var j = g[h];

                        if (-1 !== a.inArray(j, f)) {
                            var k = g.substr(0, h),
                                l = a.extend({}, c, {
                                    term: k
                                }),
                                m = i(l);
                            null != m ? (e(m), g = g.substr(h + 1) || "", h = 0) : h++;
                        } else h++;
                    }

                    return {
                        term: g
                    };
                }, b;
            }), b.define("select2/data/minimumInputLength", [], function () {
                function a(a, b, c) {
                    this.minimumInputLength = c.get("minimumInputLength"), a.call(this, b, c);
                }

                return a.prototype.query = function (a, b, c) {
                    if (b.term = b.term || "", b.term.length < this.minimumInputLength) return void this.trigger("results:message", {
                        message: "inputTooShort",
                        args: {
                            minimum: this.minimumInputLength,
                            input: b.term,
                            params: b
                        }
                    });
                    a.call(this, b, c);
                }, a;
            }), b.define("select2/data/maximumInputLength", [], function () {
                function a(a, b, c) {
                    this.maximumInputLength = c.get("maximumInputLength"), a.call(this, b, c);
                }

                return a.prototype.query = function (a, b, c) {
                    if (b.term = b.term || "", this.maximumInputLength > 0 && b.term.length > this.maximumInputLength) return void this.trigger("results:message", {
                        message: "inputTooLong",
                        args: {
                            maximum: this.maximumInputLength,
                            input: b.term,
                            params: b
                        }
                    });
                    a.call(this, b, c);
                }, a;
            }), b.define("select2/data/maximumSelectionLength", [], function () {
                function a(a, b, c) {
                    this.maximumSelectionLength = c.get("maximumSelectionLength"), a.call(this, b, c);
                }

                return a.prototype.query = function (a, b, c) {
                    var d = this;
                    this.current(function (e) {
                        var f = null != e ? e.length : 0;
                        if (d.maximumSelectionLength > 0 && f >= d.maximumSelectionLength) return void d.trigger("results:message", {
                            message: "maximumSelected",
                            args: {
                                maximum: d.maximumSelectionLength
                            }
                        });
                        a.call(d, b, c);
                    });
                }, a;
            }), b.define("select2/dropdown", ["jquery", "./utils"], function (a, b) {
                function c(a, b) {
                    this.$element = a, this.options = b, c.__super__.constructor.call(this);
                }

                return b.Extend(c, b.Observable), c.prototype.render = function () {
                    var b = a('<span class="select2-dropdown"><span class="select2-results"></span></span>');
                    return b.attr("dir", this.options.get("dir")), this.$dropdown = b, b;
                }, c.prototype.bind = function () {
                }, c.prototype.position = function (a, b) {
                }, c.prototype.destroy = function () {
                    this.$dropdown.remove();
                }, c;
            }), b.define("select2/dropdown/search", ["jquery", "../utils"], function (a, b) {
                function c() {
                }

                return c.prototype.render = function (b) {
                    var c = b.call(this),
                        d = a('<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="textbox" /></span>');
                    return this.$searchContainer = d, this.$search = d.find("input"), c.prepend(d), c;
                }, c.prototype.bind = function (b, c, d) {
                    var e = this;
                    b.call(this, c, d), this.$search.on("keydown", function (a) {
                        e.trigger("keypress", a), e._keyUpPrevented = a.isDefaultPrevented();
                    }), this.$search.on("input", function (b) {
                        a(this).off("keyup");
                    }), this.$search.on("keyup input", function (a) {
                        e.handleSearch(a);
                    }), c.on("open", function () {
                        e.$search.attr("tabindex", 0), e.$search.focus(), window.setTimeout(function () {
                            e.$search.focus();
                        }, 0);
                    }), c.on("close", function () {
                        e.$search.attr("tabindex", -1), e.$search.val(""), e.$search.blur();
                    }), c.on("focus", function () {
                        c.isOpen() || e.$search.focus();
                    }), c.on("results:all", function (a) {
                        if (null == a.query.term || "" === a.query.term) {
                            e.showSearch(a) ? e.$searchContainer.removeClass("select2-search--hide") : e.$searchContainer.addClass("select2-search--hide");
                        }
                    });
                }, c.prototype.handleSearch = function (a) {
                    if (!this._keyUpPrevented) {
                        var b = this.$search.val();
                        this.trigger("query", {
                            term: b
                        });
                    }

                    this._keyUpPrevented = !1;
                }, c.prototype.showSearch = function (a, b) {
                    return !0;
                }, c;
            }), b.define("select2/dropdown/hidePlaceholder", [], function () {
                function a(a, b, c, d) {
                    this.placeholder = this.normalizePlaceholder(c.get("placeholder")), a.call(this, b, c, d);
                }

                return a.prototype.append = function (a, b) {
                    b.results = this.removePlaceholder(b.results), a.call(this, b);
                }, a.prototype.normalizePlaceholder = function (a, b) {
                    return "string" == typeof b && (b = {
                        id: "",
                        text: b
                    }), b;
                }, a.prototype.removePlaceholder = function (a, b) {
                    for (var c = b.slice(0), d = b.length - 1; d >= 0; d--) {
                        var e = b[d];
                        this.placeholder.id === e.id && c.splice(d, 1);
                    }

                    return c;
                }, a;
            }), b.define("select2/dropdown/infiniteScroll", ["jquery"], function (a) {
                function b(a, b, c, d) {
                    this.lastParams = {}, a.call(this, b, c, d), this.$loadingMore = this.createLoadingMore(), this.loading = !1;
                }

                return b.prototype.append = function (a, b) {
                    this.$loadingMore.remove(), this.loading = !1, a.call(this, b), this.showLoadingMore(b) && this.$results.append(this.$loadingMore);
                }, b.prototype.bind = function (b, c, d) {
                    var e = this;
                    b.call(this, c, d), c.on("query", function (a) {
                        e.lastParams = a, e.loading = !0;
                    }), c.on("query:append", function (a) {
                        e.lastParams = a, e.loading = !0;
                    }), this.$results.on("scroll", function () {
                        var b = a.contains(document.documentElement, e.$loadingMore[0]);

                        if (!e.loading && b) {
                            e.$results.offset().top + e.$results.outerHeight(!1) + 50 >= e.$loadingMore.offset().top + e.$loadingMore.outerHeight(!1) && e.loadMore();
                        }
                    });
                }, b.prototype.loadMore = function () {
                    this.loading = !0;
                    var b = a.extend({}, {
                        page: 1
                    }, this.lastParams);
                    b.page++, this.trigger("query:append", b);
                }, b.prototype.showLoadingMore = function (a, b) {
                    return b.pagination && b.pagination.more;
                }, b.prototype.createLoadingMore = function () {
                    var b = a('<li class="select2-results__option select2-results__option--load-more"role="treeitem" aria-disabled="true"></li>'),
                        c = this.options.get("translations").get("loadingMore");
                    return b.html(c(this.lastParams)), b;
                }, b;
            }), b.define("select2/dropdown/attachBody", ["jquery", "../utils"], function (a, b) {
                function c(b, c, d) {
                    this.$dropdownParent = d.get("dropdownParent") || a(document.body), b.call(this, c, d);
                }

                return c.prototype.bind = function (a, b, c) {
                    var d = this,
                        e = !1;
                    a.call(this, b, c), b.on("open", function () {
                        d._showDropdown(), d._attachPositioningHandler(b), e || (e = !0, b.on("results:all", function () {
                            d._positionDropdown(), d._resizeDropdown();
                        }), b.on("results:append", function () {
                            d._positionDropdown(), d._resizeDropdown();
                        }));
                    }), b.on("close", function () {
                        d._hideDropdown(), d._detachPositioningHandler(b);
                    }), this.$dropdownContainer.on("mousedown", function (a) {
                        a.stopPropagation();
                    });
                }, c.prototype.destroy = function (a) {
                    a.call(this), this.$dropdownContainer.remove();
                }, c.prototype.position = function (a, b, c) {
                    b.attr("class", c.attr("class")), b.removeClass("select2"), b.addClass("select2-container--open"), b.css({
                        position: "absolute",
                        top: -999999
                    }), this.$container = c;
                }, c.prototype.render = function (b) {
                    var c = a("<span></span>"),
                        d = b.call(this);
                    return c.append(d), this.$dropdownContainer = c, c;
                }, c.prototype._hideDropdown = function (a) {
                    this.$dropdownContainer.detach();
                }, c.prototype._attachPositioningHandler = function (c, d) {
                    var e = this,
                        f = "scroll.select2." + d.id,
                        g = "resize.select2." + d.id,
                        h = "orientationchange.select2." + d.id,
                        i = this.$container.parents().filter(b.hasScroll);
                    i.each(function () {
                        b.StoreData(this, "select2-scroll-position", {
                            x: a(this).scrollLeft(),
                            y: a(this).scrollTop()
                        });
                    }), i.on(f, function (c) {
                        var d = b.GetData(this, "select2-scroll-position");
                        a(this).scrollTop(d.y);
                    }), a(window).on(f + " " + g + " " + h, function (a) {
                        e._positionDropdown(), e._resizeDropdown();
                    });
                }, c.prototype._detachPositioningHandler = function (c, d) {
                    var e = "scroll.select2." + d.id,
                        f = "resize.select2." + d.id,
                        g = "orientationchange.select2." + d.id;
                    this.$container.parents().filter(b.hasScroll).off(e), a(window).off(e + " " + f + " " + g);
                }, c.prototype._positionDropdown = function () {
                    var b = a(window),
                        c = this.$dropdown.hasClass("select2-dropdown--above"),
                        d = this.$dropdown.hasClass("select2-dropdown--below"),
                        e = null,
                        f = this.$container.offset();
                    f.bottom = f.top + this.$container.outerHeight(!1);
                    var g = {
                        height: this.$container.outerHeight(!1)
                    };
                    g.top = f.top, g.bottom = f.top + g.height;
                    var h = {
                            height: this.$dropdown.outerHeight(!1)
                        },
                        i = {
                            top: b.scrollTop(),
                            bottom: b.scrollTop() + b.height()
                        },
                        j = i.top < f.top - h.height,
                        k = i.bottom > f.bottom + h.height,
                        l = {
                            left: f.left,
                            top: g.bottom
                        },
                        m = this.$dropdownParent;
                    "static" === m.css("position") && (m = m.offsetParent());
                    var n = m.offset();
                    l.top -= n.top, l.left -= n.left, c || d || (e = "below"), k || !j || c ? !j && k && c && (e = "below") : e = "above", ("above" == e || c && "below" !== e) && (l.top = g.top - n.top - h.height), null != e && (this.$dropdown.removeClass("select2-dropdown--below select2-dropdown--above").addClass("select2-dropdown--" + e), this.$container.removeClass("select2-container--below select2-container--above").addClass("select2-container--" + e)), this.$dropdownContainer.css(l);
                }, c.prototype._resizeDropdown = function () {
                    var a = {
                        width: this.$container.outerWidth(!1) + "px"
                    };
                    this.options.get("dropdownAutoWidth") && (a.minWidth = a.width, a.position = "relative", a.width = "auto"), this.$dropdown.css(a);
                }, c.prototype._showDropdown = function (a) {
                    this.$dropdownContainer.appendTo(this.$dropdownParent), this._positionDropdown(), this._resizeDropdown();
                }, c;
            }), b.define("select2/dropdown/minimumResultsForSearch", [], function () {
                function a(b) {
                    for (var c = 0, d = 0; d < b.length; d++) {
                        var e = b[d];
                        e.children ? c += a(e.children) : c++;
                    }

                    return c;
                }

                function b(a, b, c, d) {
                    this.minimumResultsForSearch = c.get("minimumResultsForSearch"), this.minimumResultsForSearch < 0 && (this.minimumResultsForSearch = 1 / 0), a.call(this, b, c, d);
                }

                return b.prototype.showSearch = function (b, c) {
                    return !(a(c.data.results) < this.minimumResultsForSearch) && b.call(this, c);
                }, b;
            }), b.define("select2/dropdown/selectOnClose", ["../utils"], function (a) {
                function b() {
                }

                return b.prototype.bind = function (a, b, c) {
                    var d = this;
                    a.call(this, b, c), b.on("close", function (a) {
                        d._handleSelectOnClose(a);
                    });
                }, b.prototype._handleSelectOnClose = function (b, c) {
                    if (c && null != c.originalSelect2Event) {
                        var d = c.originalSelect2Event;
                        if ("select" === d._type || "unselect" === d._type) return;
                    }

                    var e = this.getHighlightedResults();

                    if (!(e.length < 1)) {
                        var f = a.GetData(e[0], "data");
                        null != f.element && f.element.selected || null == f.element && f.selected || this.trigger("select", {
                            data: f
                        });
                    }
                }, b;
            }), b.define("select2/dropdown/closeOnSelect", [], function () {
                function a() {
                }

                return a.prototype.bind = function (a, b, c) {
                    var d = this;
                    a.call(this, b, c), b.on("select", function (a) {
                        d._selectTriggered(a);
                    }), b.on("unselect", function (a) {
                        d._selectTriggered(a);
                    });
                }, a.prototype._selectTriggered = function (a, b) {
                    var c = b.originalEvent;
                    c && c.ctrlKey || this.trigger("close", {
                        originalEvent: c,
                        originalSelect2Event: b
                    });
                }, a;
            }), b.define("select2/i18n/en", [], function () {
                return {
                    errorLoading: function errorLoading() {
                        return "The results could not be loaded.";
                    },
                    inputTooLong: function inputTooLong(a) {
                        var b = a.input.length - a.maximum,
                            c = "Please delete " + b + " character";
                        return 1 != b && (c += "s"), c;
                    },
                    inputTooShort: function inputTooShort(a) {
                        return "Please enter " + (a.minimum - a.input.length) + " or more characters";
                    },
                    loadingMore: function loadingMore() {
                        return "Loading more results…";
                    },
                    maximumSelected: function maximumSelected(a) {
                        var b = "You can only select " + a.maximum + " item";
                        return 1 != a.maximum && (b += "s"), b;
                    },
                    noResults: function noResults() {
                        return "No results found";
                    },
                    searching: function searching() {
                        return "Searching…";
                    }
                };
            }), b.define("select2/defaults", ["jquery", "require", "./results", "./selection/single", "./selection/multiple", "./selection/placeholder", "./selection/allowClear", "./selection/search", "./selection/eventRelay", "./utils", "./translation", "./diacritics", "./data/select", "./data/array", "./data/ajax", "./data/tags", "./data/tokenizer", "./data/minimumInputLength", "./data/maximumInputLength", "./data/maximumSelectionLength", "./dropdown", "./dropdown/search", "./dropdown/hidePlaceholder", "./dropdown/infiniteScroll", "./dropdown/attachBody", "./dropdown/minimumResultsForSearch", "./dropdown/selectOnClose", "./dropdown/closeOnSelect", "./i18n/en"], function (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C) {
                function D() {
                    this.reset();
                }

                return D.prototype.apply = function (l) {
                    if (l = a.extend(!0, {}, this.defaults, l), null == l.dataAdapter) {
                        if (null != l.ajax ? l.dataAdapter = o : null != l.data ? l.dataAdapter = n : l.dataAdapter = m, l.minimumInputLength > 0 && (l.dataAdapter = j.Decorate(l.dataAdapter, r)), l.maximumInputLength > 0 && (l.dataAdapter = j.Decorate(l.dataAdapter, s)), l.maximumSelectionLength > 0 && (l.dataAdapter = j.Decorate(l.dataAdapter, t)), l.tags && (l.dataAdapter = j.Decorate(l.dataAdapter, p)), null == l.tokenSeparators && null == l.tokenizer || (l.dataAdapter = j.Decorate(l.dataAdapter, q)), null != l.query) {
                            var C = b(l.amdBase + "compat/query");
                            l.dataAdapter = j.Decorate(l.dataAdapter, C);
                        }

                        if (null != l.initSelection) {
                            var D = b(l.amdBase + "compat/initSelection");
                            l.dataAdapter = j.Decorate(l.dataAdapter, D);
                        }
                    }

                    if (null == l.resultsAdapter && (l.resultsAdapter = c, null != l.ajax && (l.resultsAdapter = j.Decorate(l.resultsAdapter, x)), null != l.placeholder && (l.resultsAdapter = j.Decorate(l.resultsAdapter, w)), l.selectOnClose && (l.resultsAdapter = j.Decorate(l.resultsAdapter, A))), null == l.dropdownAdapter) {
                        if (l.multiple) l.dropdownAdapter = u;
                        else {
                            var E = j.Decorate(u, v);
                            l.dropdownAdapter = E;
                        }

                        if (0 !== l.minimumResultsForSearch && (l.dropdownAdapter = j.Decorate(l.dropdownAdapter, z)), l.closeOnSelect && (l.dropdownAdapter = j.Decorate(l.dropdownAdapter, B)), null != l.dropdownCssClass || null != l.dropdownCss || null != l.adaptDropdownCssClass) {
                            var F = b(l.amdBase + "compat/dropdownCss");
                            l.dropdownAdapter = j.Decorate(l.dropdownAdapter, F);
                        }

                        l.dropdownAdapter = j.Decorate(l.dropdownAdapter, y);
                    }

                    if (null == l.selectionAdapter) {
                        if (l.multiple ? l.selectionAdapter = e : l.selectionAdapter = d, null != l.placeholder && (l.selectionAdapter = j.Decorate(l.selectionAdapter, f)), l.allowClear && (l.selectionAdapter = j.Decorate(l.selectionAdapter, g)), l.multiple && (l.selectionAdapter = j.Decorate(l.selectionAdapter, h)), null != l.containerCssClass || null != l.containerCss || null != l.adaptContainerCssClass) {
                            var G = b(l.amdBase + "compat/containerCss");
                            l.selectionAdapter = j.Decorate(l.selectionAdapter, G);
                        }

                        l.selectionAdapter = j.Decorate(l.selectionAdapter, i);
                    }

                    if ("string" == typeof l.language)
                        if (l.language.indexOf("-") > 0) {
                            var H = l.language.split("-"),
                                I = H[0];
                            l.language = [l.language, I];
                        } else l.language = [l.language];

                    if (a.isArray(l.language)) {
                        var J = new k();
                        l.language.push("en");

                        for (var K = l.language, L = 0; L < K.length; L++) {
                            var M = K[L],
                                N = {};

                            try {
                                N = k.loadPath(M);
                            } catch (a) {
                                try {
                                    M = this.defaults.amdLanguageBase + M, N = k.loadPath(M);
                                } catch (a) {
                                    l.debug && window.console && console.warn && console.warn('Select2: The language file for "' + M + '" could not be automatically loaded. A fallback will be used instead.');
                                    continue;
                                }
                            }

                            J.extend(N);
                        }

                        l.translations = J;
                    } else {
                        var O = k.loadPath(this.defaults.amdLanguageBase + "en"),
                            P = new k(l.language);
                        P.extend(O), l.translations = P;
                    }

                    return l;
                }, D.prototype.reset = function () {
                    function b(a) {
                        function b(a) {
                            return l[a] || a;
                        }

                        return a.replace(/[^\u0000-\u007E]/g, b);
                    }

                    function c(d, e) {
                        if ("" === a.trim(d.term)) return e;

                        if (e.children && e.children.length > 0) {
                            for (var f = a.extend(!0, {}, e), g = e.children.length - 1; g >= 0; g--) {
                                null == c(d, e.children[g]) && f.children.splice(g, 1);
                            }

                            return f.children.length > 0 ? f : c(d, f);
                        }

                        var h = b(e.text).toUpperCase(),
                            i = b(d.term).toUpperCase();
                        return h.indexOf(i) > -1 ? e : null;
                    }

                    this.defaults = {
                        amdBase: "./",
                        amdLanguageBase: "./i18n/",
                        closeOnSelect: !0,
                        debug: !1,
                        dropdownAutoWidth: !1,
                        escapeMarkup: j.escapeMarkup,
                        language: C,
                        matcher: c,
                        minimumInputLength: 0,
                        maximumInputLength: 0,
                        maximumSelectionLength: 0,
                        minimumResultsForSearch: 0,
                        selectOnClose: !1,
                        sorter: function sorter(a) {
                            return a;
                        },
                        templateResult: function templateResult(a) {
                            return a.text;
                        },
                        templateSelection: function templateSelection(a) {
                            return a.text;
                        },
                        theme: "default",
                        width: "resolve"
                    };
                }, D.prototype.set = function (b, c) {
                    var d = a.camelCase(b),
                        e = {};
                    e[d] = c;

                    var f = j._convertData(e);

                    a.extend(!0, this.defaults, f);
                }, new D();
            }), b.define("select2/options", ["require", "jquery", "./defaults", "./utils"], function (a, b, c, d) {
                function e(b, e) {
                    if (this.options = b, null != e && this.fromElement(e), this.options = c.apply(this.options), e && e.is("input")) {
                        var f = a(this.get("amdBase") + "compat/inputData");
                        this.options.dataAdapter = d.Decorate(this.options.dataAdapter, f);
                    }
                }

                return e.prototype.fromElement = function (a) {
                    var c = ["select2"];
                    null == this.options.multiple && (this.options.multiple = a.prop("multiple")), null == this.options.disabled && (this.options.disabled = a.prop("disabled")), null == this.options.language && (a.prop("lang") ? this.options.language = a.prop("lang").toLowerCase() : a.closest("[lang]").prop("lang") && (this.options.language = a.closest("[lang]").prop("lang"))), null == this.options.dir && (a.prop("dir") ? this.options.dir = a.prop("dir") : a.closest("[dir]").prop("dir") ? this.options.dir = a.closest("[dir]").prop("dir") : this.options.dir = "ltr"), a.prop("disabled", this.options.disabled), a.prop("multiple", this.options.multiple), d.GetData(a[0], "select2Tags") && (this.options.debug && window.console && console.warn && console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags="true"` attributes and will be removed in future versions of Select2.'), d.StoreData(a[0], "data", d.GetData(a[0], "select2Tags")), d.StoreData(a[0], "tags", !0)), d.GetData(a[0], "ajaxUrl") && (this.options.debug && window.console && console.warn && console.warn("Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2."), a.attr("ajax--url", d.GetData(a[0], "ajaxUrl")), d.StoreData(a[0], "ajax-Url", d.GetData(a[0], "ajaxUrl")));
                    var e = {};
                    e = b.fn.jquery && "1." == b.fn.jquery.substr(0, 2) && a[0].dataset ? b.extend(!0, {}, a[0].dataset, d.GetData(a[0])) : d.GetData(a[0]);
                    var f = b.extend(!0, {}, e);
                    f = d._convertData(f);

                    for (var g in f) {
                        b.inArray(g, c) > -1 || (b.isPlainObject(this.options[g]) ? b.extend(this.options[g], f[g]) : this.options[g] = f[g]);
                    }

                    return this;
                }, e.prototype.get = function (a) {
                    return this.options[a];
                }, e.prototype.set = function (a, b) {
                    this.options[a] = b;
                }, e;
            }), b.define("select2/core", ["jquery", "./options", "./utils", "./keys"], function (a, b, c, d) {
                var e = function e(a, d) {
                    null != c.GetData(a[0], "select2") && c.GetData(a[0], "select2").destroy(), this.$element = a, this.id = this._generateId(a), d = d || {}, this.options = new b(d, a), e.__super__.constructor.call(this);
                    var f = a.attr("tabindex") || 0;
                    c.StoreData(a[0], "old-tabindex", f), a.attr("tabindex", "-1");
                    var g = this.options.get("dataAdapter");
                    this.dataAdapter = new g(a, this.options);
                    var h = this.render();

                    this._placeContainer(h);

                    var i = this.options.get("selectionAdapter");
                    this.selection = new i(a, this.options), this.$selection = this.selection.render(), this.selection.position(this.$selection, h);
                    var j = this.options.get("dropdownAdapter");
                    this.dropdown = new j(a, this.options), this.$dropdown = this.dropdown.render(), this.dropdown.position(this.$dropdown, h);
                    var k = this.options.get("resultsAdapter");
                    this.results = new k(a, this.options, this.dataAdapter), this.$results = this.results.render(), this.results.position(this.$results, this.$dropdown);
                    var l = this;
                    this._bindAdapters(), this._registerDomEvents(), this._registerDataEvents(), this._registerSelectionEvents(), this._registerDropdownEvents(), this._registerResultsEvents(), this._registerEvents(), this.dataAdapter.current(function (a) {
                        l.trigger("selection:update", {
                            data: a
                        });
                    }), a.addClass("select2-hidden-accessible"), a.attr("aria-hidden", "true"), this._syncAttributes(), c.StoreData(a[0], "select2", this), a.data("select2", this);
                };

                return c.Extend(e, c.Observable), e.prototype._generateId = function (a) {
                    var b = "";
                    return b = null != a.attr("id") ? a.attr("id") : null != a.attr("name") ? a.attr("name") + "-" + c.generateChars(2) : c.generateChars(4), b = b.replace(/(:|\.|\[|\]|,)/g, ""), b = "select2-" + b;
                }, e.prototype._placeContainer = function (a) {
                    a.insertAfter(this.$element);

                    var b = this._resolveWidth(this.$element, this.options.get("width"));

                    null != b && a.css("width", b);
                }, e.prototype._resolveWidth = function (a, b) {
                    var c = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;

                    if ("resolve" == b) {
                        var d = this._resolveWidth(a, "style");

                        return null != d ? d : this._resolveWidth(a, "element");
                    }

                    if ("element" == b) {
                        var e = a.outerWidth(!1);
                        return e <= 0 ? "auto" : e + "px";
                    }

                    if ("style" == b) {
                        var f = a.attr("style");
                        if ("string" != typeof f) return null;

                        for (var g = f.split(";"), h = 0, i = g.length; h < i; h += 1) {
                            var j = g[h].replace(/\s/g, ""),
                                k = j.match(c);
                            if (null !== k && k.length >= 1) return k[1];
                        }

                        return null;
                    }

                    return b;
                }, e.prototype._bindAdapters = function () {
                    this.dataAdapter.bind(this, this.$container), this.selection.bind(this, this.$container), this.dropdown.bind(this, this.$container), this.results.bind(this, this.$container);
                }, e.prototype._registerDomEvents = function () {
                    var b = this;
                    this.$element.on("change.select2", function () {
                        b.dataAdapter.current(function (a) {
                            b.trigger("selection:update", {
                                data: a
                            });
                        });
                    }), this.$element.on("focus.select2", function (a) {
                        b.trigger("focus", a);
                    }), this._syncA = c.bind(this._syncAttributes, this), this._syncS = c.bind(this._syncSubtree, this), this.$element[0].attachEvent && this.$element[0].attachEvent("onpropertychange", this._syncA);
                    var d = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
                    null != d ? (this._observer = new d(function (c) {
                        a.each(c, b._syncA), a.each(c, b._syncS);
                    }), this._observer.observe(this.$element[0], {
                        attributes: !0,
                        childList: !0,
                        subtree: !1
                    })) : this.$element[0].addEventListener && (this.$element[0].addEventListener("DOMAttrModified", b._syncA, !1), this.$element[0].addEventListener("DOMNodeInserted", b._syncS, !1), this.$element[0].addEventListener("DOMNodeRemoved", b._syncS, !1));
                }, e.prototype._registerDataEvents = function () {
                    var a = this;
                    this.dataAdapter.on("*", function (b, c) {
                        a.trigger(b, c);
                    });
                }, e.prototype._registerSelectionEvents = function () {
                    var b = this,
                        c = ["toggle", "focus"];
                    this.selection.on("toggle", function () {
                        b.toggleDropdown();
                    }), this.selection.on("focus", function (a) {
                        b.focus(a);
                    }), this.selection.on("*", function (d, e) {
                        -1 === a.inArray(d, c) && b.trigger(d, e);
                    });
                }, e.prototype._registerDropdownEvents = function () {
                    var a = this;
                    this.dropdown.on("*", function (b, c) {
                        a.trigger(b, c);
                    });
                }, e.prototype._registerResultsEvents = function () {
                    var a = this;
                    this.results.on("*", function (b, c) {
                        a.trigger(b, c);
                    });
                }, e.prototype._registerEvents = function () {
                    var a = this;
                    this.on("open", function () {
                        a.$container.addClass("select2-container--open");
                    }), this.on("close", function () {
                        a.$container.removeClass("select2-container--open");
                    }), this.on("enable", function () {
                        a.$container.removeClass("select2-container--disabled");
                    }), this.on("disable", function () {
                        a.$container.addClass("select2-container--disabled");
                    }), this.on("blur", function () {
                        a.$container.removeClass("select2-container--focus");
                    }), this.on("query", function (b) {
                        a.isOpen() || a.trigger("open", {}), this.dataAdapter.query(b, function (c) {
                            a.trigger("results:all", {
                                data: c,
                                query: b
                            });
                        });
                    }), this.on("query:append", function (b) {
                        this.dataAdapter.query(b, function (c) {
                            a.trigger("results:append", {
                                data: c,
                                query: b
                            });
                        });
                    }), this.on("keypress", function (b) {
                        var c = b.which;
                        a.isOpen() ? c === d.ESC || c === d.TAB || c === d.UP && b.altKey ? (a.close(), b.preventDefault()) : c === d.ENTER ? (a.trigger("results:select", {}), b.preventDefault()) : c === d.SPACE && b.ctrlKey ? (a.trigger("results:toggle", {}), b.preventDefault()) : c === d.UP ? (a.trigger("results:previous", {}), b.preventDefault()) : c === d.DOWN && (a.trigger("results:next", {}), b.preventDefault()) : (c === d.ENTER || c === d.SPACE || c === d.DOWN && b.altKey) && (a.open(), b.preventDefault());
                    });
                }, e.prototype._syncAttributes = function () {
                    this.options.set("disabled", this.$element.prop("disabled")), this.options.get("disabled") ? (this.isOpen() && this.close(), this.trigger("disable", {})) : this.trigger("enable", {});
                }, e.prototype._syncSubtree = function (a, b) {
                    var c = !1,
                        d = this;

                    if (!a || !a.target || "OPTION" === a.target.nodeName || "OPTGROUP" === a.target.nodeName) {
                        if (b) {
                            if (b.addedNodes && b.addedNodes.length > 0)
                                for (var e = 0; e < b.addedNodes.length; e++) {
                                    var f = b.addedNodes[e];
                                    f.selected && (c = !0);
                                } else b.removedNodes && b.removedNodes.length > 0 && (c = !0);
                        } else c = !0;
                        c && this.dataAdapter.current(function (a) {
                            d.trigger("selection:update", {
                                data: a
                            });
                        });
                    }
                }, e.prototype.trigger = function (a, b) {
                    var c = e.__super__.trigger,
                        d = {
                            open: "opening",
                            close: "closing",
                            select: "selecting",
                            unselect: "unselecting",
                            clear: "clearing"
                        };

                    if (void 0 === b && (b = {}), a in d) {
                        var f = d[a],
                            g = {
                                prevented: !1,
                                name: a,
                                args: b
                            };
                        if (c.call(this, f, g), g.prevented) return void (b.prevented = !0);
                    }

                    c.call(this, a, b);
                }, e.prototype.toggleDropdown = function () {
                    this.options.get("disabled") || (this.isOpen() ? this.close() : this.open());
                }, e.prototype.open = function () {
                    this.isOpen() || this.trigger("query", {});
                }, e.prototype.close = function () {
                    this.isOpen() && this.trigger("close", {});
                }, e.prototype.isOpen = function () {
                    return this.$container.hasClass("select2-container--open");
                }, e.prototype.hasFocus = function () {
                    return this.$container.hasClass("select2-container--focus");
                }, e.prototype.focus = function (a) {
                    this.hasFocus() || (this.$container.addClass("select2-container--focus"), this.trigger("focus", {}));
                }, e.prototype.enable = function (a) {
                    this.options.get("debug") && window.console && console.warn && console.warn('Select2: The `select2("enable")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop("disabled") instead.'), null != a && 0 !== a.length || (a = [!0]);
                    var b = !a[0];
                    this.$element.prop("disabled", b);
                }, e.prototype.data = function () {
                    this.options.get("debug") && arguments.length > 0 && window.console && console.warn && console.warn('Select2: Data can no longer be set using `select2("data")`. You should consider setting the value instead using `$element.val()`.');
                    var a = [];
                    return this.dataAdapter.current(function (b) {
                        a = b;
                    }), a;
                }, e.prototype.val = function (b) {
                    if (this.options.get("debug") && window.console && console.warn && console.warn('Select2: The `select2("val")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'), null == b || 0 === b.length) return this.$element.val();
                    var c = b[0];
                    a.isArray(c) && (c = a.map(c, function (a) {
                        return a.toString();
                    })), this.$element.val(c).trigger("change");
                }, e.prototype.destroy = function () {
                    this.$container.remove(), this.$element[0].detachEvent && this.$element[0].detachEvent("onpropertychange", this._syncA), null != this._observer ? (this._observer.disconnect(), this._observer = null) : this.$element[0].removeEventListener && (this.$element[0].removeEventListener("DOMAttrModified", this._syncA, !1), this.$element[0].removeEventListener("DOMNodeInserted", this._syncS, !1), this.$element[0].removeEventListener("DOMNodeRemoved", this._syncS, !1)), this._syncA = null, this._syncS = null, this.$element.off(".select2"), this.$element.attr("tabindex", c.GetData(this.$element[0], "old-tabindex")), this.$element.removeClass("select2-hidden-accessible"), this.$element.attr("aria-hidden", "false"), c.RemoveData(this.$element[0]), this.$element.removeData("select2"), this.dataAdapter.destroy(), this.selection.destroy(), this.dropdown.destroy(), this.results.destroy(), this.dataAdapter = null, this.selection = null, this.dropdown = null, this.results = null;
                }, e.prototype.render = function () {
                    var b = a('<span class="select2 select2-container"><span class="selection"></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>');
                    return b.attr("dir", this.options.get("dir")), this.$container = b, this.$container.addClass("select2-container--" + this.options.get("theme")), c.StoreData(b[0], "element", this.$element), b;
                }, e;
            }), b.define("select2/compat/utils", ["jquery"], function (a) {
                function b(b, c, d) {
                    var e,
                        f,
                        g = [];
                    e = a.trim(b.attr("class")), e && (e = "" + e, a(e.split(/\s+/)).each(function () {
                        0 === this.indexOf("select2-") && g.push(this);
                    })), e = a.trim(c.attr("class")), e && (e = "" + e, a(e.split(/\s+/)).each(function () {
                        0 !== this.indexOf("select2-") && null != (f = d(this)) && g.push(f);
                    })), b.attr("class", g.join(" "));
                }

                return {
                    syncCssClasses: b
                };
            }), b.define("select2/compat/containerCss", ["jquery", "./utils"], function (a, b) {
                function c(a) {
                    return null;
                }

                function d() {
                }

                return d.prototype.render = function (d) {
                    var e = d.call(this),
                        f = this.options.get("containerCssClass") || "";
                    a.isFunction(f) && (f = f(this.$element));
                    var g = this.options.get("adaptContainerCssClass");

                    if (g = g || c, -1 !== f.indexOf(":all:")) {
                        f = f.replace(":all:", "");
                        var h = g;

                        g = function g(a) {
                            var b = h(a);
                            return null != b ? b + " " + a : a;
                        };
                    }

                    var i = this.options.get("containerCss") || {};
                    return a.isFunction(i) && (i = i(this.$element)), b.syncCssClasses(e, this.$element, g), e.css(i), e.addClass(f), e;
                }, d;
            }), b.define("select2/compat/dropdownCss", ["jquery", "./utils"], function (a, b) {
                function c(a) {
                    return null;
                }

                function d() {
                }

                return d.prototype.render = function (d) {
                    var e = d.call(this),
                        f = this.options.get("dropdownCssClass") || "";
                    a.isFunction(f) && (f = f(this.$element));
                    var g = this.options.get("adaptDropdownCssClass");

                    if (g = g || c, -1 !== f.indexOf(":all:")) {
                        f = f.replace(":all:", "");
                        var h = g;

                        g = function g(a) {
                            var b = h(a);
                            return null != b ? b + " " + a : a;
                        };
                    }

                    var i = this.options.get("dropdownCss") || {};
                    return a.isFunction(i) && (i = i(this.$element)), b.syncCssClasses(e, this.$element, g), e.css(i), e.addClass(f), e;
                }, d;
            }), b.define("select2/compat/initSelection", ["jquery"], function (a) {
                function b(a, b, c) {
                    c.get("debug") && window.console && console.warn && console.warn("Select2: The `initSelection` option has been deprecated in favor of a custom data adapter that overrides the `current` method. This method is now called multiple times instead of a single time when the instance is initialized. Support will be removed for the `initSelection` option in future versions of Select2"), this.initSelection = c.get("initSelection"), this._isInitialized = !1, a.call(this, b, c);
                }

                return b.prototype.current = function (b, c) {
                    var d = this;
                    if (this._isInitialized) return void b.call(this, c);
                    this.initSelection.call(null, this.$element, function (b) {
                        d._isInitialized = !0, a.isArray(b) || (b = [b]), c(b);
                    });
                }, b;
            }), b.define("select2/compat/inputData", ["jquery", "../utils"], function (a, b) {
                function c(a, b, c) {
                    this._currentData = [], this._valueSeparator = c.get("valueSeparator") || ",", "hidden" === b.prop("type") && c.get("debug") && console && console.warn && console.warn("Select2: Using a hidden input with Select2 is no longer supported and may stop working in the future. It is recommended to use a `<select>` element instead."), a.call(this, b, c);
                }

                return c.prototype.current = function (b, c) {
                    function d(b, c) {
                        var e = [];
                        return b.selected || -1 !== a.inArray(b.id, c) ? (b.selected = !0, e.push(b)) : b.selected = !1, b.children && e.push.apply(e, d(b.children, c)), e;
                    }

                    for (var e = [], f = 0; f < this._currentData.length; f++) {
                        var g = this._currentData[f];
                        e.push.apply(e, d(g, this.$element.val().split(this._valueSeparator)));
                    }

                    c(e);
                }, c.prototype.select = function (b, c) {
                    if (this.options.get("multiple")) {
                        var d = this.$element.val();
                        d += this._valueSeparator + c.id, this.$element.val(d), this.$element.trigger("change");
                    } else this.current(function (b) {
                        a.map(b, function (a) {
                            a.selected = !1;
                        });
                    }), this.$element.val(c.id), this.$element.trigger("change");
                }, c.prototype.unselect = function (a, b) {
                    var c = this;
                    b.selected = !1, this.current(function (a) {
                        for (var d = [], e = 0; e < a.length; e++) {
                            var f = a[e];
                            b.id != f.id && d.push(f.id);
                        }

                        c.$element.val(d.join(c._valueSeparator)), c.$element.trigger("change");
                    });
                }, c.prototype.query = function (a, b, c) {
                    for (var d = [], e = 0; e < this._currentData.length; e++) {
                        var f = this._currentData[e],
                            g = this.matches(b, f);
                        null !== g && d.push(g);
                    }

                    c({
                        results: d
                    });
                }, c.prototype.addOptions = function (c, d) {
                    var e = a.map(d, function (a) {
                        return b.GetData(a[0], "data");
                    });

                    this._currentData.push.apply(this._currentData, e);
                }, c;
            }), b.define("select2/compat/matcher", ["jquery"], function (a) {
                function b(b) {
                    function c(c, d) {
                        var e = a.extend(!0, {}, d);
                        if (null == c.term || "" === a.trim(c.term)) return e;

                        if (d.children) {
                            for (var f = d.children.length - 1; f >= 0; f--) {
                                var g = d.children[f];
                                b(c.term, g.text, g) || e.children.splice(f, 1);
                            }

                            if (e.children.length > 0) return e;
                        }

                        return b(c.term, d.text, d) ? e : null;
                    }

                    return c;
                }

                return b;
            }), b.define("select2/compat/query", [], function () {
                function a(a, b, c) {
                    c.get("debug") && window.console && console.warn && console.warn("Select2: The `query` option has been deprecated in favor of a custom data adapter that overrides the `query` method. Support will be removed for the `query` option in future versions of Select2."), a.call(this, b, c);
                }

                return a.prototype.query = function (a, b, c) {
                    b.callback = c, this.options.get("query").call(null, b);
                }, a;
            }), b.define("select2/dropdown/attachContainer", [], function () {
                function a(a, b, c) {
                    a.call(this, b, c);
                }

                return a.prototype.position = function (a, b, c) {
                    c.find(".dropdown-wrapper").append(b), b.addClass("select2-dropdown--below"), c.addClass("select2-container--below");
                }, a;
            }), b.define("select2/dropdown/stopPropagation", [], function () {
                function a() {
                }

                return a.prototype.bind = function (a, b, c) {
                    a.call(this, b, c);
                    var d = ["blur", "change", "click", "dblclick", "focus", "focusin", "focusout", "input", "keydown", "keyup", "keypress", "mousedown", "mouseenter", "mouseleave", "mousemove", "mouseover", "mouseup", "search", "touchend", "touchstart"];
                    this.$dropdown.on(d.join(" "), function (a) {
                        a.stopPropagation();
                    });
                }, a;
            }), b.define("select2/selection/stopPropagation", [], function () {
                function a() {
                }

                return a.prototype.bind = function (a, b, c) {
                    a.call(this, b, c);
                    var d = ["blur", "change", "click", "dblclick", "focus", "focusin", "focusout", "input", "keydown", "keyup", "keypress", "mousedown", "mouseenter", "mouseleave", "mousemove", "mouseover", "mouseup", "search", "touchend", "touchstart"];
                    this.$selection.on(d.join(" "), function (a) {
                        a.stopPropagation();
                    });
                }, a;
            }),
                function (c) {
                    "function" == typeof b.define && b.define.amd ? b.define("jquery-mousewheel", ["jquery"], c) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? module.exports = c : c(a);
                }(function (a) {
                    function b(b) {
                        var g = b || window.event,
                            h = i.call(arguments, 1),
                            j = 0,
                            l = 0,
                            m = 0,
                            n = 0,
                            o = 0,
                            p = 0;

                        if (b = a.event.fix(g), b.type = "mousewheel", "detail" in g && (m = -1 * g.detail), "wheelDelta" in g && (m = g.wheelDelta), "wheelDeltaY" in g && (m = g.wheelDeltaY), "wheelDeltaX" in g && (l = -1 * g.wheelDeltaX), "axis" in g && g.axis === g.HORIZONTAL_AXIS && (l = -1 * m, m = 0), j = 0 === m ? l : m, "deltaY" in g && (m = -1 * g.deltaY, j = m), "deltaX" in g && (l = g.deltaX, 0 === m && (j = -1 * l)), 0 !== m || 0 !== l) {
                            if (1 === g.deltaMode) {
                                var q = a.data(this, "mousewheel-line-height");
                                j *= q, m *= q, l *= q;
                            } else if (2 === g.deltaMode) {
                                var r = a.data(this, "mousewheel-page-height");
                                j *= r, m *= r, l *= r;
                            }

                            if (n = Math.max(Math.abs(m), Math.abs(l)), (!f || n < f) && (f = n, d(g, n) && (f /= 40)), d(g, n) && (j /= 40, l /= 40, m /= 40), j = Math[j >= 1 ? "floor" : "ceil"](j / f), l = Math[l >= 1 ? "floor" : "ceil"](l / f), m = Math[m >= 1 ? "floor" : "ceil"](m / f), k.settings.normalizeOffset && this.getBoundingClientRect) {
                                var s = this.getBoundingClientRect();
                                o = b.clientX - s.left, p = b.clientY - s.top;
                            }

                            return b.deltaX = l, b.deltaY = m, b.deltaFactor = f, b.offsetX = o, b.offsetY = p, b.deltaMode = 0, h.unshift(b, j, l, m), e && clearTimeout(e), e = setTimeout(c, 200), (a.event.dispatch || a.event.handle).apply(this, h);
                        }
                    }

                    function c() {
                        f = null;
                    }

                    function d(a, b) {
                        return k.settings.adjustOldDeltas && "mousewheel" === a.type && b % 120 == 0;
                    }

                    var e,
                        f,
                        g = ["wheel", "mousewheel", "DOMMouseScroll", "MozMousePixelScroll"],
                        h = "onwheel" in document || document.documentMode >= 9 ? ["wheel"] : ["mousewheel", "DomMouseScroll", "MozMousePixelScroll"],
                        i = Array.prototype.slice;
                    if (a.event.fixHooks)
                        for (var j = g.length; j;) {
                            a.event.fixHooks[g[--j]] = a.event.mouseHooks;
                        }
                    var k = a.event.special.mousewheel = {
                        version: "3.1.12",
                        setup: function setup() {
                            if (this.addEventListener)
                                for (var c = h.length; c;) {
                                    this.addEventListener(h[--c], b, !1);
                                } else this.onmousewheel = b;
                            a.data(this, "mousewheel-line-height", k.getLineHeight(this)), a.data(this, "mousewheel-page-height", k.getPageHeight(this));
                        },
                        teardown: function teardown() {
                            if (this.removeEventListener)
                                for (var c = h.length; c;) {
                                    this.removeEventListener(h[--c], b, !1);
                                } else this.onmousewheel = null;
                            a.removeData(this, "mousewheel-line-height"), a.removeData(this, "mousewheel-page-height");
                        },
                        getLineHeight: function getLineHeight(b) {
                            var c = a(b),
                                d = c["offsetParent" in a.fn ? "offsetParent" : "parent"]();
                            return d.length || (d = a("body")), parseInt(d.css("fontSize"), 10) || parseInt(c.css("fontSize"), 10) || 16;
                        },
                        getPageHeight: function getPageHeight(b) {
                            return a(b).height();
                        },
                        settings: {
                            adjustOldDeltas: !0,
                            normalizeOffset: !0
                        }
                    };
                    a.fn.extend({
                        mousewheel: function mousewheel(a) {
                            return a ? this.bind("mousewheel", a) : this.trigger("mousewheel");
                        },
                        unmousewheel: function unmousewheel(a) {
                            return this.unbind("mousewheel", a);
                        }
                    });
                }), b.define("jquery.select2", ["jquery", "jquery-mousewheel", "./select2/core", "./select2/defaults", "./select2/utils"], function (a, b, c, d, e) {
                if (null == a.fn.select2) {
                    var f = ["open", "close", "destroy"];

                    a.fn.select2 = function (b) {
                        if ("object" == _typeof(b = b || {})) return this.each(function () {
                            var d = a.extend(!0, {}, b);
                            new c(a(this), d);
                        }), this;

                        if ("string" == typeof b) {
                            var d,
                                g = Array.prototype.slice.call(arguments, 1);
                            return this.each(function () {
                                var a = e.GetData(this, "select2");
                                null == a && window.console && console.error && console.error("The select2('" + b + "') method was called on an element that is not using Select2."), d = a[b].apply(a, g);
                            }), a.inArray(b, f) > -1 ? this : d;
                        }

                        throw new Error("Invalid arguments for Select2: " + b);
                    };
                }

                return null == a.fn.select2.defaults && (a.fn.select2.defaults = d), c;
            }), {
                define: b.define,
                require: b.require
            };
        }(),
        c = b.require("jquery.select2");

    return a.fn.select2.amd = b, c;
});
"use strict";

function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
            return typeof obj;
        };
    } else {
        _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
    }
    return _typeof(obj);
}

/**
 * Swiper 4.5.0
 * Most modern mobile touch slider and framework with hardware accelerated transitions
 * http://www.idangero.us/swiper/
 *
 * Copyright 2014-2019 Vladimir Kharlampidi
 *
 * Released under the MIT License
 *
 * Released on: February 22, 2019
 */
!function (e, t) {
    "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = e || self).Swiper = t();
}(void 0, function () {
    "use strict";

    var f = "undefined" == typeof document ? {
            body: {},
            addEventListener: function addEventListener() {
            },
            removeEventListener: function removeEventListener() {
            },
            activeElement: {
                blur: function blur() {
                },
                nodeName: ""
            },
            querySelector: function querySelector() {
                return null;
            },
            querySelectorAll: function querySelectorAll() {
                return [];
            },
            getElementById: function getElementById() {
                return null;
            },
            createEvent: function createEvent() {
                return {
                    initEvent: function initEvent() {
                    }
                };
            },
            createElement: function createElement() {
                return {
                    children: [],
                    childNodes: [],
                    style: {},
                    setAttribute: function setAttribute() {
                    },
                    getElementsByTagName: function getElementsByTagName() {
                        return [];
                    }
                };
            },
            location: {
                hash: ""
            }
        } : document,
        J = "undefined" == typeof window ? {
            document: f,
            navigator: {
                userAgent: ""
            },
            location: {},
            history: {},
            CustomEvent: function CustomEvent() {
                return this;
            },
            addEventListener: function addEventListener() {
            },
            removeEventListener: function removeEventListener() {
            },
            getComputedStyle: function getComputedStyle() {
                return {
                    getPropertyValue: function getPropertyValue() {
                        return "";
                    }
                };
            },
            Image: function Image() {
            },
            Date: function Date() {
            },
            screen: {},
            setTimeout: function setTimeout() {
            },
            clearTimeout: function clearTimeout() {
            }
        } : window,
        l = function l(e) {
            for (var t = 0; t < e.length; t += 1) {
                this[t] = e[t];
            }

            return this.length = e.length, this;
        };

    function L(e, t) {
        var a = [],
            i = 0;
        if (e && !t && e instanceof l) return e;
        if (e)
            if ("string" == typeof e) {
                var s,
                    r,
                    n = e.trim();

                if (0 <= n.indexOf("<") && 0 <= n.indexOf(">")) {
                    var o = "div";

                    for (0 === n.indexOf("<li") && (o = "ul"), 0 === n.indexOf("<tr") && (o = "tbody"), 0 !== n.indexOf("<td") && 0 !== n.indexOf("<th") || (o = "tr"), 0 === n.indexOf("<tbody") && (o = "table"), 0 === n.indexOf("<option") && (o = "select"), (r = f.createElement(o)).innerHTML = n, i = 0; i < r.childNodes.length; i += 1) {
                        a.push(r.childNodes[i]);
                    }
                } else
                    for (s = t || "#" !== e[0] || e.match(/[ .<>:~]/) ? (t || f).querySelectorAll(e.trim()) : [f.getElementById(e.trim().split("#")[1])], i = 0; i < s.length; i += 1) {
                        s[i] && a.push(s[i]);
                    }
            } else if (e.nodeType || e === J || e === f) a.push(e);
            else if (0 < e.length && e[0].nodeType)
                for (i = 0; i < e.length; i += 1) {
                    a.push(e[i]);
                }
        return new l(a);
    }

    function r(e) {
        for (var t = [], a = 0; a < e.length; a += 1) {
            -1 === t.indexOf(e[a]) && t.push(e[a]);
        }

        return t;
    }

    L.fn = l.prototype, L.Class = l, L.Dom7 = l;
    var t = {
        addClass: function addClass(e) {
            if (void 0 === e) return this;

            for (var t = e.split(" "), a = 0; a < t.length; a += 1) {
                for (var i = 0; i < this.length; i += 1) {
                    void 0 !== this[i] && void 0 !== this[i].classList && this[i].classList.add(t[a]);
                }
            }

            return this;
        },
        removeClass: function removeClass(e) {
            for (var t = e.split(" "), a = 0; a < t.length; a += 1) {
                for (var i = 0; i < this.length; i += 1) {
                    void 0 !== this[i] && void 0 !== this[i].classList && this[i].classList.remove(t[a]);
                }
            }

            return this;
        },
        hasClass: function hasClass(e) {
            return !!this[0] && this[0].classList.contains(e);
        },
        toggleClass: function toggleClass(e) {
            for (var t = e.split(" "), a = 0; a < t.length; a += 1) {
                for (var i = 0; i < this.length; i += 1) {
                    void 0 !== this[i] && void 0 !== this[i].classList && this[i].classList.toggle(t[a]);
                }
            }

            return this;
        },
        attr: function attr(e, t) {
            var a = arguments;
            if (1 === arguments.length && "string" == typeof e) return this[0] ? this[0].getAttribute(e) : void 0;

            for (var i = 0; i < this.length; i += 1) {
                if (2 === a.length) this[i].setAttribute(e, t);
                else
                    for (var s in e) {
                        this[i][s] = e[s], this[i].setAttribute(s, e[s]);
                    }
            }

            return this;
        },
        removeAttr: function removeAttr(e) {
            for (var t = 0; t < this.length; t += 1) {
                this[t].removeAttribute(e);
            }

            return this;
        },
        data: function data(e, t) {
            var a;

            if (void 0 !== t) {
                for (var i = 0; i < this.length; i += 1) {
                    (a = this[i]).dom7ElementDataStorage || (a.dom7ElementDataStorage = {}), a.dom7ElementDataStorage[e] = t;
                }

                return this;
            }

            if (a = this[0]) {
                if (a.dom7ElementDataStorage && e in a.dom7ElementDataStorage) return a.dom7ElementDataStorage[e];
                var s = a.getAttribute("data-" + e);
                return s || void 0;
            }
        },
        transform: function transform(e) {
            for (var t = 0; t < this.length; t += 1) {
                var a = this[t].style;
                a.webkitTransform = e, a.transform = e;
            }

            return this;
        },
        transition: function transition(e) {
            "string" != typeof e && (e += "ms");

            for (var t = 0; t < this.length; t += 1) {
                var a = this[t].style;
                a.webkitTransitionDuration = e, a.transitionDuration = e;
            }

            return this;
        },
        on: function on() {
            for (var e, t = [], a = arguments.length; a--;) {
                t[a] = arguments[a];
            }

            var i = t[0],
                r = t[1],
                n = t[2],
                s = t[3];

            function o(e) {
                var t = e.target;

                if (t) {
                    var a = e.target.dom7EventData || [];
                    if (a.indexOf(e) < 0 && a.unshift(e), L(t).is(r)) n.apply(t, a);
                    else
                        for (var i = L(t).parents(), s = 0; s < i.length; s += 1) {
                            L(i[s]).is(r) && n.apply(i[s], a);
                        }
                }
            }

            function l(e) {
                var t = e && e.target && e.target.dom7EventData || [];
                t.indexOf(e) < 0 && t.unshift(e), n.apply(this, t);
            }

            "function" == typeof t[1] && (i = (e = t)[0], n = e[1], s = e[2], r = void 0), s || (s = !1);

            for (var d, p = i.split(" "), c = 0; c < this.length; c += 1) {
                var u = this[c];
                if (r)
                    for (d = 0; d < p.length; d += 1) {
                        var h = p[d];
                        u.dom7LiveListeners || (u.dom7LiveListeners = {}), u.dom7LiveListeners[h] || (u.dom7LiveListeners[h] = []), u.dom7LiveListeners[h].push({
                            listener: n,
                            proxyListener: o
                        }), u.addEventListener(h, o, s);
                    } else
                    for (d = 0; d < p.length; d += 1) {
                        var v = p[d];
                        u.dom7Listeners || (u.dom7Listeners = {}), u.dom7Listeners[v] || (u.dom7Listeners[v] = []), u.dom7Listeners[v].push({
                            listener: n,
                            proxyListener: l
                        }), u.addEventListener(v, l, s);
                    }
            }

            return this;
        },
        off: function off() {
            for (var e, t = [], a = arguments.length; a--;) {
                t[a] = arguments[a];
            }

            var i = t[0],
                s = t[1],
                r = t[2],
                n = t[3];
            "function" == typeof t[1] && (i = (e = t)[0], r = e[1], n = e[2], s = void 0), n || (n = !1);

            for (var o = i.split(" "), l = 0; l < o.length; l += 1) {
                for (var d = o[l], p = 0; p < this.length; p += 1) {
                    var c = this[p],
                        u = void 0;
                    if (!s && c.dom7Listeners ? u = c.dom7Listeners[d] : s && c.dom7LiveListeners && (u = c.dom7LiveListeners[d]), u && u.length)
                        for (var h = u.length - 1; 0 <= h; h -= 1) {
                            var v = u[h];
                            r && v.listener === r ? (c.removeEventListener(d, v.proxyListener, n), u.splice(h, 1)) : r && v.listener && v.listener.dom7proxy && v.listener.dom7proxy === r ? (c.removeEventListener(d, v.proxyListener, n), u.splice(h, 1)) : r || (c.removeEventListener(d, v.proxyListener, n), u.splice(h, 1));
                        }
                }
            }

            return this;
        },
        trigger: function trigger() {
            for (var e = [], t = arguments.length; t--;) {
                e[t] = arguments[t];
            }

            for (var a = e[0].split(" "), i = e[1], s = 0; s < a.length; s += 1) {
                for (var r = a[s], n = 0; n < this.length; n += 1) {
                    var o = this[n],
                        l = void 0;

                    try {
                        l = new J.CustomEvent(r, {
                            detail: i,
                            bubbles: !0,
                            cancelable: !0
                        });
                    } catch (e) {
                        (l = f.createEvent("Event")).initEvent(r, !0, !0), l.detail = i;
                    }

                    o.dom7EventData = e.filter(function (e, t) {
                        return 0 < t;
                    }), o.dispatchEvent(l), o.dom7EventData = [], delete o.dom7EventData;
                }
            }

            return this;
        },
        transitionEnd: function transitionEnd(t) {
            var a,
                i = ["webkitTransitionEnd", "transitionend"],
                s = this;

            function r(e) {
                if (e.target === this)
                    for (t.call(this, e), a = 0; a < i.length; a += 1) {
                        s.off(i[a], r);
                    }
            }

            if (t)
                for (a = 0; a < i.length; a += 1) {
                    s.on(i[a], r);
                }
            return this;
        },
        outerWidth: function outerWidth(e) {
            if (0 < this.length) {
                if (e) {
                    var t = this.styles();
                    return this[0].offsetWidth + parseFloat(t.getPropertyValue("margin-right")) + parseFloat(t.getPropertyValue("margin-left"));
                }

                return this[0].offsetWidth;
            }

            return null;
        },
        outerHeight: function outerHeight(e) {
            if (0 < this.length) {
                if (e) {
                    var t = this.styles();
                    return this[0].offsetHeight + parseFloat(t.getPropertyValue("margin-top")) + parseFloat(t.getPropertyValue("margin-bottom"));
                }

                return this[0].offsetHeight;
            }

            return null;
        },
        offset: function offset() {
            if (0 < this.length) {
                var e = this[0],
                    t = e.getBoundingClientRect(),
                    a = f.body,
                    i = e.clientTop || a.clientTop || 0,
                    s = e.clientLeft || a.clientLeft || 0,
                    r = e === J ? J.scrollY : e.scrollTop,
                    n = e === J ? J.scrollX : e.scrollLeft;
                return {
                    top: t.top + r - i,
                    left: t.left + n - s
                };
            }

            return null;
        },
        css: function css(e, t) {
            var a;

            if (1 === arguments.length) {
                if ("string" != typeof e) {
                    for (a = 0; a < this.length; a += 1) {
                        for (var i in e) {
                            this[a].style[i] = e[i];
                        }
                    }

                    return this;
                }

                if (this[0]) return J.getComputedStyle(this[0], null).getPropertyValue(e);
            }

            if (2 === arguments.length && "string" == typeof e) {
                for (a = 0; a < this.length; a += 1) {
                    this[a].style[e] = t;
                }

                return this;
            }

            return this;
        },
        each: function each(e) {
            if (!e) return this;

            for (var t = 0; t < this.length; t += 1) {
                if (!1 === e.call(this[t], t, this[t])) return this;
            }

            return this;
        },
        html: function html(e) {
            if (void 0 === e) return this[0] ? this[0].innerHTML : void 0;

            for (var t = 0; t < this.length; t += 1) {
                this[t].innerHTML = e;
            }

            return this;
        },
        text: function text(e) {
            if (void 0 === e) return this[0] ? this[0].textContent.trim() : null;

            for (var t = 0; t < this.length; t += 1) {
                this[t].textContent = e;
            }

            return this;
        },
        is: function is(e) {
            var t,
                a,
                i = this[0];
            if (!i || void 0 === e) return !1;

            if ("string" == typeof e) {
                if (i.matches) return i.matches(e);
                if (i.webkitMatchesSelector) return i.webkitMatchesSelector(e);
                if (i.msMatchesSelector) return i.msMatchesSelector(e);

                for (t = L(e), a = 0; a < t.length; a += 1) {
                    if (t[a] === i) return !0;
                }

                return !1;
            }

            if (e === f) return i === f;
            if (e === J) return i === J;

            if (e.nodeType || e instanceof l) {
                for (t = e.nodeType ? [e] : e, a = 0; a < t.length; a += 1) {
                    if (t[a] === i) return !0;
                }

                return !1;
            }

            return !1;
        },
        index: function index() {
            var e,
                t = this[0];

            if (t) {
                for (e = 0; null !== (t = t.previousSibling);) {
                    1 === t.nodeType && (e += 1);
                }

                return e;
            }
        },
        eq: function eq(e) {
            if (void 0 === e) return this;
            var t,
                a = this.length;
            return new l(a - 1 < e ? [] : e < 0 ? (t = a + e) < 0 ? [] : [this[t]] : [this[e]]);
        },
        append: function append() {
            for (var e, t = [], a = arguments.length; a--;) {
                t[a] = arguments[a];
            }

            for (var i = 0; i < t.length; i += 1) {
                e = t[i];

                for (var s = 0; s < this.length; s += 1) {
                    if ("string" == typeof e) {
                        var r = f.createElement("div");

                        for (r.innerHTML = e; r.firstChild;) {
                            this[s].appendChild(r.firstChild);
                        }
                    } else if (e instanceof l)
                        for (var n = 0; n < e.length; n += 1) {
                            this[s].appendChild(e[n]);
                        } else this[s].appendChild(e);
                }
            }

            return this;
        },
        prepend: function prepend(e) {
            var t, a;

            for (t = 0; t < this.length; t += 1) {
                if ("string" == typeof e) {
                    var i = f.createElement("div");

                    for (i.innerHTML = e, a = i.childNodes.length - 1; 0 <= a; a -= 1) {
                        this[t].insertBefore(i.childNodes[a], this[t].childNodes[0]);
                    }
                } else if (e instanceof l)
                    for (a = 0; a < e.length; a += 1) {
                        this[t].insertBefore(e[a], this[t].childNodes[0]);
                    } else this[t].insertBefore(e, this[t].childNodes[0]);
            }

            return this;
        },
        next: function next(e) {
            return 0 < this.length ? e ? this[0].nextElementSibling && L(this[0].nextElementSibling).is(e) ? new l([this[0].nextElementSibling]) : new l([]) : this[0].nextElementSibling ? new l([this[0].nextElementSibling]) : new l([]) : new l([]);
        },
        nextAll: function nextAll(e) {
            var t = [],
                a = this[0];
            if (!a) return new l([]);

            for (; a.nextElementSibling;) {
                var i = a.nextElementSibling;
                e ? L(i).is(e) && t.push(i) : t.push(i), a = i;
            }

            return new l(t);
        },
        prev: function prev(e) {
            if (0 < this.length) {
                var t = this[0];
                return e ? t.previousElementSibling && L(t.previousElementSibling).is(e) ? new l([t.previousElementSibling]) : new l([]) : t.previousElementSibling ? new l([t.previousElementSibling]) : new l([]);
            }

            return new l([]);
        },
        prevAll: function prevAll(e) {
            var t = [],
                a = this[0];
            if (!a) return new l([]);

            for (; a.previousElementSibling;) {
                var i = a.previousElementSibling;
                e ? L(i).is(e) && t.push(i) : t.push(i), a = i;
            }

            return new l(t);
        },
        parent: function parent(e) {
            for (var t = [], a = 0; a < this.length; a += 1) {
                null !== this[a].parentNode && (e ? L(this[a].parentNode).is(e) && t.push(this[a].parentNode) : t.push(this[a].parentNode));
            }

            return L(r(t));
        },
        parents: function parents(e) {
            for (var t = [], a = 0; a < this.length; a += 1) {
                for (var i = this[a].parentNode; i;) {
                    e ? L(i).is(e) && t.push(i) : t.push(i), i = i.parentNode;
                }
            }

            return L(r(t));
        },
        closest: function closest(e) {
            var t = this;
            return void 0 === e ? new l([]) : (t.is(e) || (t = t.parents(e).eq(0)), t);
        },
        find: function find(e) {
            for (var t = [], a = 0; a < this.length; a += 1) {
                for (var i = this[a].querySelectorAll(e), s = 0; s < i.length; s += 1) {
                    t.push(i[s]);
                }
            }

            return new l(t);
        },
        children: function children(e) {
            for (var t = [], a = 0; a < this.length; a += 1) {
                for (var i = this[a].childNodes, s = 0; s < i.length; s += 1) {
                    e ? 1 === i[s].nodeType && L(i[s]).is(e) && t.push(i[s]) : 1 === i[s].nodeType && t.push(i[s]);
                }
            }

            return new l(r(t));
        },
        remove: function remove() {
            for (var e = 0; e < this.length; e += 1) {
                this[e].parentNode && this[e].parentNode.removeChild(this[e]);
            }

            return this;
        },
        add: function add() {
            for (var e = [], t = arguments.length; t--;) {
                e[t] = arguments[t];
            }

            var a, i;

            for (a = 0; a < e.length; a += 1) {
                var s = L(e[a]);

                for (i = 0; i < s.length; i += 1) {
                    this[this.length] = s[i], this.length += 1;
                }
            }

            return this;
        },
        styles: function styles() {
            return this[0] ? J.getComputedStyle(this[0], null) : {};
        }
    };
    Object.keys(t).forEach(function (e) {
        L.fn[e] = t[e];
    });

    var e,
        a,
        i,
        s,
        ee = {
            deleteProps: function deleteProps(e) {
                var t = e;
                Object.keys(t).forEach(function (e) {
                    try {
                        t[e] = null;
                    } catch (e) {
                    }

                    try {
                        delete t[e];
                    } catch (e) {
                    }
                });
            },
            nextTick: function nextTick(e, t) {
                return void 0 === t && (t = 0), setTimeout(e, t);
            },
            now: function now() {
                return Date.now();
            },
            getTranslate: function getTranslate(e, t) {
                var a, i, s;
                void 0 === t && (t = "x");
                var r = J.getComputedStyle(e, null);
                return J.WebKitCSSMatrix ? (6 < (i = r.transform || r.webkitTransform).split(",").length && (i = i.split(", ").map(function (e) {
                    return e.replace(",", ".");
                }).join(", ")), s = new J.WebKitCSSMatrix("none" === i ? "" : i)) : a = (s = r.MozTransform || r.OTransform || r.MsTransform || r.msTransform || r.transform || r.getPropertyValue("transform").replace("translate(", "matrix(1, 0, 0, 1,")).toString().split(","), "x" === t && (i = J.WebKitCSSMatrix ? s.m41 : 16 === a.length ? parseFloat(a[12]) : parseFloat(a[4])), "y" === t && (i = J.WebKitCSSMatrix ? s.m42 : 16 === a.length ? parseFloat(a[13]) : parseFloat(a[5])), i || 0;
            },
            parseUrlQuery: function parseUrlQuery(e) {
                var t,
                    a,
                    i,
                    s,
                    r = {},
                    n = e || J.location.href;
                if ("string" == typeof n && n.length)
                    for (s = (a = (n = -1 < n.indexOf("?") ? n.replace(/\S*\?/, "") : "").split("&").filter(function (e) {
                        return "" !== e;
                    })).length, t = 0; t < s; t += 1) {
                        i = a[t].replace(/#\S+/g, "").split("="), r[decodeURIComponent(i[0])] = void 0 === i[1] ? void 0 : decodeURIComponent(i[1]) || "";
                    }
                return r;
            },
            isObject: function isObject(e) {
                return "object" == _typeof(e) && null !== e && e.constructor && e.constructor === Object;
            },
            extend: function extend() {
                for (var e = [], t = arguments.length; t--;) {
                    e[t] = arguments[t];
                }

                for (var a = Object(e[0]), i = 1; i < e.length; i += 1) {
                    var s = e[i];
                    if (null != s)
                        for (var r = Object.keys(Object(s)), n = 0, o = r.length; n < o; n += 1) {
                            var l = r[n],
                                d = Object.getOwnPropertyDescriptor(s, l);
                            void 0 !== d && d.enumerable && (ee.isObject(a[l]) && ee.isObject(s[l]) ? ee.extend(a[l], s[l]) : !ee.isObject(a[l]) && ee.isObject(s[l]) ? (a[l] = {}, ee.extend(a[l], s[l])) : a[l] = s[l]);
                        }
                }

                return a;
            }
        },
        te = (i = f.createElement("div"), {
            touch: J.Modernizr && !0 === J.Modernizr.touch || !!(0 < J.navigator.maxTouchPoints || "ontouchstart" in J || J.DocumentTouch && f instanceof J.DocumentTouch),
            pointerEvents: !!(J.navigator.pointerEnabled || J.PointerEvent || "maxTouchPoints" in J.navigator && 0 < J.navigator.maxTouchPoints),
            prefixedPointerEvents: !!J.navigator.msPointerEnabled,
            transition: (a = i.style, "transition" in a || "webkitTransition" in a || "MozTransition" in a),
            transforms3d: J.Modernizr && !0 === J.Modernizr.csstransforms3d || (e = i.style, "webkitPerspective" in e || "MozPerspective" in e || "OPerspective" in e || "MsPerspective" in e || "perspective" in e),
            flexbox: function () {
                for (var e = i.style, t = "alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "), a = 0; a < t.length; a += 1) {
                    if (t[a] in e) return !0;
                }

                return !1;
            }(),
            observer: "MutationObserver" in J || "WebkitMutationObserver" in J,
            passiveListener: function () {
                var e = !1;

                try {
                    var t = Object.defineProperty({}, "passive", {
                        get: function get() {
                            e = !0;
                        }
                    });
                    J.addEventListener("testPassiveListener", null, t);
                } catch (e) {
                }

                return e;
            }(),
            gestures: "ongesturestart" in J
        }),
        I = {
            isIE: !!J.navigator.userAgent.match(/Trident/g) || !!J.navigator.userAgent.match(/MSIE/g),
            isEdge: !!J.navigator.userAgent.match(/Edge/g),
            isSafari: (s = J.navigator.userAgent.toLowerCase(), 0 <= s.indexOf("safari") && s.indexOf("chrome") < 0 && s.indexOf("android") < 0),
            isUiWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(J.navigator.userAgent)
        },
        n = function n(e) {
            void 0 === e && (e = {});
            var t = this;
            t.params = e, t.eventsListeners = {}, t.params && t.params.on && Object.keys(t.params.on).forEach(function (e) {
                t.on(e, t.params.on[e]);
            });
        },
        o = {
            components: {
                configurable: !0
            }
        };

    n.prototype.on = function (e, t, a) {
        var i = this;
        if ("function" != typeof t) return i;
        var s = a ? "unshift" : "push";
        return e.split(" ").forEach(function (e) {
            i.eventsListeners[e] || (i.eventsListeners[e] = []), i.eventsListeners[e][s](t);
        }), i;
    }, n.prototype.once = function (a, i, e) {
        var s = this;
        if ("function" != typeof i) return s;

        function r() {
            for (var e = [], t = arguments.length; t--;) {
                e[t] = arguments[t];
            }

            i.apply(s, e), s.off(a, r), r.f7proxy && delete r.f7proxy;
        }

        return r.f7proxy = i, s.on(a, r, e);
    }, n.prototype.off = function (e, i) {
        var s = this;
        return s.eventsListeners && e.split(" ").forEach(function (a) {
            void 0 === i ? s.eventsListeners[a] = [] : s.eventsListeners[a] && s.eventsListeners[a].length && s.eventsListeners[a].forEach(function (e, t) {
                (e === i || e.f7proxy && e.f7proxy === i) && s.eventsListeners[a].splice(t, 1);
            });
        }), s;
    }, n.prototype.emit = function () {
        for (var e = [], t = arguments.length; t--;) {
            e[t] = arguments[t];
        }

        var a,
            i,
            s,
            r = this;
        return r.eventsListeners && ("string" == typeof e[0] || Array.isArray(e[0]) ? (a = e[0], i = e.slice(1, e.length), s = r) : (a = e[0].events, i = e[0].data, s = e[0].context || r), (Array.isArray(a) ? a : a.split(" ")).forEach(function (e) {
            if (r.eventsListeners && r.eventsListeners[e]) {
                var t = [];
                r.eventsListeners[e].forEach(function (e) {
                    t.push(e);
                }), t.forEach(function (e) {
                    e.apply(s, i);
                });
            }
        })), r;
    }, n.prototype.useModulesParams = function (a) {
        var i = this;
        i.modules && Object.keys(i.modules).forEach(function (e) {
            var t = i.modules[e];
            t.params && ee.extend(a, t.params);
        });
    }, n.prototype.useModules = function (i) {
        void 0 === i && (i = {});
        var s = this;
        s.modules && Object.keys(s.modules).forEach(function (e) {
            var a = s.modules[e],
                t = i[e] || {};
            a.instance && Object.keys(a.instance).forEach(function (e) {
                var t = a.instance[e];
                s[e] = "function" == typeof t ? t.bind(s) : t;
            }), a.on && s.on && Object.keys(a.on).forEach(function (e) {
                s.on(e, a.on[e]);
            }), a.create && a.create.bind(s)(t);
        });
    }, o.components.set = function (e) {
        this.use && this.use(e);
    }, n.installModule = function (t) {
        for (var e = [], a = arguments.length - 1; 0 < a--;) {
            e[a] = arguments[a + 1];
        }

        var i = this;
        i.prototype.modules || (i.prototype.modules = {});
        var s = t.name || Object.keys(i.prototype.modules).length + "_" + ee.now();
        return (i.prototype.modules[s] = t).proto && Object.keys(t.proto).forEach(function (e) {
            i.prototype[e] = t.proto[e];
        }), t["static"] && Object.keys(t["static"]).forEach(function (e) {
            i[e] = t["static"][e];
        }), t.install && t.install.apply(i, e), i;
    }, n.use = function (e) {
        for (var t = [], a = arguments.length - 1; 0 < a--;) {
            t[a] = arguments[a + 1];
        }

        var i = this;
        return Array.isArray(e) ? (e.forEach(function (e) {
            return i.installModule(e);
        }), i) : i.installModule.apply(i, [e].concat(t));
    }, Object.defineProperties(n, o);
    var d = {
        updateSize: function updateSize() {
            var e,
                t,
                a = this,
                i = a.$el;
            e = void 0 !== a.params.width ? a.params.width : i[0].clientWidth, t = void 0 !== a.params.height ? a.params.height : i[0].clientHeight, 0 === e && a.isHorizontal() || 0 === t && a.isVertical() || (e = e - parseInt(i.css("padding-left"), 10) - parseInt(i.css("padding-right"), 10), t = t - parseInt(i.css("padding-top"), 10) - parseInt(i.css("padding-bottom"), 10), ee.extend(a, {
                width: e,
                height: t,
                size: a.isHorizontal() ? e : t
            }));
        },
        updateSlides: function updateSlides() {
            var e = this,
                t = e.params,
                a = e.$wrapperEl,
                i = e.size,
                s = e.rtlTranslate,
                r = e.wrongRTL,
                n = e.virtual && t.virtual.enabled,
                o = n ? e.virtual.slides.length : e.slides.length,
                l = a.children("." + e.params.slideClass),
                d = n ? e.virtual.slides.length : l.length,
                p = [],
                c = [],
                u = [],
                h = t.slidesOffsetBefore;
            "function" == typeof h && (h = t.slidesOffsetBefore.call(e));
            var v = t.slidesOffsetAfter;
            "function" == typeof v && (v = t.slidesOffsetAfter.call(e));
            var f = e.snapGrid.length,
                m = e.snapGrid.length,
                g = t.spaceBetween,
                b = -h,
                w = 0,
                y = 0;

            if (void 0 !== i) {
                var x, T;
                "string" == typeof g && 0 <= g.indexOf("%") && (g = parseFloat(g.replace("%", "")) / 100 * i), e.virtualSize = -g, s ? l.css({
                    marginLeft: "",
                    marginTop: ""
                }) : l.css({
                    marginRight: "",
                    marginBottom: ""
                }), 1 < t.slidesPerColumn && (x = Math.floor(d / t.slidesPerColumn) === d / e.params.slidesPerColumn ? d : Math.ceil(d / t.slidesPerColumn) * t.slidesPerColumn, "auto" !== t.slidesPerView && "row" === t.slidesPerColumnFill && (x = Math.max(x, t.slidesPerView * t.slidesPerColumn)));

                for (var E, S = t.slidesPerColumn, C = x / S, M = Math.floor(d / t.slidesPerColumn), z = 0; z < d; z += 1) {
                    T = 0;
                    var P = l.eq(z);

                    if (1 < t.slidesPerColumn) {
                        var k = void 0,
                            $ = void 0,
                            L = void 0;
                        "column" === t.slidesPerColumnFill ? (L = z - ($ = Math.floor(z / S)) * S, (M < $ || $ === M && L === S - 1) && S <= (L += 1) && (L = 0, $ += 1), k = $ + L * x / S, P.css({
                            "-webkit-box-ordinal-group": k,
                            "-moz-box-ordinal-group": k,
                            "-ms-flex-order": k,
                            "-webkit-order": k,
                            order: k
                        })) : $ = z - (L = Math.floor(z / C)) * C, P.css("margin-" + (e.isHorizontal() ? "top" : "left"), 0 !== L && t.spaceBetween && t.spaceBetween + "px").attr("data-swiper-column", $).attr("data-swiper-row", L);
                    }

                    if ("none" !== P.css("display")) {
                        if ("auto" === t.slidesPerView) {
                            var I = J.getComputedStyle(P[0], null),
                                D = P[0].style.transform,
                                O = P[0].style.webkitTransform;
                            if (D && (P[0].style.transform = "none"), O && (P[0].style.webkitTransform = "none"), t.roundLengths) T = e.isHorizontal() ? P.outerWidth(!0) : P.outerHeight(!0);
                            else if (e.isHorizontal()) {
                                var A = parseFloat(I.getPropertyValue("width")),
                                    H = parseFloat(I.getPropertyValue("padding-left")),
                                    N = parseFloat(I.getPropertyValue("padding-right")),
                                    G = parseFloat(I.getPropertyValue("margin-left")),
                                    B = parseFloat(I.getPropertyValue("margin-right")),
                                    X = I.getPropertyValue("box-sizing");
                                T = X && "border-box" === X ? A + G + B : A + H + N + G + B;
                            } else {
                                var Y = parseFloat(I.getPropertyValue("height")),
                                    V = parseFloat(I.getPropertyValue("padding-top")),
                                    F = parseFloat(I.getPropertyValue("padding-bottom")),
                                    R = parseFloat(I.getPropertyValue("margin-top")),
                                    q = parseFloat(I.getPropertyValue("margin-bottom")),
                                    W = I.getPropertyValue("box-sizing");
                                T = W && "border-box" === W ? Y + R + q : Y + V + F + R + q;
                            }
                            D && (P[0].style.transform = D), O && (P[0].style.webkitTransform = O), t.roundLengths && (T = Math.floor(T));
                        } else T = (i - (t.slidesPerView - 1) * g) / t.slidesPerView, t.roundLengths && (T = Math.floor(T)), l[z] && (e.isHorizontal() ? l[z].style.width = T + "px" : l[z].style.height = T + "px");

                        l[z] && (l[z].swiperSlideSize = T), u.push(T), t.centeredSlides ? (b = b + T / 2 + w / 2 + g, 0 === w && 0 !== z && (b = b - i / 2 - g), 0 === z && (b = b - i / 2 - g), Math.abs(b) < .001 && (b = 0), t.roundLengths && (b = Math.floor(b)), y % t.slidesPerGroup == 0 && p.push(b), c.push(b)) : (t.roundLengths && (b = Math.floor(b)), y % t.slidesPerGroup == 0 && p.push(b), c.push(b), b = b + T + g), e.virtualSize += T + g, w = T, y += 1;
                    }
                }

                if (e.virtualSize = Math.max(e.virtualSize, i) + v, s && r && ("slide" === t.effect || "coverflow" === t.effect) && a.css({
                    width: e.virtualSize + t.spaceBetween + "px"
                }), te.flexbox && !t.setWrapperSize || (e.isHorizontal() ? a.css({
                    width: e.virtualSize + t.spaceBetween + "px"
                }) : a.css({
                    height: e.virtualSize + t.spaceBetween + "px"
                })), 1 < t.slidesPerColumn && (e.virtualSize = (T + t.spaceBetween) * x, e.virtualSize = Math.ceil(e.virtualSize / t.slidesPerColumn) - t.spaceBetween, e.isHorizontal() ? a.css({
                    width: e.virtualSize + t.spaceBetween + "px"
                }) : a.css({
                    height: e.virtualSize + t.spaceBetween + "px"
                }), t.centeredSlides)) {
                    E = [];

                    for (var j = 0; j < p.length; j += 1) {
                        var U = p[j];
                        t.roundLengths && (U = Math.floor(U)), p[j] < e.virtualSize + p[0] && E.push(U);
                    }

                    p = E;
                }

                if (!t.centeredSlides) {
                    E = [];

                    for (var K = 0; K < p.length; K += 1) {
                        var _ = p[K];
                        t.roundLengths && (_ = Math.floor(_)), p[K] <= e.virtualSize - i && E.push(_);
                    }

                    p = E, 1 < Math.floor(e.virtualSize - i) - Math.floor(p[p.length - 1]) && p.push(e.virtualSize - i);
                }

                if (0 === p.length && (p = [0]), 0 !== t.spaceBetween && (e.isHorizontal() ? s ? l.css({
                    marginLeft: g + "px"
                }) : l.css({
                    marginRight: g + "px"
                }) : l.css({
                    marginBottom: g + "px"
                })), t.centerInsufficientSlides) {
                    var Z = 0;

                    if (u.forEach(function (e) {
                        Z += e + (t.spaceBetween ? t.spaceBetween : 0);
                    }), (Z -= t.spaceBetween) < i) {
                        var Q = (i - Z) / 2;
                        p.forEach(function (e, t) {
                            p[t] = e - Q;
                        }), c.forEach(function (e, t) {
                            c[t] = e + Q;
                        });
                    }
                }

                ee.extend(e, {
                    slides: l,
                    snapGrid: p,
                    slidesGrid: c,
                    slidesSizesGrid: u
                }), d !== o && e.emit("slidesLengthChange"), p.length !== f && (e.params.watchOverflow && e.checkOverflow(), e.emit("snapGridLengthChange")), c.length !== m && e.emit("slidesGridLengthChange"), (t.watchSlidesProgress || t.watchSlidesVisibility) && e.updateSlidesOffset();
            }
        },
        updateAutoHeight: function updateAutoHeight(e) {
            var t,
                a = this,
                i = [],
                s = 0;
            if ("number" == typeof e ? a.setTransition(e) : !0 === e && a.setTransition(a.params.speed), "auto" !== a.params.slidesPerView && 1 < a.params.slidesPerView)
                for (t = 0; t < Math.ceil(a.params.slidesPerView); t += 1) {
                    var r = a.activeIndex + t;
                    if (r > a.slides.length) break;
                    i.push(a.slides.eq(r)[0]);
                } else i.push(a.slides.eq(a.activeIndex)[0]);

            for (t = 0; t < i.length; t += 1) {
                if (void 0 !== i[t]) {
                    var n = i[t].offsetHeight;
                    s = s < n ? n : s;
                }
            }

            s && a.$wrapperEl.css("height", s + "px");
        },
        updateSlidesOffset: function updateSlidesOffset() {
            for (var e = this.slides, t = 0; t < e.length; t += 1) {
                e[t].swiperSlideOffset = this.isHorizontal() ? e[t].offsetLeft : e[t].offsetTop;
            }
        },
        updateSlidesProgress: function updateSlidesProgress(e) {
            void 0 === e && (e = this && this.translate || 0);
            var t = this,
                a = t.params,
                i = t.slides,
                s = t.rtlTranslate;

            if (0 !== i.length) {
                void 0 === i[0].swiperSlideOffset && t.updateSlidesOffset();
                var r = -e;
                s && (r = e), i.removeClass(a.slideVisibleClass), t.visibleSlidesIndexes = [], t.visibleSlides = [];

                for (var n = 0; n < i.length; n += 1) {
                    var o = i[n],
                        l = (r + (a.centeredSlides ? t.minTranslate() : 0) - o.swiperSlideOffset) / (o.swiperSlideSize + a.spaceBetween);

                    if (a.watchSlidesVisibility) {
                        var d = -(r - o.swiperSlideOffset),
                            p = d + t.slidesSizesGrid[n];
                        (0 <= d && d < t.size || 0 < p && p <= t.size || d <= 0 && p >= t.size) && (t.visibleSlides.push(o), t.visibleSlidesIndexes.push(n), i.eq(n).addClass(a.slideVisibleClass));
                    }

                    o.progress = s ? -l : l;
                }

                t.visibleSlides = L(t.visibleSlides);
            }
        },
        updateProgress: function updateProgress(e) {
            void 0 === e && (e = this && this.translate || 0);
            var t = this,
                a = t.params,
                i = t.maxTranslate() - t.minTranslate(),
                s = t.progress,
                r = t.isBeginning,
                n = t.isEnd,
                o = r,
                l = n;
            0 === i ? n = r = !(s = 0) : (r = (s = (e - t.minTranslate()) / i) <= 0, n = 1 <= s), ee.extend(t, {
                progress: s,
                isBeginning: r,
                isEnd: n
            }), (a.watchSlidesProgress || a.watchSlidesVisibility) && t.updateSlidesProgress(e), r && !o && t.emit("reachBeginning toEdge"), n && !l && t.emit("reachEnd toEdge"), (o && !r || l && !n) && t.emit("fromEdge"), t.emit("progress", s);
        },
        updateSlidesClasses: function updateSlidesClasses() {
            var e,
                t = this,
                a = t.slides,
                i = t.params,
                s = t.$wrapperEl,
                r = t.activeIndex,
                n = t.realIndex,
                o = t.virtual && i.virtual.enabled;
            a.removeClass(i.slideActiveClass + " " + i.slideNextClass + " " + i.slidePrevClass + " " + i.slideDuplicateActiveClass + " " + i.slideDuplicateNextClass + " " + i.slideDuplicatePrevClass), (e = o ? t.$wrapperEl.find("." + i.slideClass + '[data-swiper-slide-index="' + r + '"]') : a.eq(r)).addClass(i.slideActiveClass), i.loop && (e.hasClass(i.slideDuplicateClass) ? s.children("." + i.slideClass + ":not(." + i.slideDuplicateClass + ')[data-swiper-slide-index="' + n + '"]').addClass(i.slideDuplicateActiveClass) : s.children("." + i.slideClass + "." + i.slideDuplicateClass + '[data-swiper-slide-index="' + n + '"]').addClass(i.slideDuplicateActiveClass));
            var l = e.nextAll("." + i.slideClass).eq(0).addClass(i.slideNextClass);
            i.loop && 0 === l.length && (l = a.eq(0)).addClass(i.slideNextClass);
            var d = e.prevAll("." + i.slideClass).eq(0).addClass(i.slidePrevClass);
            i.loop && 0 === d.length && (d = a.eq(-1)).addClass(i.slidePrevClass), i.loop && (l.hasClass(i.slideDuplicateClass) ? s.children("." + i.slideClass + ":not(." + i.slideDuplicateClass + ')[data-swiper-slide-index="' + l.attr("data-swiper-slide-index") + '"]').addClass(i.slideDuplicateNextClass) : s.children("." + i.slideClass + "." + i.slideDuplicateClass + '[data-swiper-slide-index="' + l.attr("data-swiper-slide-index") + '"]').addClass(i.slideDuplicateNextClass), d.hasClass(i.slideDuplicateClass) ? s.children("." + i.slideClass + ":not(." + i.slideDuplicateClass + ')[data-swiper-slide-index="' + d.attr("data-swiper-slide-index") + '"]').addClass(i.slideDuplicatePrevClass) : s.children("." + i.slideClass + "." + i.slideDuplicateClass + '[data-swiper-slide-index="' + d.attr("data-swiper-slide-index") + '"]').addClass(i.slideDuplicatePrevClass));
        },
        updateActiveIndex: function updateActiveIndex(e) {
            var t,
                a = this,
                i = a.rtlTranslate ? a.translate : -a.translate,
                s = a.slidesGrid,
                r = a.snapGrid,
                n = a.params,
                o = a.activeIndex,
                l = a.realIndex,
                d = a.snapIndex,
                p = e;

            if (void 0 === p) {
                for (var c = 0; c < s.length; c += 1) {
                    void 0 !== s[c + 1] ? i >= s[c] && i < s[c + 1] - (s[c + 1] - s[c]) / 2 ? p = c : i >= s[c] && i < s[c + 1] && (p = c + 1) : i >= s[c] && (p = c);
                }

                n.normalizeSlideIndex && (p < 0 || void 0 === p) && (p = 0);
            }

            if ((t = 0 <= r.indexOf(i) ? r.indexOf(i) : Math.floor(p / n.slidesPerGroup)) >= r.length && (t = r.length - 1), p !== o) {
                var u = parseInt(a.slides.eq(p).attr("data-swiper-slide-index") || p, 10);
                ee.extend(a, {
                    snapIndex: t,
                    realIndex: u,
                    previousIndex: o,
                    activeIndex: p
                }), a.emit("activeIndexChange"), a.emit("snapIndexChange"), l !== u && a.emit("realIndexChange"), a.emit("slideChange");
            } else t !== d && (a.snapIndex = t, a.emit("snapIndexChange"));
        },
        updateClickedSlide: function updateClickedSlide(e) {
            var t = this,
                a = t.params,
                i = L(e.target).closest("." + a.slideClass)[0],
                s = !1;
            if (i)
                for (var r = 0; r < t.slides.length; r += 1) {
                    t.slides[r] === i && (s = !0);
                }
            if (!i || !s) return t.clickedSlide = void 0, void (t.clickedIndex = void 0);
            t.clickedSlide = i, t.virtual && t.params.virtual.enabled ? t.clickedIndex = parseInt(L(i).attr("data-swiper-slide-index"), 10) : t.clickedIndex = L(i).index(), a.slideToClickedSlide && void 0 !== t.clickedIndex && t.clickedIndex !== t.activeIndex && t.slideToClickedSlide();
        }
    };
    var p = {
        getTranslate: function getTranslate(e) {
            void 0 === e && (e = this.isHorizontal() ? "x" : "y");
            var t = this.params,
                a = this.rtlTranslate,
                i = this.translate,
                s = this.$wrapperEl;
            if (t.virtualTranslate) return a ? -i : i;
            var r = ee.getTranslate(s[0], e);
            return a && (r = -r), r || 0;
        },
        setTranslate: function setTranslate(e, t) {
            var a = this,
                i = a.rtlTranslate,
                s = a.params,
                r = a.$wrapperEl,
                n = a.progress,
                o = 0,
                l = 0;
            a.isHorizontal() ? o = i ? -e : e : l = e, s.roundLengths && (o = Math.floor(o), l = Math.floor(l)), s.virtualTranslate || (te.transforms3d ? r.transform("translate3d(" + o + "px, " + l + "px, 0px)") : r.transform("translate(" + o + "px, " + l + "px)")), a.previousTranslate = a.translate, a.translate = a.isHorizontal() ? o : l;
            var d = a.maxTranslate() - a.minTranslate();
            (0 === d ? 0 : (e - a.minTranslate()) / d) !== n && a.updateProgress(e), a.emit("setTranslate", a.translate, t);
        },
        minTranslate: function minTranslate() {
            return -this.snapGrid[0];
        },
        maxTranslate: function maxTranslate() {
            return -this.snapGrid[this.snapGrid.length - 1];
        }
    };
    var c = {
        setTransition: function setTransition(e, t) {
            this.$wrapperEl.transition(e), this.emit("setTransition", e, t);
        },
        transitionStart: function transitionStart(e, t) {
            void 0 === e && (e = !0);
            var a = this,
                i = a.activeIndex,
                s = a.params,
                r = a.previousIndex;
            s.autoHeight && a.updateAutoHeight();
            var n = t;

            if (n || (n = r < i ? "next" : i < r ? "prev" : "reset"), a.emit("transitionStart"), e && i !== r) {
                if ("reset" === n) return void a.emit("slideResetTransitionStart");
                a.emit("slideChangeTransitionStart"), "next" === n ? a.emit("slideNextTransitionStart") : a.emit("slidePrevTransitionStart");
            }
        },
        transitionEnd: function transitionEnd(e, t) {
            void 0 === e && (e = !0);
            var a = this,
                i = a.activeIndex,
                s = a.previousIndex;
            a.animating = !1, a.setTransition(0);
            var r = t;

            if (r || (r = s < i ? "next" : i < s ? "prev" : "reset"), a.emit("transitionEnd"), e && i !== s) {
                if ("reset" === r) return void a.emit("slideResetTransitionEnd");
                a.emit("slideChangeTransitionEnd"), "next" === r ? a.emit("slideNextTransitionEnd") : a.emit("slidePrevTransitionEnd");
            }
        }
    };
    var u = {
        slideTo: function slideTo(e, t, a, i) {
            void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === a && (a = !0);
            var s = this,
                r = e;
            r < 0 && (r = 0);
            var n = s.params,
                o = s.snapGrid,
                l = s.slidesGrid,
                d = s.previousIndex,
                p = s.activeIndex,
                c = s.rtlTranslate;
            if (s.animating && n.preventInteractionOnTransition) return !1;
            var u = Math.floor(r / n.slidesPerGroup);
            u >= o.length && (u = o.length - 1), (p || n.initialSlide || 0) === (d || 0) && a && s.emit("beforeSlideChangeStart");
            var h,
                v = -o[u];
            if (s.updateProgress(v), n.normalizeSlideIndex)
                for (var f = 0; f < l.length; f += 1) {
                    -Math.floor(100 * v) >= Math.floor(100 * l[f]) && (r = f);
                }

            if (s.initialized && r !== p) {
                if (!s.allowSlideNext && v < s.translate && v < s.minTranslate()) return !1;
                if (!s.allowSlidePrev && v > s.translate && v > s.maxTranslate() && (p || 0) !== r) return !1;
            }

            return h = p < r ? "next" : r < p ? "prev" : "reset", c && -v === s.translate || !c && v === s.translate ? (s.updateActiveIndex(r), n.autoHeight && s.updateAutoHeight(), s.updateSlidesClasses(), "slide" !== n.effect && s.setTranslate(v), "reset" !== h && (s.transitionStart(a, h), s.transitionEnd(a, h)), !1) : (0 !== t && te.transition ? (s.setTransition(t), s.setTranslate(v), s.updateActiveIndex(r), s.updateSlidesClasses(), s.emit("beforeTransitionStart", t, i), s.transitionStart(a, h), s.animating || (s.animating = !0, s.onSlideToWrapperTransitionEnd || (s.onSlideToWrapperTransitionEnd = function (e) {
                s && !s.destroyed && e.target === this && (s.$wrapperEl[0].removeEventListener("transitionend", s.onSlideToWrapperTransitionEnd), s.$wrapperEl[0].removeEventListener("webkitTransitionEnd", s.onSlideToWrapperTransitionEnd), s.onSlideToWrapperTransitionEnd = null, delete s.onSlideToWrapperTransitionEnd, s.transitionEnd(a, h));
            }), s.$wrapperEl[0].addEventListener("transitionend", s.onSlideToWrapperTransitionEnd), s.$wrapperEl[0].addEventListener("webkitTransitionEnd", s.onSlideToWrapperTransitionEnd))) : (s.setTransition(0), s.setTranslate(v), s.updateActiveIndex(r), s.updateSlidesClasses(), s.emit("beforeTransitionStart", t, i), s.transitionStart(a, h), s.transitionEnd(a, h)), !0);
        },
        slideToLoop: function slideToLoop(e, t, a, i) {
            void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === a && (a = !0);
            var s = e;
            return this.params.loop && (s += this.loopedSlides), this.slideTo(s, t, a, i);
        },
        slideNext: function slideNext(e, t, a) {
            void 0 === e && (e = this.params.speed), void 0 === t && (t = !0);
            var i = this,
                s = i.params,
                r = i.animating;
            return s.loop ? !r && (i.loopFix(), i._clientLeft = i.$wrapperEl[0].clientLeft, i.slideTo(i.activeIndex + s.slidesPerGroup, e, t, a)) : i.slideTo(i.activeIndex + s.slidesPerGroup, e, t, a);
        },
        slidePrev: function slidePrev(e, t, a) {
            void 0 === e && (e = this.params.speed), void 0 === t && (t = !0);
            var i = this,
                s = i.params,
                r = i.animating,
                n = i.snapGrid,
                o = i.slidesGrid,
                l = i.rtlTranslate;

            if (s.loop) {
                if (r) return !1;
                i.loopFix(), i._clientLeft = i.$wrapperEl[0].clientLeft;
            }

            function d(e) {
                return e < 0 ? -Math.floor(Math.abs(e)) : Math.floor(e);
            }

            var p,
                c = d(l ? i.translate : -i.translate),
                u = n.map(function (e) {
                    return d(e);
                }),
                h = (o.map(function (e) {
                    return d(e);
                }), n[u.indexOf(c)], n[u.indexOf(c) - 1]);
            return void 0 !== h && (p = o.indexOf(h)) < 0 && (p = i.activeIndex - 1), i.slideTo(p, e, t, a);
        },
        slideReset: function slideReset(e, t, a) {
            return void 0 === e && (e = this.params.speed), void 0 === t && (t = !0), this.slideTo(this.activeIndex, e, t, a);
        },
        slideToClosest: function slideToClosest(e, t, a) {
            void 0 === e && (e = this.params.speed), void 0 === t && (t = !0);
            var i = this,
                s = i.activeIndex,
                r = Math.floor(s / i.params.slidesPerGroup);

            if (r < i.snapGrid.length - 1) {
                var n = i.rtlTranslate ? i.translate : -i.translate,
                    o = i.snapGrid[r];
                (i.snapGrid[r + 1] - o) / 2 < n - o && (s = i.params.slidesPerGroup);
            }

            return i.slideTo(s, e, t, a);
        },
        slideToClickedSlide: function slideToClickedSlide() {
            var e,
                t = this,
                a = t.params,
                i = t.$wrapperEl,
                s = "auto" === a.slidesPerView ? t.slidesPerViewDynamic() : a.slidesPerView,
                r = t.clickedIndex;

            if (a.loop) {
                if (t.animating) return;
                e = parseInt(L(t.clickedSlide).attr("data-swiper-slide-index"), 10), a.centeredSlides ? r < t.loopedSlides - s / 2 || r > t.slides.length - t.loopedSlides + s / 2 ? (t.loopFix(), r = i.children("." + a.slideClass + '[data-swiper-slide-index="' + e + '"]:not(.' + a.slideDuplicateClass + ")").eq(0).index(), ee.nextTick(function () {
                    t.slideTo(r);
                })) : t.slideTo(r) : r > t.slides.length - s ? (t.loopFix(), r = i.children("." + a.slideClass + '[data-swiper-slide-index="' + e + '"]:not(.' + a.slideDuplicateClass + ")").eq(0).index(), ee.nextTick(function () {
                    t.slideTo(r);
                })) : t.slideTo(r);
            } else t.slideTo(r);
        }
    };
    var h = {
        loopCreate: function loopCreate() {
            var i = this,
                e = i.params,
                t = i.$wrapperEl;
            t.children("." + e.slideClass + "." + e.slideDuplicateClass).remove();
            var s = t.children("." + e.slideClass);

            if (e.loopFillGroupWithBlank) {
                var a = e.slidesPerGroup - s.length % e.slidesPerGroup;

                if (a !== e.slidesPerGroup) {
                    for (var r = 0; r < a; r += 1) {
                        var n = L(f.createElement("div")).addClass(e.slideClass + " " + e.slideBlankClass);
                        t.append(n);
                    }

                    s = t.children("." + e.slideClass);
                }
            }

            "auto" !== e.slidesPerView || e.loopedSlides || (e.loopedSlides = s.length), i.loopedSlides = parseInt(e.loopedSlides || e.slidesPerView, 10), i.loopedSlides += e.loopAdditionalSlides, i.loopedSlides > s.length && (i.loopedSlides = s.length);
            var o = [],
                l = [];
            s.each(function (e, t) {
                var a = L(t);
                e < i.loopedSlides && l.push(t), e < s.length && e >= s.length - i.loopedSlides && o.push(t), a.attr("data-swiper-slide-index", e);
            });

            for (var d = 0; d < l.length; d += 1) {
                t.append(L(l[d].cloneNode(!0)).addClass(e.slideDuplicateClass));
            }

            for (var p = o.length - 1; 0 <= p; p -= 1) {
                t.prepend(L(o[p].cloneNode(!0)).addClass(e.slideDuplicateClass));
            }
        },
        loopFix: function loopFix() {
            var e,
                t = this,
                a = t.params,
                i = t.activeIndex,
                s = t.slides,
                r = t.loopedSlides,
                n = t.allowSlidePrev,
                o = t.allowSlideNext,
                l = t.snapGrid,
                d = t.rtlTranslate;
            t.allowSlidePrev = !0, t.allowSlideNext = !0;
            var p = -l[i] - t.getTranslate();
            i < r ? (e = s.length - 3 * r + i, e += r, t.slideTo(e, 0, !1, !0) && 0 !== p && t.setTranslate((d ? -t.translate : t.translate) - p)) : ("auto" === a.slidesPerView && 2 * r <= i || i >= s.length - r) && (e = -s.length + i + r, e += r, t.slideTo(e, 0, !1, !0) && 0 !== p && t.setTranslate((d ? -t.translate : t.translate) - p));
            t.allowSlidePrev = n, t.allowSlideNext = o;
        },
        loopDestroy: function loopDestroy() {
            var e = this.$wrapperEl,
                t = this.params,
                a = this.slides;
            e.children("." + t.slideClass + "." + t.slideDuplicateClass + ",." + t.slideClass + "." + t.slideBlankClass).remove(), a.removeAttr("data-swiper-slide-index");
        }
    };
    var v = {
        setGrabCursor: function setGrabCursor(e) {
            if (!(te.touch || !this.params.simulateTouch || this.params.watchOverflow && this.isLocked)) {
                var t = this.el;
                t.style.cursor = "move", t.style.cursor = e ? "-webkit-grabbing" : "-webkit-grab", t.style.cursor = e ? "-moz-grabbin" : "-moz-grab", t.style.cursor = e ? "grabbing" : "grab";
            }
        },
        unsetGrabCursor: function unsetGrabCursor() {
            te.touch || this.params.watchOverflow && this.isLocked || (this.el.style.cursor = "");
        }
    };

    var m = {
            appendSlide: function appendSlide(e) {
                var t = this,
                    a = t.$wrapperEl,
                    i = t.params;
                if (i.loop && t.loopDestroy(), "object" == _typeof(e) && "length" in e)
                    for (var s = 0; s < e.length; s += 1) {
                        e[s] && a.append(e[s]);
                    } else a.append(e);
                i.loop && t.loopCreate(), i.observer && te.observer || t.update();
            },
            prependSlide: function prependSlide(e) {
                var t = this,
                    a = t.params,
                    i = t.$wrapperEl,
                    s = t.activeIndex;
                a.loop && t.loopDestroy();
                var r = s + 1;

                if ("object" == _typeof(e) && "length" in e) {
                    for (var n = 0; n < e.length; n += 1) {
                        e[n] && i.prepend(e[n]);
                    }

                    r = s + e.length;
                } else i.prepend(e);

                a.loop && t.loopCreate(), a.observer && te.observer || t.update(), t.slideTo(r, 0, !1);
            },
            addSlide: function addSlide(e, t) {
                var a = this,
                    i = a.$wrapperEl,
                    s = a.params,
                    r = a.activeIndex;
                s.loop && (r -= a.loopedSlides, a.loopDestroy(), a.slides = i.children("." + s.slideClass));
                var n = a.slides.length;
                if (e <= 0) a.prependSlide(t);
                else if (n <= e) a.appendSlide(t);
                else {
                    for (var o = e < r ? r + 1 : r, l = [], d = n - 1; e <= d; d -= 1) {
                        var p = a.slides.eq(d);
                        p.remove(), l.unshift(p);
                    }

                    if ("object" == _typeof(t) && "length" in t) {
                        for (var c = 0; c < t.length; c += 1) {
                            t[c] && i.append(t[c]);
                        }

                        o = e < r ? r + t.length : r;
                    } else i.append(t);

                    for (var u = 0; u < l.length; u += 1) {
                        i.append(l[u]);
                    }

                    s.loop && a.loopCreate(), s.observer && te.observer || a.update(), s.loop ? a.slideTo(o + a.loopedSlides, 0, !1) : a.slideTo(o, 0, !1);
                }
            },
            removeSlide: function removeSlide(e) {
                var t = this,
                    a = t.params,
                    i = t.$wrapperEl,
                    s = t.activeIndex;
                a.loop && (s -= t.loopedSlides, t.loopDestroy(), t.slides = i.children("." + a.slideClass));
                var r,
                    n = s;

                if ("object" == _typeof(e) && "length" in e) {
                    for (var o = 0; o < e.length; o += 1) {
                        r = e[o], t.slides[r] && t.slides.eq(r).remove(), r < n && (n -= 1);
                    }

                    n = Math.max(n, 0);
                } else r = e, t.slides[r] && t.slides.eq(r).remove(), r < n && (n -= 1), n = Math.max(n, 0);

                a.loop && t.loopCreate(), a.observer && te.observer || t.update(), a.loop ? t.slideTo(n + t.loopedSlides, 0, !1) : t.slideTo(n, 0, !1);
            },
            removeAllSlides: function removeAllSlides() {
                for (var e = [], t = 0; t < this.slides.length; t += 1) {
                    e.push(t);
                }

                this.removeSlide(e);
            }
        },
        g = function () {
            var e = J.navigator.userAgent,
                t = {
                    ios: !1,
                    android: !1,
                    androidChrome: !1,
                    desktop: !1,
                    windows: !1,
                    iphone: !1,
                    ipod: !1,
                    ipad: !1,
                    cordova: J.cordova || J.phonegap,
                    phonegap: J.cordova || J.phonegap
                },
                a = e.match(/(Windows Phone);?[\s\/]+([\d.]+)?/),
                i = e.match(/(Android);?[\s\/]+([\d.]+)?/),
                s = e.match(/(iPad).*OS\s([\d_]+)/),
                r = e.match(/(iPod)(.*OS\s([\d_]+))?/),
                n = !s && e.match(/(iPhone\sOS|iOS)\s([\d_]+)/);

            if (a && (t.os = "windows", t.osVersion = a[2], t.windows = !0), i && !a && (t.os = "android", t.osVersion = i[2], t.android = !0, t.androidChrome = 0 <= e.toLowerCase().indexOf("chrome")), (s || n || r) && (t.os = "ios", t.ios = !0), n && !r && (t.osVersion = n[2].replace(/_/g, "."), t.iphone = !0), s && (t.osVersion = s[2].replace(/_/g, "."), t.ipad = !0), r && (t.osVersion = r[3] ? r[3].replace(/_/g, ".") : null, t.iphone = !0), t.ios && t.osVersion && 0 <= e.indexOf("Version/") && "10" === t.osVersion.split(".")[0] && (t.osVersion = e.toLowerCase().split("version/")[1].split(" ")[0]), t.desktop = !(t.os || t.android || t.webView), t.webView = (n || s || r) && e.match(/.*AppleWebKit(?!.*Safari)/i), t.os && "ios" === t.os) {
                var o = t.osVersion.split("."),
                    l = f.querySelector('meta[name="viewport"]');
                t.minimalUi = !t.webView && (r || n) && (1 * o[0] == 7 ? 1 <= 1 * o[1] : 7 < 1 * o[0]) && l && 0 <= l.getAttribute("content").indexOf("minimal-ui");
            }

            return t.pixelRatio = J.devicePixelRatio || 1, t;
        }();

    function b() {
        var e = this,
            t = e.params,
            a = e.el;

        if (!a || 0 !== a.offsetWidth) {
            t.breakpoints && e.setBreakpoint();
            var i = e.allowSlideNext,
                s = e.allowSlidePrev,
                r = e.snapGrid;

            if (e.allowSlideNext = !0, e.allowSlidePrev = !0, e.updateSize(), e.updateSlides(), t.freeMode) {
                var n = Math.min(Math.max(e.translate, e.maxTranslate()), e.minTranslate());
                e.setTranslate(n), e.updateActiveIndex(), e.updateSlidesClasses(), t.autoHeight && e.updateAutoHeight();
            } else e.updateSlidesClasses(), ("auto" === t.slidesPerView || 1 < t.slidesPerView) && e.isEnd && !e.params.centeredSlides ? e.slideTo(e.slides.length - 1, 0, !1, !0) : e.slideTo(e.activeIndex, 0, !1, !0);

            e.allowSlidePrev = s, e.allowSlideNext = i, e.params.watchOverflow && r !== e.snapGrid && e.checkOverflow();
        }
    }

    var w = {
            init: !0,
            direction: "horizontal",
            touchEventsTarget: "container",
            initialSlide: 0,
            speed: 300,
            preventInteractionOnTransition: !1,
            edgeSwipeDetection: !1,
            edgeSwipeThreshold: 20,
            freeMode: !1,
            freeModeMomentum: !0,
            freeModeMomentumRatio: 1,
            freeModeMomentumBounce: !0,
            freeModeMomentumBounceRatio: 1,
            freeModeMomentumVelocityRatio: 1,
            freeModeSticky: !1,
            freeModeMinimumVelocity: .02,
            autoHeight: !1,
            setWrapperSize: !1,
            virtualTranslate: !1,
            effect: "slide",
            breakpoints: void 0,
            breakpointsInverse: !1,
            spaceBetween: 0,
            slidesPerView: 1,
            slidesPerColumn: 1,
            slidesPerColumnFill: "column",
            slidesPerGroup: 1,
            centeredSlides: !1,
            slidesOffsetBefore: 0,
            slidesOffsetAfter: 0,
            normalizeSlideIndex: !0,
            centerInsufficientSlides: !1,
            watchOverflow: !1,
            roundLengths: !1,
            touchRatio: 1,
            touchAngle: 45,
            simulateTouch: !0,
            shortSwipes: !0,
            longSwipes: !0,
            longSwipesRatio: .5,
            longSwipesMs: 300,
            followFinger: !0,
            allowTouchMove: !0,
            threshold: 0,
            touchMoveStopPropagation: !0,
            touchStartPreventDefault: !0,
            touchStartForcePreventDefault: !1,
            touchReleaseOnEdges: !1,
            uniqueNavElements: !0,
            resistance: !0,
            resistanceRatio: .85,
            watchSlidesProgress: !1,
            watchSlidesVisibility: !1,
            grabCursor: !1,
            preventClicks: !0,
            preventClicksPropagation: !0,
            slideToClickedSlide: !1,
            preloadImages: !0,
            updateOnImagesReady: !0,
            loop: !1,
            loopAdditionalSlides: 0,
            loopedSlides: null,
            loopFillGroupWithBlank: !1,
            allowSlidePrev: !0,
            allowSlideNext: !0,
            swipeHandler: null,
            noSwiping: !0,
            noSwipingClass: "swiper-no-swiping",
            noSwipingSelector: null,
            passiveListeners: !0,
            containerModifierClass: "swiper-container-",
            slideClass: "swiper-slide",
            slideBlankClass: "swiper-slide-invisible-blank",
            slideActiveClass: "swiper-slide-active",
            slideDuplicateActiveClass: "swiper-slide-duplicate-active",
            slideVisibleClass: "swiper-slide-visible",
            slideDuplicateClass: "swiper-slide-duplicate",
            slideNextClass: "swiper-slide-next",
            slideDuplicateNextClass: "swiper-slide-duplicate-next",
            slidePrevClass: "swiper-slide-prev",
            slideDuplicatePrevClass: "swiper-slide-duplicate-prev",
            wrapperClass: "swiper-wrapper",
            runCallbacksOnInit: !0
        },
        y = {
            update: d,
            translate: p,
            transition: c,
            slide: u,
            loop: h,
            grabCursor: v,
            manipulation: m,
            events: {
                attachEvents: function attachEvents() {
                    var e = this,
                        t = e.params,
                        a = e.touchEvents,
                        i = e.el,
                        s = e.wrapperEl;
                    e.onTouchStart = function (e) {
                        var t = this,
                            a = t.touchEventsData,
                            i = t.params,
                            s = t.touches;

                        if (!t.animating || !i.preventInteractionOnTransition) {
                            var r = e;
                            if (r.originalEvent && (r = r.originalEvent), a.isTouchEvent = "touchstart" === r.type, (a.isTouchEvent || !("which" in r) || 3 !== r.which) && !(!a.isTouchEvent && "button" in r && 0 < r.button || a.isTouched && a.isMoved))
                                if (i.noSwiping && L(r.target).closest(i.noSwipingSelector ? i.noSwipingSelector : "." + i.noSwipingClass)[0]) t.allowClick = !0;
                                else if (!i.swipeHandler || L(r).closest(i.swipeHandler)[0]) {
                                    s.currentX = "touchstart" === r.type ? r.targetTouches[0].pageX : r.pageX, s.currentY = "touchstart" === r.type ? r.targetTouches[0].pageY : r.pageY;
                                    var n = s.currentX,
                                        o = s.currentY,
                                        l = i.edgeSwipeDetection || i.iOSEdgeSwipeDetection,
                                        d = i.edgeSwipeThreshold || i.iOSEdgeSwipeThreshold;

                                    if (!l || !(n <= d || n >= J.screen.width - d)) {
                                        if (ee.extend(a, {
                                            isTouched: !0,
                                            isMoved: !1,
                                            allowTouchCallbacks: !0,
                                            isScrolling: void 0,
                                            startMoving: void 0
                                        }), s.startX = n, s.startY = o, a.touchStartTime = ee.now(), t.allowClick = !0, t.updateSize(), t.swipeDirection = void 0, 0 < i.threshold && (a.allowThresholdMove = !1), "touchstart" !== r.type) {
                                            var p = !0;
                                            L(r.target).is(a.formElements) && (p = !1), f.activeElement && L(f.activeElement).is(a.formElements) && f.activeElement !== r.target && f.activeElement.blur();
                                            var c = p && t.allowTouchMove && i.touchStartPreventDefault;
                                            (i.touchStartForcePreventDefault || c) && r.preventDefault();
                                        }

                                        t.emit("touchStart", r);
                                    }
                                }
                        }
                    }.bind(e), e.onTouchMove = function (e) {
                        var t = this,
                            a = t.touchEventsData,
                            i = t.params,
                            s = t.touches,
                            r = t.rtlTranslate,
                            n = e;

                        if (n.originalEvent && (n = n.originalEvent), a.isTouched) {
                            if (!a.isTouchEvent || "mousemove" !== n.type) {
                                var o = "touchmove" === n.type ? n.targetTouches[0].pageX : n.pageX,
                                    l = "touchmove" === n.type ? n.targetTouches[0].pageY : n.pageY;
                                if (n.preventedByNestedSwiper) return s.startX = o, void (s.startY = l);
                                if (!t.allowTouchMove) return t.allowClick = !1, void (a.isTouched && (ee.extend(s, {
                                    startX: o,
                                    startY: l,
                                    currentX: o,
                                    currentY: l
                                }), a.touchStartTime = ee.now()));
                                if (a.isTouchEvent && i.touchReleaseOnEdges && !i.loop)
                                    if (t.isVertical()) {
                                        if (l < s.startY && t.translate <= t.maxTranslate() || l > s.startY && t.translate >= t.minTranslate()) return a.isTouched = !1, void (a.isMoved = !1);
                                    } else if (o < s.startX && t.translate <= t.maxTranslate() || o > s.startX && t.translate >= t.minTranslate()) return;
                                if (a.isTouchEvent && f.activeElement && n.target === f.activeElement && L(n.target).is(a.formElements)) return a.isMoved = !0, void (t.allowClick = !1);

                                if (a.allowTouchCallbacks && t.emit("touchMove", n), !(n.targetTouches && 1 < n.targetTouches.length)) {
                                    s.currentX = o, s.currentY = l;
                                    var d,
                                        p = s.currentX - s.startX,
                                        c = s.currentY - s.startY;
                                    if (!(t.params.threshold && Math.sqrt(Math.pow(p, 2) + Math.pow(c, 2)) < t.params.threshold))
                                        if (void 0 === a.isScrolling && (t.isHorizontal() && s.currentY === s.startY || t.isVertical() && s.currentX === s.startX ? a.isScrolling = !1 : 25 <= p * p + c * c && (d = 180 * Math.atan2(Math.abs(c), Math.abs(p)) / Math.PI, a.isScrolling = t.isHorizontal() ? d > i.touchAngle : 90 - d > i.touchAngle)), a.isScrolling && t.emit("touchMoveOpposite", n), void 0 === a.startMoving && (s.currentX === s.startX && s.currentY === s.startY || (a.startMoving = !0)), a.isScrolling) a.isTouched = !1;
                                        else if (a.startMoving) {
                                            t.allowClick = !1, n.preventDefault(), i.touchMoveStopPropagation && !i.nested && n.stopPropagation(), a.isMoved || (i.loop && t.loopFix(), a.startTranslate = t.getTranslate(), t.setTransition(0), t.animating && t.$wrapperEl.trigger("webkitTransitionEnd transitionend"), a.allowMomentumBounce = !1, !i.grabCursor || !0 !== t.allowSlideNext && !0 !== t.allowSlidePrev || t.setGrabCursor(!0), t.emit("sliderFirstMove", n)), t.emit("sliderMove", n), a.isMoved = !0;
                                            var u = t.isHorizontal() ? p : c;
                                            s.diff = u, u *= i.touchRatio, r && (u = -u), t.swipeDirection = 0 < u ? "prev" : "next", a.currentTranslate = u + a.startTranslate;
                                            var h = !0,
                                                v = i.resistanceRatio;

                                            if (i.touchReleaseOnEdges && (v = 0), 0 < u && a.currentTranslate > t.minTranslate() ? (h = !1, i.resistance && (a.currentTranslate = t.minTranslate() - 1 + Math.pow(-t.minTranslate() + a.startTranslate + u, v))) : u < 0 && a.currentTranslate < t.maxTranslate() && (h = !1, i.resistance && (a.currentTranslate = t.maxTranslate() + 1 - Math.pow(t.maxTranslate() - a.startTranslate - u, v))), h && (n.preventedByNestedSwiper = !0), !t.allowSlideNext && "next" === t.swipeDirection && a.currentTranslate < a.startTranslate && (a.currentTranslate = a.startTranslate), !t.allowSlidePrev && "prev" === t.swipeDirection && a.currentTranslate > a.startTranslate && (a.currentTranslate = a.startTranslate), 0 < i.threshold) {
                                                if (!(Math.abs(u) > i.threshold || a.allowThresholdMove)) return void (a.currentTranslate = a.startTranslate);
                                                if (!a.allowThresholdMove) return a.allowThresholdMove = !0, s.startX = s.currentX, s.startY = s.currentY, a.currentTranslate = a.startTranslate, void (s.diff = t.isHorizontal() ? s.currentX - s.startX : s.currentY - s.startY);
                                            }

                                            i.followFinger && ((i.freeMode || i.watchSlidesProgress || i.watchSlidesVisibility) && (t.updateActiveIndex(), t.updateSlidesClasses()), i.freeMode && (0 === a.velocities.length && a.velocities.push({
                                                position: s[t.isHorizontal() ? "startX" : "startY"],
                                                time: a.touchStartTime
                                            }), a.velocities.push({
                                                position: s[t.isHorizontal() ? "currentX" : "currentY"],
                                                time: ee.now()
                                            })), t.updateProgress(a.currentTranslate), t.setTranslate(a.currentTranslate));
                                        }
                                }
                            }
                        } else a.startMoving && a.isScrolling && t.emit("touchMoveOpposite", n);
                    }.bind(e), e.onTouchEnd = function (e) {
                        var t = this,
                            a = t.touchEventsData,
                            i = t.params,
                            s = t.touches,
                            r = t.rtlTranslate,
                            n = t.$wrapperEl,
                            o = t.slidesGrid,
                            l = t.snapGrid,
                            d = e;
                        if (d.originalEvent && (d = d.originalEvent), a.allowTouchCallbacks && t.emit("touchEnd", d), a.allowTouchCallbacks = !1, !a.isTouched) return a.isMoved && i.grabCursor && t.setGrabCursor(!1), a.isMoved = !1, void (a.startMoving = !1);
                        i.grabCursor && a.isMoved && a.isTouched && (!0 === t.allowSlideNext || !0 === t.allowSlidePrev) && t.setGrabCursor(!1);
                        var p,
                            c = ee.now(),
                            u = c - a.touchStartTime;
                        if (t.allowClick && (t.updateClickedSlide(d), t.emit("tap", d), u < 300 && 300 < c - a.lastClickTime && (a.clickTimeout && clearTimeout(a.clickTimeout), a.clickTimeout = ee.nextTick(function () {
                            t && !t.destroyed && t.emit("click", d);
                        }, 300)), u < 300 && c - a.lastClickTime < 300 && (a.clickTimeout && clearTimeout(a.clickTimeout), t.emit("doubleTap", d))), a.lastClickTime = ee.now(), ee.nextTick(function () {
                            t.destroyed || (t.allowClick = !0);
                        }), !a.isTouched || !a.isMoved || !t.swipeDirection || 0 === s.diff || a.currentTranslate === a.startTranslate) return a.isTouched = !1, a.isMoved = !1, void (a.startMoving = !1);

                        if (a.isTouched = !1, a.isMoved = !1, a.startMoving = !1, p = i.followFinger ? r ? t.translate : -t.translate : -a.currentTranslate, i.freeMode) {
                            if (p < -t.minTranslate()) return void t.slideTo(t.activeIndex);
                            if (p > -t.maxTranslate()) return void (t.slides.length < l.length ? t.slideTo(l.length - 1) : t.slideTo(t.slides.length - 1));

                            if (i.freeModeMomentum) {
                                if (1 < a.velocities.length) {
                                    var h = a.velocities.pop(),
                                        v = a.velocities.pop(),
                                        f = h.position - v.position,
                                        m = h.time - v.time;
                                    t.velocity = f / m, t.velocity /= 2, Math.abs(t.velocity) < i.freeModeMinimumVelocity && (t.velocity = 0), (150 < m || 300 < ee.now() - h.time) && (t.velocity = 0);
                                } else t.velocity = 0;

                                t.velocity *= i.freeModeMomentumVelocityRatio, a.velocities.length = 0;
                                var g = 1e3 * i.freeModeMomentumRatio,
                                    b = t.velocity * g,
                                    w = t.translate + b;
                                r && (w = -w);
                                var y,
                                    x,
                                    T = !1,
                                    E = 20 * Math.abs(t.velocity) * i.freeModeMomentumBounceRatio;
                                if (w < t.maxTranslate()) i.freeModeMomentumBounce ? (w + t.maxTranslate() < -E && (w = t.maxTranslate() - E), y = t.maxTranslate(), T = !0, a.allowMomentumBounce = !0) : w = t.maxTranslate(), i.loop && i.centeredSlides && (x = !0);
                                else if (w > t.minTranslate()) i.freeModeMomentumBounce ? (w - t.minTranslate() > E && (w = t.minTranslate() + E), y = t.minTranslate(), T = !0, a.allowMomentumBounce = !0) : w = t.minTranslate(), i.loop && i.centeredSlides && (x = !0);
                                else if (i.freeModeSticky) {
                                    for (var S, C = 0; C < l.length; C += 1) {
                                        if (l[C] > -w) {
                                            S = C;
                                            break;
                                        }
                                    }

                                    w = -(w = Math.abs(l[S] - w) < Math.abs(l[S - 1] - w) || "next" === t.swipeDirection ? l[S] : l[S - 1]);
                                }
                                if (x && t.once("transitionEnd", function () {
                                    t.loopFix();
                                }), 0 !== t.velocity) g = r ? Math.abs((-w - t.translate) / t.velocity) : Math.abs((w - t.translate) / t.velocity);
                                else if (i.freeModeSticky) return void t.slideToClosest();
                                i.freeModeMomentumBounce && T ? (t.updateProgress(y), t.setTransition(g), t.setTranslate(w), t.transitionStart(!0, t.swipeDirection), t.animating = !0, n.transitionEnd(function () {
                                    t && !t.destroyed && a.allowMomentumBounce && (t.emit("momentumBounce"), t.setTransition(i.speed), t.setTranslate(y), n.transitionEnd(function () {
                                        t && !t.destroyed && t.transitionEnd();
                                    }));
                                })) : t.velocity ? (t.updateProgress(w), t.setTransition(g), t.setTranslate(w), t.transitionStart(!0, t.swipeDirection), t.animating || (t.animating = !0, n.transitionEnd(function () {
                                    t && !t.destroyed && t.transitionEnd();
                                }))) : t.updateProgress(w), t.updateActiveIndex(), t.updateSlidesClasses();
                            } else if (i.freeModeSticky) return void t.slideToClosest();

                            (!i.freeModeMomentum || u >= i.longSwipesMs) && (t.updateProgress(), t.updateActiveIndex(), t.updateSlidesClasses());
                        } else {
                            for (var M = 0, z = t.slidesSizesGrid[0], P = 0; P < o.length; P += i.slidesPerGroup) {
                                void 0 !== o[P + i.slidesPerGroup] ? p >= o[P] && p < o[P + i.slidesPerGroup] && (z = o[(M = P) + i.slidesPerGroup] - o[P]) : p >= o[P] && (M = P, z = o[o.length - 1] - o[o.length - 2]);
                            }

                            var k = (p - o[M]) / z;

                            if (u > i.longSwipesMs) {
                                if (!i.longSwipes) return void t.slideTo(t.activeIndex);
                                "next" === t.swipeDirection && (k >= i.longSwipesRatio ? t.slideTo(M + i.slidesPerGroup) : t.slideTo(M)), "prev" === t.swipeDirection && (k > 1 - i.longSwipesRatio ? t.slideTo(M + i.slidesPerGroup) : t.slideTo(M));
                            } else {
                                if (!i.shortSwipes) return void t.slideTo(t.activeIndex);
                                "next" === t.swipeDirection && t.slideTo(M + i.slidesPerGroup), "prev" === t.swipeDirection && t.slideTo(M);
                            }
                        }
                    }.bind(e), e.onClick = function (e) {
                        this.allowClick || (this.params.preventClicks && e.preventDefault(), this.params.preventClicksPropagation && this.animating && (e.stopPropagation(), e.stopImmediatePropagation()));
                    }.bind(e);
                    var r = "container" === t.touchEventsTarget ? i : s,
                        n = !!t.nested;

                    if (te.touch || !te.pointerEvents && !te.prefixedPointerEvents) {
                        if (te.touch) {
                            var o = !("touchstart" !== a.start || !te.passiveListener || !t.passiveListeners) && {
                                passive: !0,
                                capture: !1
                            };
                            r.addEventListener(a.start, e.onTouchStart, o), r.addEventListener(a.move, e.onTouchMove, te.passiveListener ? {
                                passive: !1,
                                capture: n
                            } : n), r.addEventListener(a.end, e.onTouchEnd, o);
                        }

                        (t.simulateTouch && !g.ios && !g.android || t.simulateTouch && !te.touch && g.ios) && (r.addEventListener("mousedown", e.onTouchStart, !1), f.addEventListener("mousemove", e.onTouchMove, n), f.addEventListener("mouseup", e.onTouchEnd, !1));
                    } else r.addEventListener(a.start, e.onTouchStart, !1), f.addEventListener(a.move, e.onTouchMove, n), f.addEventListener(a.end, e.onTouchEnd, !1);

                    (t.preventClicks || t.preventClicksPropagation) && r.addEventListener("click", e.onClick, !0), e.on(g.ios || g.android ? "resize orientationchange observerUpdate" : "resize observerUpdate", b, !0);
                },
                detachEvents: function detachEvents() {
                    var e = this,
                        t = e.params,
                        a = e.touchEvents,
                        i = e.el,
                        s = e.wrapperEl,
                        r = "container" === t.touchEventsTarget ? i : s,
                        n = !!t.nested;

                    if (te.touch || !te.pointerEvents && !te.prefixedPointerEvents) {
                        if (te.touch) {
                            var o = !("onTouchStart" !== a.start || !te.passiveListener || !t.passiveListeners) && {
                                passive: !0,
                                capture: !1
                            };
                            r.removeEventListener(a.start, e.onTouchStart, o), r.removeEventListener(a.move, e.onTouchMove, n), r.removeEventListener(a.end, e.onTouchEnd, o);
                        }

                        (t.simulateTouch && !g.ios && !g.android || t.simulateTouch && !te.touch && g.ios) && (r.removeEventListener("mousedown", e.onTouchStart, !1), f.removeEventListener("mousemove", e.onTouchMove, n), f.removeEventListener("mouseup", e.onTouchEnd, !1));
                    } else r.removeEventListener(a.start, e.onTouchStart, !1), f.removeEventListener(a.move, e.onTouchMove, n), f.removeEventListener(a.end, e.onTouchEnd, !1);

                    (t.preventClicks || t.preventClicksPropagation) && r.removeEventListener("click", e.onClick, !0), e.off(g.ios || g.android ? "resize orientationchange observerUpdate" : "resize observerUpdate", b);
                }
            },
            breakpoints: {
                setBreakpoint: function setBreakpoint() {
                    var e = this,
                        t = e.activeIndex,
                        a = e.initialized,
                        i = e.loopedSlides;
                    void 0 === i && (i = 0);
                    var s = e.params,
                        r = s.breakpoints;

                    if (r && (!r || 0 !== Object.keys(r).length)) {
                        var n = e.getBreakpoint(r);

                        if (n && e.currentBreakpoint !== n) {
                            var o = n in r ? r[n] : void 0;
                            o && ["slidesPerView", "spaceBetween", "slidesPerGroup"].forEach(function (e) {
                                var t = o[e];
                                void 0 !== t && (o[e] = "slidesPerView" !== e || "AUTO" !== t && "auto" !== t ? "slidesPerView" === e ? parseFloat(t) : parseInt(t, 10) : "auto");
                            });
                            var l = o || e.originalParams,
                                d = l.direction && l.direction !== s.direction,
                                p = s.loop && (l.slidesPerView !== s.slidesPerView || d);
                            d && a && e.changeDirection(), ee.extend(e.params, l), ee.extend(e, {
                                allowTouchMove: e.params.allowTouchMove,
                                allowSlideNext: e.params.allowSlideNext,
                                allowSlidePrev: e.params.allowSlidePrev
                            }), e.currentBreakpoint = n, p && a && (e.loopDestroy(), e.loopCreate(), e.updateSlides(), e.slideTo(t - i + e.loopedSlides, 0, !1)), e.emit("breakpoint", l);
                        }
                    }
                },
                getBreakpoint: function getBreakpoint(e) {
                    if (e) {
                        var t = !1,
                            a = [];
                        Object.keys(e).forEach(function (e) {
                            a.push(e);
                        }), a.sort(function (e, t) {
                            return parseInt(e, 10) - parseInt(t, 10);
                        });

                        for (var i = 0; i < a.length; i += 1) {
                            var s = a[i];
                            this.params.breakpointsInverse ? s <= J.innerWidth && (t = s) : s >= J.innerWidth && !t && (t = s);
                        }

                        return t || "max";
                    }
                }
            },
            checkOverflow: {
                checkOverflow: function checkOverflow() {
                    var e = this,
                        t = e.isLocked;
                    e.isLocked = 1 === e.snapGrid.length, e.allowSlideNext = !e.isLocked, e.allowSlidePrev = !e.isLocked, t !== e.isLocked && e.emit(e.isLocked ? "lock" : "unlock"), t && t !== e.isLocked && (e.isEnd = !1, e.navigation.update());
                }
            },
            classes: {
                addClasses: function addClasses() {
                    var t = this.classNames,
                        a = this.params,
                        e = this.rtl,
                        i = this.$el,
                        s = [];
                    s.push("initialized"), s.push(a.direction), a.freeMode && s.push("free-mode"), te.flexbox || s.push("no-flexbox"), a.autoHeight && s.push("autoheight"), e && s.push("rtl"), 1 < a.slidesPerColumn && s.push("multirow"), g.android && s.push("android"), g.ios && s.push("ios"), (I.isIE || I.isEdge) && (te.pointerEvents || te.prefixedPointerEvents) && s.push("wp8-" + a.direction), s.forEach(function (e) {
                        t.push(a.containerModifierClass + e);
                    }), i.addClass(t.join(" "));
                },
                removeClasses: function removeClasses() {
                    var e = this.$el,
                        t = this.classNames;
                    e.removeClass(t.join(" "));
                }
            },
            images: {
                loadImage: function loadImage(e, t, a, i, s, r) {
                    var n;

                    function o() {
                        r && r();
                    }

                    e.complete && s ? o() : t ? ((n = new J.Image()).onload = o, n.onerror = o, i && (n.sizes = i), a && (n.srcset = a), t && (n.src = t)) : o();
                },
                preloadImages: function preloadImages() {
                    var e = this;

                    function t() {
                        null != e && e && !e.destroyed && (void 0 !== e.imagesLoaded && (e.imagesLoaded += 1), e.imagesLoaded === e.imagesToLoad.length && (e.params.updateOnImagesReady && e.update(), e.emit("imagesReady")));
                    }

                    e.imagesToLoad = e.$el.find("img");

                    for (var a = 0; a < e.imagesToLoad.length; a += 1) {
                        var i = e.imagesToLoad[a];
                        e.loadImage(i, i.currentSrc || i.getAttribute("src"), i.srcset || i.getAttribute("srcset"), i.sizes || i.getAttribute("sizes"), !0, t);
                    }
                }
            }
        },
        x = {},
        T = function (u) {
            function h() {
                for (var e, t, s, a = [], i = arguments.length; i--;) {
                    a[i] = arguments[i];
                }

                1 === a.length && a[0].constructor && a[0].constructor === Object ? s = a[0] : (t = (e = a)[0], s = e[1]), s || (s = {}), s = ee.extend({}, s), t && !s.el && (s.el = t), u.call(this, s), Object.keys(y).forEach(function (t) {
                    Object.keys(y[t]).forEach(function (e) {
                        h.prototype[e] || (h.prototype[e] = y[t][e]);
                    });
                });
                var r = this;
                void 0 === r.modules && (r.modules = {}), Object.keys(r.modules).forEach(function (e) {
                    var t = r.modules[e];

                    if (t.params) {
                        var a = Object.keys(t.params)[0],
                            i = t.params[a];
                        if ("object" != _typeof(i) || null === i) return;
                        if (!(a in s && "enabled" in i)) return;
                        !0 === s[a] && (s[a] = {
                            enabled: !0
                        }), "object" != _typeof(s[a]) || "enabled" in s[a] || (s[a].enabled = !0), s[a] || (s[a] = {
                            enabled: !1
                        });
                    }
                });
                var n = ee.extend({}, w);
                r.useModulesParams(n), r.params = ee.extend({}, n, x, s), r.originalParams = ee.extend({}, r.params), r.passedParams = ee.extend({}, s);
                var o = (r.$ = L)(r.params.el);

                if (t = o[0]) {
                    if (1 < o.length) {
                        var l = [];
                        return o.each(function (e, t) {
                            var a = ee.extend({}, s, {
                                el: t
                            });
                            l.push(new h(a));
                        }), l;
                    }

                    t.swiper = r, o.data("swiper", r);
                    var d,
                        p,
                        c = o.children("." + r.params.wrapperClass);
                    return ee.extend(r, {
                        $el: o,
                        el: t,
                        $wrapperEl: c,
                        wrapperEl: c[0],
                        classNames: [],
                        slides: L(),
                        slidesGrid: [],
                        snapGrid: [],
                        slidesSizesGrid: [],
                        isHorizontal: function isHorizontal() {
                            return "horizontal" === r.params.direction;
                        },
                        isVertical: function isVertical() {
                            return "vertical" === r.params.direction;
                        },
                        rtl: "rtl" === t.dir.toLowerCase() || "rtl" === o.css("direction"),
                        rtlTranslate: "horizontal" === r.params.direction && ("rtl" === t.dir.toLowerCase() || "rtl" === o.css("direction")),
                        wrongRTL: "-webkit-box" === c.css("display"),
                        activeIndex: 0,
                        realIndex: 0,
                        isBeginning: !0,
                        isEnd: !1,
                        translate: 0,
                        previousTranslate: 0,
                        progress: 0,
                        velocity: 0,
                        animating: !1,
                        allowSlideNext: r.params.allowSlideNext,
                        allowSlidePrev: r.params.allowSlidePrev,
                        touchEvents: (d = ["touchstart", "touchmove", "touchend"], p = ["mousedown", "mousemove", "mouseup"], te.pointerEvents ? p = ["pointerdown", "pointermove", "pointerup"] : te.prefixedPointerEvents && (p = ["MSPointerDown", "MSPointerMove", "MSPointerUp"]), r.touchEventsTouch = {
                            start: d[0],
                            move: d[1],
                            end: d[2]
                        }, r.touchEventsDesktop = {
                            start: p[0],
                            move: p[1],
                            end: p[2]
                        }, te.touch || !r.params.simulateTouch ? r.touchEventsTouch : r.touchEventsDesktop),
                        touchEventsData: {
                            isTouched: void 0,
                            isMoved: void 0,
                            allowTouchCallbacks: void 0,
                            touchStartTime: void 0,
                            isScrolling: void 0,
                            currentTranslate: void 0,
                            startTranslate: void 0,
                            allowThresholdMove: void 0,
                            formElements: "input, select, option, textarea, button, video",
                            lastClickTime: ee.now(),
                            clickTimeout: void 0,
                            velocities: [],
                            allowMomentumBounce: void 0,
                            isTouchEvent: void 0,
                            startMoving: void 0
                        },
                        allowClick: !0,
                        allowTouchMove: r.params.allowTouchMove,
                        touches: {
                            startX: 0,
                            startY: 0,
                            currentX: 0,
                            currentY: 0,
                            diff: 0
                        },
                        imagesToLoad: [],
                        imagesLoaded: 0
                    }), r.useModules(), r.params.init && r.init(), r;
                }
            }

            u && (h.__proto__ = u);
            var e = {
                extendedDefaults: {
                    configurable: !0
                },
                defaults: {
                    configurable: !0
                },
                Class: {
                    configurable: !0
                },
                $: {
                    configurable: !0
                }
            };
            return ((h.prototype = Object.create(u && u.prototype)).constructor = h).prototype.slidesPerViewDynamic = function () {
                var e = this,
                    t = e.params,
                    a = e.slides,
                    i = e.slidesGrid,
                    s = e.size,
                    r = e.activeIndex,
                    n = 1;

                if (t.centeredSlides) {
                    for (var o, l = a[r].swiperSlideSize, d = r + 1; d < a.length; d += 1) {
                        a[d] && !o && (n += 1, s < (l += a[d].swiperSlideSize) && (o = !0));
                    }

                    for (var p = r - 1; 0 <= p; p -= 1) {
                        a[p] && !o && (n += 1, s < (l += a[p].swiperSlideSize) && (o = !0));
                    }
                } else
                    for (var c = r + 1; c < a.length; c += 1) {
                        i[c] - i[r] < s && (n += 1);
                    }

                return n;
            }, h.prototype.update = function () {
                var a = this;

                if (a && !a.destroyed) {
                    var e = a.snapGrid,
                        t = a.params;
                    t.breakpoints && a.setBreakpoint(), a.updateSize(), a.updateSlides(), a.updateProgress(), a.updateSlidesClasses(), a.params.freeMode ? (i(), a.params.autoHeight && a.updateAutoHeight()) : (("auto" === a.params.slidesPerView || 1 < a.params.slidesPerView) && a.isEnd && !a.params.centeredSlides ? a.slideTo(a.slides.length - 1, 0, !1, !0) : a.slideTo(a.activeIndex, 0, !1, !0)) || i(), t.watchOverflow && e !== a.snapGrid && a.checkOverflow(), a.emit("update");
                }

                function i() {
                    var e = a.rtlTranslate ? -1 * a.translate : a.translate,
                        t = Math.min(Math.max(e, a.maxTranslate()), a.minTranslate());
                    a.setTranslate(t), a.updateActiveIndex(), a.updateSlidesClasses();
                }
            }, h.prototype.changeDirection = function (a, e) {
                void 0 === e && (e = !0);
                var t = this,
                    i = t.params.direction;
                return a || (a = "horizontal" === i ? "vertical" : "horizontal"), a === i || "horizontal" !== a && "vertical" !== a || ("vertical" === i && (t.$el.removeClass(t.params.containerModifierClass + "vertical wp8-vertical").addClass("" + t.params.containerModifierClass + a), (I.isIE || I.isEdge) && (te.pointerEvents || te.prefixedPointerEvents) && t.$el.addClass(t.params.containerModifierClass + "wp8-" + a)), "horizontal" === i && (t.$el.removeClass(t.params.containerModifierClass + "horizontal wp8-horizontal").addClass("" + t.params.containerModifierClass + a), (I.isIE || I.isEdge) && (te.pointerEvents || te.prefixedPointerEvents) && t.$el.addClass(t.params.containerModifierClass + "wp8-" + a)), t.params.direction = a, t.slides.each(function (e, t) {
                    "vertical" === a ? t.style.width = "" : t.style.height = "";
                }), t.emit("changeDirection"), e && t.update()), t;
            }, h.prototype.init = function () {
                var e = this;
                e.initialized || (e.emit("beforeInit"), e.params.breakpoints && e.setBreakpoint(), e.addClasses(), e.params.loop && e.loopCreate(), e.updateSize(), e.updateSlides(), e.params.watchOverflow && e.checkOverflow(), e.params.grabCursor && e.setGrabCursor(), e.params.preloadImages && e.preloadImages(), e.params.loop ? e.slideTo(e.params.initialSlide + e.loopedSlides, 0, e.params.runCallbacksOnInit) : e.slideTo(e.params.initialSlide, 0, e.params.runCallbacksOnInit), e.attachEvents(), e.initialized = !0, e.emit("init"));
            }, h.prototype.destroy = function (e, t) {
                void 0 === e && (e = !0), void 0 === t && (t = !0);
                var a = this,
                    i = a.params,
                    s = a.$el,
                    r = a.$wrapperEl,
                    n = a.slides;
                return void 0 === a.params || a.destroyed || (a.emit("beforeDestroy"), a.initialized = !1, a.detachEvents(), i.loop && a.loopDestroy(), t && (a.removeClasses(), s.removeAttr("style"), r.removeAttr("style"), n && n.length && n.removeClass([i.slideVisibleClass, i.slideActiveClass, i.slideNextClass, i.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index").removeAttr("data-swiper-column").removeAttr("data-swiper-row")), a.emit("destroy"), Object.keys(a.eventsListeners).forEach(function (e) {
                    a.off(e);
                }), !1 !== e && (a.$el[0].swiper = null, a.$el.data("swiper", null), ee.deleteProps(a)), a.destroyed = !0), null;
            }, h.extendDefaults = function (e) {
                ee.extend(x, e);
            }, e.extendedDefaults.get = function () {
                return x;
            }, e.defaults.get = function () {
                return w;
            }, e.Class.get = function () {
                return u;
            }, e.$.get = function () {
                return L;
            }, Object.defineProperties(h, e), h;
        }(n),
        E = {
            name: "device",
            proto: {
                device: g
            },
            "static": {
                device: g
            }
        },
        S = {
            name: "support",
            proto: {
                support: te
            },
            "static": {
                support: te
            }
        },
        C = {
            name: "browser",
            proto: {
                browser: I
            },
            "static": {
                browser: I
            }
        },
        M = {
            name: "resize",
            create: function create() {
                var e = this;
                ee.extend(e, {
                    resize: {
                        resizeHandler: function resizeHandler() {
                            e && !e.destroyed && e.initialized && (e.emit("beforeResize"), e.emit("resize"));
                        },
                        orientationChangeHandler: function orientationChangeHandler() {
                            e && !e.destroyed && e.initialized && e.emit("orientationchange");
                        }
                    }
                });
            },
            on: {
                init: function init() {
                    J.addEventListener("resize", this.resize.resizeHandler), J.addEventListener("orientationchange", this.resize.orientationChangeHandler);
                },
                destroy: function destroy() {
                    J.removeEventListener("resize", this.resize.resizeHandler), J.removeEventListener("orientationchange", this.resize.orientationChangeHandler);
                }
            }
        },
        z = {
            func: J.MutationObserver || J.WebkitMutationObserver,
            attach: function attach(e, t) {
                void 0 === t && (t = {});
                var a = this,
                    i = new z.func(function (e) {
                        if (1 !== e.length) {
                            var t = function t() {
                                a.emit("observerUpdate", e[0]);
                            };

                            J.requestAnimationFrame ? J.requestAnimationFrame(t) : J.setTimeout(t, 0);
                        } else a.emit("observerUpdate", e[0]);
                    });
                i.observe(e, {
                    attributes: void 0 === t.attributes || t.attributes,
                    childList: void 0 === t.childList || t.childList,
                    characterData: void 0 === t.characterData || t.characterData
                }), a.observer.observers.push(i);
            },
            init: function init() {
                var e = this;

                if (te.observer && e.params.observer) {
                    if (e.params.observeParents)
                        for (var t = e.$el.parents(), a = 0; a < t.length; a += 1) {
                            e.observer.attach(t[a]);
                        }
                    e.observer.attach(e.$el[0], {
                        childList: e.params.observeSlideChildren
                    }), e.observer.attach(e.$wrapperEl[0], {
                        attributes: !1
                    });
                }
            },
            destroy: function destroy() {
                this.observer.observers.forEach(function (e) {
                    e.disconnect();
                }), this.observer.observers = [];
            }
        },
        P = {
            name: "observer",
            params: {
                observer: !1,
                observeParents: !1,
                observeSlideChildren: !1
            },
            create: function create() {
                ee.extend(this, {
                    observer: {
                        init: z.init.bind(this),
                        attach: z.attach.bind(this),
                        destroy: z.destroy.bind(this),
                        observers: []
                    }
                });
            },
            on: {
                init: function init() {
                    this.observer.init();
                },
                destroy: function destroy() {
                    this.observer.destroy();
                }
            }
        },
        k = {
            update: function update(e) {
                var t = this,
                    a = t.params,
                    i = a.slidesPerView,
                    s = a.slidesPerGroup,
                    r = a.centeredSlides,
                    n = t.params.virtual,
                    o = n.addSlidesBefore,
                    l = n.addSlidesAfter,
                    d = t.virtual,
                    p = d.from,
                    c = d.to,
                    u = d.slides,
                    h = d.slidesGrid,
                    v = d.renderSlide,
                    f = d.offset;
                t.updateActiveIndex();
                var m,
                    g,
                    b,
                    w = t.activeIndex || 0;
                m = t.rtlTranslate ? "right" : t.isHorizontal() ? "left" : "top", r ? (g = Math.floor(i / 2) + s + o, b = Math.floor(i / 2) + s + l) : (g = i + (s - 1) + o, b = s + l);
                var y = Math.max((w || 0) - b, 0),
                    x = Math.min((w || 0) + g, u.length - 1),
                    T = (t.slidesGrid[y] || 0) - (t.slidesGrid[0] || 0);

                function E() {
                    t.updateSlides(), t.updateProgress(), t.updateSlidesClasses(), t.lazy && t.params.lazy.enabled && t.lazy.load();
                }

                if (ee.extend(t.virtual, {
                    from: y,
                    to: x,
                    offset: T,
                    slidesGrid: t.slidesGrid
                }), p === y && c === x && !e) return t.slidesGrid !== h && T !== f && t.slides.css(m, T + "px"), void t.updateProgress();
                if (t.params.virtual.renderExternal) return t.params.virtual.renderExternal.call(t, {
                    offset: T,
                    from: y,
                    to: x,
                    slides: function () {
                        for (var e = [], t = y; t <= x; t += 1) {
                            e.push(u[t]);
                        }

                        return e;
                    }()
                }), void E();
                var S = [],
                    C = [];
                if (e) t.$wrapperEl.find("." + t.params.slideClass).remove();
                else
                    for (var M = p; M <= c; M += 1) {
                        (M < y || x < M) && t.$wrapperEl.find("." + t.params.slideClass + '[data-swiper-slide-index="' + M + '"]').remove();
                    }

                for (var z = 0; z < u.length; z += 1) {
                    y <= z && z <= x && (void 0 === c || e ? C.push(z) : (c < z && C.push(z), z < p && S.push(z)));
                }

                C.forEach(function (e) {
                    t.$wrapperEl.append(v(u[e], e));
                }), S.sort(function (e, t) {
                    return t - e;
                }).forEach(function (e) {
                    t.$wrapperEl.prepend(v(u[e], e));
                }), t.$wrapperEl.children(".swiper-slide").css(m, T + "px"), E();
            },
            renderSlide: function renderSlide(e, t) {
                var a = this,
                    i = a.params.virtual;
                if (i.cache && a.virtual.cache[t]) return a.virtual.cache[t];
                var s = i.renderSlide ? L(i.renderSlide.call(a, e, t)) : L('<div class="' + a.params.slideClass + '" data-swiper-slide-index="' + t + '">' + e + "</div>");
                return s.attr("data-swiper-slide-index") || s.attr("data-swiper-slide-index", t), i.cache && (a.virtual.cache[t] = s), s;
            },
            appendSlide: function appendSlide(e) {
                if ("object" == _typeof(e) && "length" in e)
                    for (var t = 0; t < e.length; t += 1) {
                        e[t] && this.virtual.slides.push(e[t]);
                    } else this.virtual.slides.push(e);
                this.virtual.update(!0);
            },
            prependSlide: function prependSlide(e) {
                var t = this,
                    a = t.activeIndex,
                    i = a + 1,
                    s = 1;

                if (Array.isArray(e)) {
                    for (var r = 0; r < e.length; r += 1) {
                        e[r] && t.virtual.slides.unshift(e[r]);
                    }

                    i = a + e.length, s = e.length;
                } else t.virtual.slides.unshift(e);

                if (t.params.virtual.cache) {
                    var n = t.virtual.cache,
                        o = {};
                    Object.keys(n).forEach(function (e) {
                        o[parseInt(e, 10) + s] = n[e];
                    }), t.virtual.cache = o;
                }

                t.virtual.update(!0), t.slideTo(i, 0);
            },
            removeSlide: function removeSlide(e) {
                var t = this;

                if (null != e) {
                    var a = t.activeIndex;
                    if (Array.isArray(e))
                        for (var i = e.length - 1; 0 <= i; i -= 1) {
                            t.virtual.slides.splice(e[i], 1), t.params.virtual.cache && delete t.virtual.cache[e[i]], e[i] < a && (a -= 1), a = Math.max(a, 0);
                        } else t.virtual.slides.splice(e, 1), t.params.virtual.cache && delete t.virtual.cache[e], e < a && (a -= 1), a = Math.max(a, 0);
                    t.virtual.update(!0), t.slideTo(a, 0);
                }
            },
            removeAllSlides: function removeAllSlides() {
                var e = this;
                e.virtual.slides = [], e.params.virtual.cache && (e.virtual.cache = {}), e.virtual.update(!0), e.slideTo(0, 0);
            }
        },
        $ = {
            name: "virtual",
            params: {
                virtual: {
                    enabled: !1,
                    slides: [],
                    cache: !0,
                    renderSlide: null,
                    renderExternal: null,
                    addSlidesBefore: 0,
                    addSlidesAfter: 0
                }
            },
            create: function create() {
                var e = this;
                ee.extend(e, {
                    virtual: {
                        update: k.update.bind(e),
                        appendSlide: k.appendSlide.bind(e),
                        prependSlide: k.prependSlide.bind(e),
                        removeSlide: k.removeSlide.bind(e),
                        removeAllSlides: k.removeAllSlides.bind(e),
                        renderSlide: k.renderSlide.bind(e),
                        slides: e.params.virtual.slides,
                        cache: {}
                    }
                });
            },
            on: {
                beforeInit: function beforeInit() {
                    var e = this;

                    if (e.params.virtual.enabled) {
                        e.classNames.push(e.params.containerModifierClass + "virtual");
                        var t = {
                            watchSlidesProgress: !0
                        };
                        ee.extend(e.params, t), ee.extend(e.originalParams, t), e.params.initialSlide || e.virtual.update();
                    }
                },
                setTranslate: function setTranslate() {
                    this.params.virtual.enabled && this.virtual.update();
                }
            }
        },
        D = {
            handle: function handle(e) {
                var t = this,
                    a = t.rtlTranslate,
                    i = e;
                i.originalEvent && (i = i.originalEvent);
                var s = i.keyCode || i.charCode;
                if (!t.allowSlideNext && (t.isHorizontal() && 39 === s || t.isVertical() && 40 === s)) return !1;
                if (!t.allowSlidePrev && (t.isHorizontal() && 37 === s || t.isVertical() && 38 === s)) return !1;

                if (!(i.shiftKey || i.altKey || i.ctrlKey || i.metaKey || f.activeElement && f.activeElement.nodeName && ("input" === f.activeElement.nodeName.toLowerCase() || "textarea" === f.activeElement.nodeName.toLowerCase()))) {
                    if (t.params.keyboard.onlyInViewport && (37 === s || 39 === s || 38 === s || 40 === s)) {
                        var r = !1;
                        if (0 < t.$el.parents("." + t.params.slideClass).length && 0 === t.$el.parents("." + t.params.slideActiveClass).length) return;
                        var n = J.innerWidth,
                            o = J.innerHeight,
                            l = t.$el.offset();
                        a && (l.left -= t.$el[0].scrollLeft);

                        for (var d = [
                            [l.left, l.top],
                            [l.left + t.width, l.top],
                            [l.left, l.top + t.height],
                            [l.left + t.width, l.top + t.height]
                        ], p = 0; p < d.length; p += 1) {
                            var c = d[p];
                            0 <= c[0] && c[0] <= n && 0 <= c[1] && c[1] <= o && (r = !0);
                        }

                        if (!r) return;
                    }

                    t.isHorizontal() ? (37 !== s && 39 !== s || (i.preventDefault ? i.preventDefault() : i.returnValue = !1), (39 === s && !a || 37 === s && a) && t.slideNext(), (37 === s && !a || 39 === s && a) && t.slidePrev()) : (38 !== s && 40 !== s || (i.preventDefault ? i.preventDefault() : i.returnValue = !1), 40 === s && t.slideNext(), 38 === s && t.slidePrev()), t.emit("keyPress", s);
                }
            },
            enable: function enable() {
                this.keyboard.enabled || (L(f).on("keydown", this.keyboard.handle), this.keyboard.enabled = !0);
            },
            disable: function disable() {
                this.keyboard.enabled && (L(f).off("keydown", this.keyboard.handle), this.keyboard.enabled = !1);
            }
        },
        O = {
            name: "keyboard",
            params: {
                keyboard: {
                    enabled: !1,
                    onlyInViewport: !0
                }
            },
            create: function create() {
                ee.extend(this, {
                    keyboard: {
                        enabled: !1,
                        enable: D.enable.bind(this),
                        disable: D.disable.bind(this),
                        handle: D.handle.bind(this)
                    }
                });
            },
            on: {
                init: function init() {
                    this.params.keyboard.enabled && this.keyboard.enable();
                },
                destroy: function destroy() {
                    this.keyboard.enabled && this.keyboard.disable();
                }
            }
        };

    var A = {
            lastScrollTime: ee.now(),
            event: -1 < J.navigator.userAgent.indexOf("firefox") ? "DOMMouseScroll" : function () {
                var e = "onwheel",
                    t = e in f;

                if (!t) {
                    var a = f.createElement("div");
                    a.setAttribute(e, "return;"), t = "function" == typeof a[e];
                }

                return !t && f.implementation && f.implementation.hasFeature && !0 !== f.implementation.hasFeature("", "") && (t = f.implementation.hasFeature("Events.wheel", "3.0")), t;
            }() ? "wheel" : "mousewheel",
            normalize: function normalize(e) {
                var t = 0,
                    a = 0,
                    i = 0,
                    s = 0;
                return "detail" in e && (a = e.detail), "wheelDelta" in e && (a = -e.wheelDelta / 120), "wheelDeltaY" in e && (a = -e.wheelDeltaY / 120), "wheelDeltaX" in e && (t = -e.wheelDeltaX / 120), "axis" in e && e.axis === e.HORIZONTAL_AXIS && (t = a, a = 0), i = 10 * t, s = 10 * a, "deltaY" in e && (s = e.deltaY), "deltaX" in e && (i = e.deltaX), (i || s) && e.deltaMode && (1 === e.deltaMode ? (i *= 40, s *= 40) : (i *= 800, s *= 800)), i && !t && (t = i < 1 ? -1 : 1), s && !a && (a = s < 1 ? -1 : 1), {
                    spinX: t,
                    spinY: a,
                    pixelX: i,
                    pixelY: s
                };
            },
            handleMouseEnter: function handleMouseEnter() {
                this.mouseEntered = !0;
            },
            handleMouseLeave: function handleMouseLeave() {
                this.mouseEntered = !1;
            },
            handle: function handle(e) {
                var t = e,
                    a = this,
                    i = a.params.mousewheel;
                if (!a.mouseEntered && !i.releaseOnEdges) return !0;
                t.originalEvent && (t = t.originalEvent);
                var s = 0,
                    r = a.rtlTranslate ? -1 : 1,
                    n = A.normalize(t);
                if (i.forceToAxis) {
                    if (a.isHorizontal()) {
                        if (!(Math.abs(n.pixelX) > Math.abs(n.pixelY))) return !0;
                        s = n.pixelX * r;
                    } else {
                        if (!(Math.abs(n.pixelY) > Math.abs(n.pixelX))) return !0;
                        s = n.pixelY;
                    }
                } else s = Math.abs(n.pixelX) > Math.abs(n.pixelY) ? -n.pixelX * r : -n.pixelY;
                if (0 === s) return !0;

                if (i.invert && (s = -s), a.params.freeMode) {
                    a.params.loop && a.loopFix();
                    var o = a.getTranslate() + s * i.sensitivity,
                        l = a.isBeginning,
                        d = a.isEnd;
                    if (o >= a.minTranslate() && (o = a.minTranslate()), o <= a.maxTranslate() && (o = a.maxTranslate()), a.setTransition(0), a.setTranslate(o), a.updateProgress(), a.updateActiveIndex(), a.updateSlidesClasses(), (!l && a.isBeginning || !d && a.isEnd) && a.updateSlidesClasses(), a.params.freeModeSticky && (clearTimeout(a.mousewheel.timeout), a.mousewheel.timeout = ee.nextTick(function () {
                        a.slideToClosest();
                    }, 300)), a.emit("scroll", t), a.params.autoplay && a.params.autoplayDisableOnInteraction && a.autoplay.stop(), o === a.minTranslate() || o === a.maxTranslate()) return !0;
                } else {
                    if (60 < ee.now() - a.mousewheel.lastScrollTime)
                        if (s < 0) {
                            if (a.isEnd && !a.params.loop || a.animating) {
                                if (i.releaseOnEdges) return !0;
                            } else a.slideNext(), a.emit("scroll", t);
                        } else if (a.isBeginning && !a.params.loop || a.animating) {
                            if (i.releaseOnEdges) return !0;
                        } else a.slidePrev(), a.emit("scroll", t);
                    a.mousewheel.lastScrollTime = new J.Date().getTime();
                }

                return t.preventDefault ? t.preventDefault() : t.returnValue = !1, !1;
            },
            enable: function enable() {
                var e = this;
                if (!A.event) return !1;
                if (e.mousewheel.enabled) return !1;
                var t = e.$el;
                return "container" !== e.params.mousewheel.eventsTarged && (t = L(e.params.mousewheel.eventsTarged)), t.on("mouseenter", e.mousewheel.handleMouseEnter), t.on("mouseleave", e.mousewheel.handleMouseLeave), t.on(A.event, e.mousewheel.handle), e.mousewheel.enabled = !0;
            },
            disable: function disable() {
                var e = this;
                if (!A.event) return !1;
                if (!e.mousewheel.enabled) return !1;
                var t = e.$el;
                return "container" !== e.params.mousewheel.eventsTarged && (t = L(e.params.mousewheel.eventsTarged)), t.off(A.event, e.mousewheel.handle), !(e.mousewheel.enabled = !1);
            }
        },
        H = {
            update: function update() {
                var e = this,
                    t = e.params.navigation;

                if (!e.params.loop) {
                    var a = e.navigation,
                        i = a.$nextEl,
                        s = a.$prevEl;
                    s && 0 < s.length && (e.isBeginning ? s.addClass(t.disabledClass) : s.removeClass(t.disabledClass), s[e.params.watchOverflow && e.isLocked ? "addClass" : "removeClass"](t.lockClass)), i && 0 < i.length && (e.isEnd ? i.addClass(t.disabledClass) : i.removeClass(t.disabledClass), i[e.params.watchOverflow && e.isLocked ? "addClass" : "removeClass"](t.lockClass));
                }
            },
            onPrevClick: function onPrevClick(e) {
                e.preventDefault(), this.isBeginning && !this.params.loop || this.slidePrev();
            },
            onNextClick: function onNextClick(e) {
                e.preventDefault(), this.isEnd && !this.params.loop || this.slideNext();
            },
            init: function init() {
                var e,
                    t,
                    a = this,
                    i = a.params.navigation;
                (i.nextEl || i.prevEl) && (i.nextEl && (e = L(i.nextEl), a.params.uniqueNavElements && "string" == typeof i.nextEl && 1 < e.length && 1 === a.$el.find(i.nextEl).length && (e = a.$el.find(i.nextEl))), i.prevEl && (t = L(i.prevEl), a.params.uniqueNavElements && "string" == typeof i.prevEl && 1 < t.length && 1 === a.$el.find(i.prevEl).length && (t = a.$el.find(i.prevEl))), e && 0 < e.length && e.on("click", a.navigation.onNextClick), t && 0 < t.length && t.on("click", a.navigation.onPrevClick), ee.extend(a.navigation, {
                    $nextEl: e,
                    nextEl: e && e[0],
                    $prevEl: t,
                    prevEl: t && t[0]
                }));
            },
            destroy: function destroy() {
                var e = this,
                    t = e.navigation,
                    a = t.$nextEl,
                    i = t.$prevEl;
                a && a.length && (a.off("click", e.navigation.onNextClick), a.removeClass(e.params.navigation.disabledClass)), i && i.length && (i.off("click", e.navigation.onPrevClick), i.removeClass(e.params.navigation.disabledClass));
            }
        },
        N = {
            update: function update() {
                var e = this,
                    t = e.rtl,
                    s = e.params.pagination;

                if (s.el && e.pagination.el && e.pagination.$el && 0 !== e.pagination.$el.length) {
                    var r,
                        a = e.virtual && e.params.virtual.enabled ? e.virtual.slides.length : e.slides.length,
                        i = e.pagination.$el,
                        n = e.params.loop ? Math.ceil((a - 2 * e.loopedSlides) / e.params.slidesPerGroup) : e.snapGrid.length;

                    if (e.params.loop ? ((r = Math.ceil((e.activeIndex - e.loopedSlides) / e.params.slidesPerGroup)) > a - 1 - 2 * e.loopedSlides && (r -= a - 2 * e.loopedSlides), n - 1 < r && (r -= n), r < 0 && "bullets" !== e.params.paginationType && (r = n + r)) : r = void 0 !== e.snapIndex ? e.snapIndex : e.activeIndex || 0, "bullets" === s.type && e.pagination.bullets && 0 < e.pagination.bullets.length) {
                        var o,
                            l,
                            d,
                            p = e.pagination.bullets;
                        if (s.dynamicBullets && (e.pagination.bulletSize = p.eq(0)[e.isHorizontal() ? "outerWidth" : "outerHeight"](!0), i.css(e.isHorizontal() ? "width" : "height", e.pagination.bulletSize * (s.dynamicMainBullets + 4) + "px"), 1 < s.dynamicMainBullets && void 0 !== e.previousIndex && (e.pagination.dynamicBulletIndex += r - e.previousIndex, e.pagination.dynamicBulletIndex > s.dynamicMainBullets - 1 ? e.pagination.dynamicBulletIndex = s.dynamicMainBullets - 1 : e.pagination.dynamicBulletIndex < 0 && (e.pagination.dynamicBulletIndex = 0)), o = r - e.pagination.dynamicBulletIndex, d = ((l = o + (Math.min(p.length, s.dynamicMainBullets) - 1)) + o) / 2), p.removeClass(s.bulletActiveClass + " " + s.bulletActiveClass + "-next " + s.bulletActiveClass + "-next-next " + s.bulletActiveClass + "-prev " + s.bulletActiveClass + "-prev-prev " + s.bulletActiveClass + "-main"), 1 < i.length) p.each(function (e, t) {
                            var a = L(t),
                                i = a.index();
                            i === r && a.addClass(s.bulletActiveClass), s.dynamicBullets && (o <= i && i <= l && a.addClass(s.bulletActiveClass + "-main"), i === o && a.prev().addClass(s.bulletActiveClass + "-prev").prev().addClass(s.bulletActiveClass + "-prev-prev"), i === l && a.next().addClass(s.bulletActiveClass + "-next").next().addClass(s.bulletActiveClass + "-next-next"));
                        });
                        else if (p.eq(r).addClass(s.bulletActiveClass), s.dynamicBullets) {
                            for (var c = p.eq(o), u = p.eq(l), h = o; h <= l; h += 1) {
                                p.eq(h).addClass(s.bulletActiveClass + "-main");
                            }

                            c.prev().addClass(s.bulletActiveClass + "-prev").prev().addClass(s.bulletActiveClass + "-prev-prev"), u.next().addClass(s.bulletActiveClass + "-next").next().addClass(s.bulletActiveClass + "-next-next");
                        }

                        if (s.dynamicBullets) {
                            var v = Math.min(p.length, s.dynamicMainBullets + 4),
                                f = (e.pagination.bulletSize * v - e.pagination.bulletSize) / 2 - d * e.pagination.bulletSize,
                                m = t ? "right" : "left";
                            p.css(e.isHorizontal() ? m : "top", f + "px");
                        }
                    }

                    if ("fraction" === s.type && (i.find("." + s.currentClass).text(s.formatFractionCurrent(r + 1)), i.find("." + s.totalClass).text(s.formatFractionTotal(n))), "progressbar" === s.type) {
                        var g;
                        g = s.progressbarOpposite ? e.isHorizontal() ? "vertical" : "horizontal" : e.isHorizontal() ? "horizontal" : "vertical";
                        var b = (r + 1) / n,
                            w = 1,
                            y = 1;
                        "horizontal" === g ? w = b : y = b, i.find("." + s.progressbarFillClass).transform("translate3d(0,0,0) scaleX(" + w + ") scaleY(" + y + ")").transition(e.params.speed);
                    }

                    "custom" === s.type && s.renderCustom ? (i.html(s.renderCustom(e, r + 1, n)), e.emit("paginationRender", e, i[0])) : e.emit("paginationUpdate", e, i[0]), i[e.params.watchOverflow && e.isLocked ? "addClass" : "removeClass"](s.lockClass);
                }
            },
            render: function render() {
                var e = this,
                    t = e.params.pagination;

                if (t.el && e.pagination.el && e.pagination.$el && 0 !== e.pagination.$el.length) {
                    var a = e.virtual && e.params.virtual.enabled ? e.virtual.slides.length : e.slides.length,
                        i = e.pagination.$el,
                        s = "";

                    if ("bullets" === t.type) {
                        for (var r = e.params.loop ? Math.ceil((a - 2 * e.loopedSlides) / e.params.slidesPerGroup) : e.snapGrid.length, n = 0; n < r; n += 1) {
                            t.renderBullet ? s += t.renderBullet.call(e, n, t.bulletClass) : s += "<" + t.bulletElement + ' class="' + t.bulletClass + '"></' + t.bulletElement + ">";
                        }

                        i.html(s), e.pagination.bullets = i.find("." + t.bulletClass);
                    }

                    "fraction" === t.type && (s = t.renderFraction ? t.renderFraction.call(e, t.currentClass, t.totalClass) : '<span class="' + t.currentClass + '"></span> / <span class="' + t.totalClass + '"></span>', i.html(s)), "progressbar" === t.type && (s = t.renderProgressbar ? t.renderProgressbar.call(e, t.progressbarFillClass) : '<span class="' + t.progressbarFillClass + '"></span>', i.html(s)), "custom" !== t.type && e.emit("paginationRender", e.pagination.$el[0]);
                }
            },
            init: function init() {
                var a = this,
                    e = a.params.pagination;

                if (e.el) {
                    var t = L(e.el);
                    0 !== t.length && (a.params.uniqueNavElements && "string" == typeof e.el && 1 < t.length && 1 === a.$el.find(e.el).length && (t = a.$el.find(e.el)), "bullets" === e.type && e.clickable && t.addClass(e.clickableClass), t.addClass(e.modifierClass + e.type), "bullets" === e.type && e.dynamicBullets && (t.addClass("" + e.modifierClass + e.type + "-dynamic"), a.pagination.dynamicBulletIndex = 0, e.dynamicMainBullets < 1 && (e.dynamicMainBullets = 1)), "progressbar" === e.type && e.progressbarOpposite && t.addClass(e.progressbarOppositeClass), e.clickable && t.on("click", "." + e.bulletClass, function (e) {
                        e.preventDefault();
                        var t = L(this).index() * a.params.slidesPerGroup;
                        a.params.loop && (t += a.loopedSlides), a.slideTo(t);
                    }), ee.extend(a.pagination, {
                        $el: t,
                        el: t[0]
                    }));
                }
            },
            destroy: function destroy() {
                var e = this,
                    t = e.params.pagination;

                if (t.el && e.pagination.el && e.pagination.$el && 0 !== e.pagination.$el.length) {
                    var a = e.pagination.$el;
                    a.removeClass(t.hiddenClass), a.removeClass(t.modifierClass + t.type), e.pagination.bullets && e.pagination.bullets.removeClass(t.bulletActiveClass), t.clickable && a.off("click", "." + t.bulletClass);
                }
            }
        },
        G = {
            setTranslate: function setTranslate() {
                var e = this;

                if (e.params.scrollbar.el && e.scrollbar.el) {
                    var t = e.scrollbar,
                        a = e.rtlTranslate,
                        i = e.progress,
                        s = t.dragSize,
                        r = t.trackSize,
                        n = t.$dragEl,
                        o = t.$el,
                        l = e.params.scrollbar,
                        d = s,
                        p = (r - s) * i;
                    a ? 0 < (p = -p) ? (d = s - p, p = 0) : r < -p + s && (d = r + p) : p < 0 ? (d = s + p, p = 0) : r < p + s && (d = r - p), e.isHorizontal() ? (te.transforms3d ? n.transform("translate3d(" + p + "px, 0, 0)") : n.transform("translateX(" + p + "px)"), n[0].style.width = d + "px") : (te.transforms3d ? n.transform("translate3d(0px, " + p + "px, 0)") : n.transform("translateY(" + p + "px)"), n[0].style.height = d + "px"), l.hide && (clearTimeout(e.scrollbar.timeout), o[0].style.opacity = 1, e.scrollbar.timeout = setTimeout(function () {
                        o[0].style.opacity = 0, o.transition(400);
                    }, 1e3));
                }
            },
            setTransition: function setTransition(e) {
                this.params.scrollbar.el && this.scrollbar.el && this.scrollbar.$dragEl.transition(e);
            },
            updateSize: function updateSize() {
                var e = this;

                if (e.params.scrollbar.el && e.scrollbar.el) {
                    var t = e.scrollbar,
                        a = t.$dragEl,
                        i = t.$el;
                    a[0].style.width = "", a[0].style.height = "";
                    var s,
                        r = e.isHorizontal() ? i[0].offsetWidth : i[0].offsetHeight,
                        n = e.size / e.virtualSize,
                        o = n * (r / e.size);
                    s = "auto" === e.params.scrollbar.dragSize ? r * n : parseInt(e.params.scrollbar.dragSize, 10), e.isHorizontal() ? a[0].style.width = s + "px" : a[0].style.height = s + "px", i[0].style.display = 1 <= n ? "none" : "", e.params.scrollbar.hide && (i[0].style.opacity = 0), ee.extend(t, {
                        trackSize: r,
                        divider: n,
                        moveDivider: o,
                        dragSize: s
                    }), t.$el[e.params.watchOverflow && e.isLocked ? "addClass" : "removeClass"](e.params.scrollbar.lockClass);
                }
            },
            setDragPosition: function setDragPosition(e) {
                var t,
                    a = this,
                    i = a.scrollbar,
                    s = a.rtlTranslate,
                    r = i.$el,
                    n = i.dragSize,
                    o = i.trackSize;
                t = ((a.isHorizontal() ? "touchstart" === e.type || "touchmove" === e.type ? e.targetTouches[0].pageX : e.pageX || e.clientX : "touchstart" === e.type || "touchmove" === e.type ? e.targetTouches[0].pageY : e.pageY || e.clientY) - r.offset()[a.isHorizontal() ? "left" : "top"] - n / 2) / (o - n), t = Math.max(Math.min(t, 1), 0), s && (t = 1 - t);
                var l = a.minTranslate() + (a.maxTranslate() - a.minTranslate()) * t;
                a.updateProgress(l), a.setTranslate(l), a.updateActiveIndex(), a.updateSlidesClasses();
            },
            onDragStart: function onDragStart(e) {
                var t = this,
                    a = t.params.scrollbar,
                    i = t.scrollbar,
                    s = t.$wrapperEl,
                    r = i.$el,
                    n = i.$dragEl;
                t.scrollbar.isTouched = !0, e.preventDefault(), e.stopPropagation(), s.transition(100), n.transition(100), i.setDragPosition(e), clearTimeout(t.scrollbar.dragTimeout), r.transition(0), a.hide && r.css("opacity", 1), t.emit("scrollbarDragStart", e);
            },
            onDragMove: function onDragMove(e) {
                var t = this.scrollbar,
                    a = this.$wrapperEl,
                    i = t.$el,
                    s = t.$dragEl;
                this.scrollbar.isTouched && (e.preventDefault ? e.preventDefault() : e.returnValue = !1, t.setDragPosition(e), a.transition(0), i.transition(0), s.transition(0), this.emit("scrollbarDragMove", e));
            },
            onDragEnd: function onDragEnd(e) {
                var t = this,
                    a = t.params.scrollbar,
                    i = t.scrollbar.$el;
                t.scrollbar.isTouched && (t.scrollbar.isTouched = !1, a.hide && (clearTimeout(t.scrollbar.dragTimeout), t.scrollbar.dragTimeout = ee.nextTick(function () {
                    i.css("opacity", 0), i.transition(400);
                }, 1e3)), t.emit("scrollbarDragEnd", e), a.snapOnRelease && t.slideToClosest());
            },
            enableDraggable: function enableDraggable() {
                var e = this;

                if (e.params.scrollbar.el) {
                    var t = e.scrollbar,
                        a = e.touchEventsTouch,
                        i = e.touchEventsDesktop,
                        s = e.params,
                        r = t.$el[0],
                        n = !(!te.passiveListener || !s.passiveListeners) && {
                            passive: !1,
                            capture: !1
                        },
                        o = !(!te.passiveListener || !s.passiveListeners) && {
                            passive: !0,
                            capture: !1
                        };
                    te.touch ? (r.addEventListener(a.start, e.scrollbar.onDragStart, n), r.addEventListener(a.move, e.scrollbar.onDragMove, n), r.addEventListener(a.end, e.scrollbar.onDragEnd, o)) : (r.addEventListener(i.start, e.scrollbar.onDragStart, n), f.addEventListener(i.move, e.scrollbar.onDragMove, n), f.addEventListener(i.end, e.scrollbar.onDragEnd, o));
                }
            },
            disableDraggable: function disableDraggable() {
                var e = this;

                if (e.params.scrollbar.el) {
                    var t = e.scrollbar,
                        a = e.touchEventsTouch,
                        i = e.touchEventsDesktop,
                        s = e.params,
                        r = t.$el[0],
                        n = !(!te.passiveListener || !s.passiveListeners) && {
                            passive: !1,
                            capture: !1
                        },
                        o = !(!te.passiveListener || !s.passiveListeners) && {
                            passive: !0,
                            capture: !1
                        };
                    te.touch ? (r.removeEventListener(a.start, e.scrollbar.onDragStart, n), r.removeEventListener(a.move, e.scrollbar.onDragMove, n), r.removeEventListener(a.end, e.scrollbar.onDragEnd, o)) : (r.removeEventListener(i.start, e.scrollbar.onDragStart, n), f.removeEventListener(i.move, e.scrollbar.onDragMove, n), f.removeEventListener(i.end, e.scrollbar.onDragEnd, o));
                }
            },
            init: function init() {
                var e = this;

                if (e.params.scrollbar.el) {
                    var t = e.scrollbar,
                        a = e.$el,
                        i = e.params.scrollbar,
                        s = L(i.el);
                    e.params.uniqueNavElements && "string" == typeof i.el && 1 < s.length && 1 === a.find(i.el).length && (s = a.find(i.el));
                    var r = s.find("." + e.params.scrollbar.dragClass);
                    0 === r.length && (r = L('<div class="' + e.params.scrollbar.dragClass + '"></div>'), s.append(r)), ee.extend(t, {
                        $el: s,
                        el: s[0],
                        $dragEl: r,
                        dragEl: r[0]
                    }), i.draggable && t.enableDraggable();
                }
            },
            destroy: function destroy() {
                this.scrollbar.disableDraggable();
            }
        },
        B = {
            setTransform: function setTransform(e, t) {
                var a = this.rtl,
                    i = L(e),
                    s = a ? -1 : 1,
                    r = i.attr("data-swiper-parallax") || "0",
                    n = i.attr("data-swiper-parallax-x"),
                    o = i.attr("data-swiper-parallax-y"),
                    l = i.attr("data-swiper-parallax-scale"),
                    d = i.attr("data-swiper-parallax-opacity");

                if (n || o ? (n = n || "0", o = o || "0") : this.isHorizontal() ? (n = r, o = "0") : (o = r, n = "0"), n = 0 <= n.indexOf("%") ? parseInt(n, 10) * t * s + "%" : n * t * s + "px", o = 0 <= o.indexOf("%") ? parseInt(o, 10) * t + "%" : o * t + "px", null != d) {
                    var p = d - (d - 1) * (1 - Math.abs(t));
                    i[0].style.opacity = p;
                }

                if (null == l) i.transform("translate3d(" + n + ", " + o + ", 0px)");
                else {
                    var c = l - (l - 1) * (1 - Math.abs(t));
                    i.transform("translate3d(" + n + ", " + o + ", 0px) scale(" + c + ")");
                }
            },
            setTranslate: function setTranslate() {
                var i = this,
                    e = i.$el,
                    t = i.slides,
                    s = i.progress,
                    r = i.snapGrid;
                e.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function (e, t) {
                    i.parallax.setTransform(t, s);
                }), t.each(function (e, t) {
                    var a = t.progress;
                    1 < i.params.slidesPerGroup && "auto" !== i.params.slidesPerView && (a += Math.ceil(e / 2) - s * (r.length - 1)), a = Math.min(Math.max(a, -1), 1), L(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function (e, t) {
                        i.parallax.setTransform(t, a);
                    });
                });
            },
            setTransition: function setTransition(s) {
                void 0 === s && (s = this.params.speed);
                this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function (e, t) {
                    var a = L(t),
                        i = parseInt(a.attr("data-swiper-parallax-duration"), 10) || s;
                    0 === s && (i = 0), a.transition(i);
                });
            }
        },
        X = {
            getDistanceBetweenTouches: function getDistanceBetweenTouches(e) {
                if (e.targetTouches.length < 2) return 1;
                var t = e.targetTouches[0].pageX,
                    a = e.targetTouches[0].pageY,
                    i = e.targetTouches[1].pageX,
                    s = e.targetTouches[1].pageY;
                return Math.sqrt(Math.pow(i - t, 2) + Math.pow(s - a, 2));
            },
            onGestureStart: function onGestureStart(e) {
                var t = this,
                    a = t.params.zoom,
                    i = t.zoom,
                    s = i.gesture;

                if (i.fakeGestureTouched = !1, i.fakeGestureMoved = !1, !te.gestures) {
                    if ("touchstart" !== e.type || "touchstart" === e.type && e.targetTouches.length < 2) return;
                    i.fakeGestureTouched = !0, s.scaleStart = X.getDistanceBetweenTouches(e);
                }

                s.$slideEl && s.$slideEl.length || (s.$slideEl = L(e.target).closest(".swiper-slide"), 0 === s.$slideEl.length && (s.$slideEl = t.slides.eq(t.activeIndex)), s.$imageEl = s.$slideEl.find("img, svg, canvas"), s.$imageWrapEl = s.$imageEl.parent("." + a.containerClass), s.maxRatio = s.$imageWrapEl.attr("data-swiper-zoom") || a.maxRatio, 0 !== s.$imageWrapEl.length) ? (s.$imageEl.transition(0), t.zoom.isScaling = !0) : s.$imageEl = void 0;
            },
            onGestureChange: function onGestureChange(e) {
                var t = this.params.zoom,
                    a = this.zoom,
                    i = a.gesture;

                if (!te.gestures) {
                    if ("touchmove" !== e.type || "touchmove" === e.type && e.targetTouches.length < 2) return;
                    a.fakeGestureMoved = !0, i.scaleMove = X.getDistanceBetweenTouches(e);
                }

                i.$imageEl && 0 !== i.$imageEl.length && (a.scale = te.gestures ? e.scale * a.currentScale : i.scaleMove / i.scaleStart * a.currentScale, a.scale > i.maxRatio && (a.scale = i.maxRatio - 1 + Math.pow(a.scale - i.maxRatio + 1, .5)), a.scale < t.minRatio && (a.scale = t.minRatio + 1 - Math.pow(t.minRatio - a.scale + 1, .5)), i.$imageEl.transform("translate3d(0,0,0) scale(" + a.scale + ")"));
            },
            onGestureEnd: function onGestureEnd(e) {
                var t = this.params.zoom,
                    a = this.zoom,
                    i = a.gesture;

                if (!te.gestures) {
                    if (!a.fakeGestureTouched || !a.fakeGestureMoved) return;
                    if ("touchend" !== e.type || "touchend" === e.type && e.changedTouches.length < 2 && !g.android) return;
                    a.fakeGestureTouched = !1, a.fakeGestureMoved = !1;
                }

                i.$imageEl && 0 !== i.$imageEl.length && (a.scale = Math.max(Math.min(a.scale, i.maxRatio), t.minRatio), i.$imageEl.transition(this.params.speed).transform("translate3d(0,0,0) scale(" + a.scale + ")"), a.currentScale = a.scale, a.isScaling = !1, 1 === a.scale && (i.$slideEl = void 0));
            },
            onTouchStart: function onTouchStart(e) {
                var t = this.zoom,
                    a = t.gesture,
                    i = t.image;
                a.$imageEl && 0 !== a.$imageEl.length && (i.isTouched || (g.android && e.preventDefault(), i.isTouched = !0, i.touchesStart.x = "touchstart" === e.type ? e.targetTouches[0].pageX : e.pageX, i.touchesStart.y = "touchstart" === e.type ? e.targetTouches[0].pageY : e.pageY));
            },
            onTouchMove: function onTouchMove(e) {
                var t = this,
                    a = t.zoom,
                    i = a.gesture,
                    s = a.image,
                    r = a.velocity;

                if (i.$imageEl && 0 !== i.$imageEl.length && (t.allowClick = !1, s.isTouched && i.$slideEl)) {
                    s.isMoved || (s.width = i.$imageEl[0].offsetWidth, s.height = i.$imageEl[0].offsetHeight, s.startX = ee.getTranslate(i.$imageWrapEl[0], "x") || 0, s.startY = ee.getTranslate(i.$imageWrapEl[0], "y") || 0, i.slideWidth = i.$slideEl[0].offsetWidth, i.slideHeight = i.$slideEl[0].offsetHeight, i.$imageWrapEl.transition(0), t.rtl && (s.startX = -s.startX, s.startY = -s.startY));
                    var n = s.width * a.scale,
                        o = s.height * a.scale;

                    if (!(n < i.slideWidth && o < i.slideHeight)) {
                        if (s.minX = Math.min(i.slideWidth / 2 - n / 2, 0), s.maxX = -s.minX, s.minY = Math.min(i.slideHeight / 2 - o / 2, 0), s.maxY = -s.minY, s.touchesCurrent.x = "touchmove" === e.type ? e.targetTouches[0].pageX : e.pageX, s.touchesCurrent.y = "touchmove" === e.type ? e.targetTouches[0].pageY : e.pageY, !s.isMoved && !a.isScaling) {
                            if (t.isHorizontal() && (Math.floor(s.minX) === Math.floor(s.startX) && s.touchesCurrent.x < s.touchesStart.x || Math.floor(s.maxX) === Math.floor(s.startX) && s.touchesCurrent.x > s.touchesStart.x)) return void (s.isTouched = !1);
                            if (!t.isHorizontal() && (Math.floor(s.minY) === Math.floor(s.startY) && s.touchesCurrent.y < s.touchesStart.y || Math.floor(s.maxY) === Math.floor(s.startY) && s.touchesCurrent.y > s.touchesStart.y)) return void (s.isTouched = !1);
                        }

                        e.preventDefault(), e.stopPropagation(), s.isMoved = !0, s.currentX = s.touchesCurrent.x - s.touchesStart.x + s.startX, s.currentY = s.touchesCurrent.y - s.touchesStart.y + s.startY, s.currentX < s.minX && (s.currentX = s.minX + 1 - Math.pow(s.minX - s.currentX + 1, .8)), s.currentX > s.maxX && (s.currentX = s.maxX - 1 + Math.pow(s.currentX - s.maxX + 1, .8)), s.currentY < s.minY && (s.currentY = s.minY + 1 - Math.pow(s.minY - s.currentY + 1, .8)), s.currentY > s.maxY && (s.currentY = s.maxY - 1 + Math.pow(s.currentY - s.maxY + 1, .8)), r.prevPositionX || (r.prevPositionX = s.touchesCurrent.x), r.prevPositionY || (r.prevPositionY = s.touchesCurrent.y), r.prevTime || (r.prevTime = Date.now()), r.x = (s.touchesCurrent.x - r.prevPositionX) / (Date.now() - r.prevTime) / 2, r.y = (s.touchesCurrent.y - r.prevPositionY) / (Date.now() - r.prevTime) / 2, Math.abs(s.touchesCurrent.x - r.prevPositionX) < 2 && (r.x = 0), Math.abs(s.touchesCurrent.y - r.prevPositionY) < 2 && (r.y = 0), r.prevPositionX = s.touchesCurrent.x, r.prevPositionY = s.touchesCurrent.y, r.prevTime = Date.now(), i.$imageWrapEl.transform("translate3d(" + s.currentX + "px, " + s.currentY + "px,0)");
                    }
                }
            },
            onTouchEnd: function onTouchEnd() {
                var e = this.zoom,
                    t = e.gesture,
                    a = e.image,
                    i = e.velocity;

                if (t.$imageEl && 0 !== t.$imageEl.length) {
                    if (!a.isTouched || !a.isMoved) return a.isTouched = !1, void (a.isMoved = !1);
                    a.isTouched = !1, a.isMoved = !1;
                    var s = 300,
                        r = 300,
                        n = i.x * s,
                        o = a.currentX + n,
                        l = i.y * r,
                        d = a.currentY + l;
                    0 !== i.x && (s = Math.abs((o - a.currentX) / i.x)), 0 !== i.y && (r = Math.abs((d - a.currentY) / i.y));
                    var p = Math.max(s, r);
                    a.currentX = o, a.currentY = d;
                    var c = a.width * e.scale,
                        u = a.height * e.scale;
                    a.minX = Math.min(t.slideWidth / 2 - c / 2, 0), a.maxX = -a.minX, a.minY = Math.min(t.slideHeight / 2 - u / 2, 0), a.maxY = -a.minY, a.currentX = Math.max(Math.min(a.currentX, a.maxX), a.minX), a.currentY = Math.max(Math.min(a.currentY, a.maxY), a.minY), t.$imageWrapEl.transition(p).transform("translate3d(" + a.currentX + "px, " + a.currentY + "px,0)");
                }
            },
            onTransitionEnd: function onTransitionEnd() {
                var e = this.zoom,
                    t = e.gesture;
                t.$slideEl && this.previousIndex !== this.activeIndex && (t.$imageEl.transform("translate3d(0,0,0) scale(1)"), t.$imageWrapEl.transform("translate3d(0,0,0)"), e.scale = 1, e.currentScale = 1, t.$slideEl = void 0, t.$imageEl = void 0, t.$imageWrapEl = void 0);
            },
            toggle: function toggle(e) {
                var t = this.zoom;
                t.scale && 1 !== t.scale ? t.out() : t["in"](e);
            },
            "in": function _in(e) {
                var t,
                    a,
                    i,
                    s,
                    r,
                    n,
                    o,
                    l,
                    d,
                    p,
                    c,
                    u,
                    h,
                    v,
                    f,
                    m,
                    g = this,
                    b = g.zoom,
                    w = g.params.zoom,
                    y = b.gesture,
                    x = b.image;
                (y.$slideEl || (y.$slideEl = g.clickedSlide ? L(g.clickedSlide) : g.slides.eq(g.activeIndex), y.$imageEl = y.$slideEl.find("img, svg, canvas"), y.$imageWrapEl = y.$imageEl.parent("." + w.containerClass)), y.$imageEl && 0 !== y.$imageEl.length) && (y.$slideEl.addClass("" + w.zoomedSlideClass), void 0 === x.touchesStart.x && e ? (t = "touchend" === e.type ? e.changedTouches[0].pageX : e.pageX, a = "touchend" === e.type ? e.changedTouches[0].pageY : e.pageY) : (t = x.touchesStart.x, a = x.touchesStart.y), b.scale = y.$imageWrapEl.attr("data-swiper-zoom") || w.maxRatio, b.currentScale = y.$imageWrapEl.attr("data-swiper-zoom") || w.maxRatio, e ? (f = y.$slideEl[0].offsetWidth, m = y.$slideEl[0].offsetHeight, i = y.$slideEl.offset().left + f / 2 - t, s = y.$slideEl.offset().top + m / 2 - a, o = y.$imageEl[0].offsetWidth, l = y.$imageEl[0].offsetHeight, d = o * b.scale, p = l * b.scale, h = -(c = Math.min(f / 2 - d / 2, 0)), v = -(u = Math.min(m / 2 - p / 2, 0)), (r = i * b.scale) < c && (r = c), h < r && (r = h), (n = s * b.scale) < u && (n = u), v < n && (n = v)) : n = r = 0, y.$imageWrapEl.transition(300).transform("translate3d(" + r + "px, " + n + "px,0)"), y.$imageEl.transition(300).transform("translate3d(0,0,0) scale(" + b.scale + ")"));
            },
            out: function out() {
                var e = this,
                    t = e.zoom,
                    a = e.params.zoom,
                    i = t.gesture;
                i.$slideEl || (i.$slideEl = e.clickedSlide ? L(e.clickedSlide) : e.slides.eq(e.activeIndex), i.$imageEl = i.$slideEl.find("img, svg, canvas"), i.$imageWrapEl = i.$imageEl.parent("." + a.containerClass)), i.$imageEl && 0 !== i.$imageEl.length && (t.scale = 1, t.currentScale = 1, i.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"), i.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"), i.$slideEl.removeClass("" + a.zoomedSlideClass), i.$slideEl = void 0);
            },
            enable: function enable() {
                var e = this,
                    t = e.zoom;

                if (!t.enabled) {
                    t.enabled = !0;
                    var a = !("touchstart" !== e.touchEvents.start || !te.passiveListener || !e.params.passiveListeners) && {
                        passive: !0,
                        capture: !1
                    };
                    te.gestures ? (e.$wrapperEl.on("gesturestart", ".swiper-slide", t.onGestureStart, a), e.$wrapperEl.on("gesturechange", ".swiper-slide", t.onGestureChange, a), e.$wrapperEl.on("gestureend", ".swiper-slide", t.onGestureEnd, a)) : "touchstart" === e.touchEvents.start && (e.$wrapperEl.on(e.touchEvents.start, ".swiper-slide", t.onGestureStart, a), e.$wrapperEl.on(e.touchEvents.move, ".swiper-slide", t.onGestureChange, a), e.$wrapperEl.on(e.touchEvents.end, ".swiper-slide", t.onGestureEnd, a)), e.$wrapperEl.on(e.touchEvents.move, "." + e.params.zoom.containerClass, t.onTouchMove);
                }
            },
            disable: function disable() {
                var e = this,
                    t = e.zoom;

                if (t.enabled) {
                    e.zoom.enabled = !1;
                    var a = !("touchstart" !== e.touchEvents.start || !te.passiveListener || !e.params.passiveListeners) && {
                        passive: !0,
                        capture: !1
                    };
                    te.gestures ? (e.$wrapperEl.off("gesturestart", ".swiper-slide", t.onGestureStart, a), e.$wrapperEl.off("gesturechange", ".swiper-slide", t.onGestureChange, a), e.$wrapperEl.off("gestureend", ".swiper-slide", t.onGestureEnd, a)) : "touchstart" === e.touchEvents.start && (e.$wrapperEl.off(e.touchEvents.start, ".swiper-slide", t.onGestureStart, a), e.$wrapperEl.off(e.touchEvents.move, ".swiper-slide", t.onGestureChange, a), e.$wrapperEl.off(e.touchEvents.end, ".swiper-slide", t.onGestureEnd, a)), e.$wrapperEl.off(e.touchEvents.move, "." + e.params.zoom.containerClass, t.onTouchMove);
                }
            }
        },
        Y = {
            loadInSlide: function loadInSlide(e, l) {
                void 0 === l && (l = !0);
                var d = this,
                    p = d.params.lazy;

                if (void 0 !== e && 0 !== d.slides.length) {
                    var c = d.virtual && d.params.virtual.enabled ? d.$wrapperEl.children("." + d.params.slideClass + '[data-swiper-slide-index="' + e + '"]') : d.slides.eq(e),
                        t = c.find("." + p.elementClass + ":not(." + p.loadedClass + "):not(." + p.loadingClass + ")");
                    !c.hasClass(p.elementClass) || c.hasClass(p.loadedClass) || c.hasClass(p.loadingClass) || (t = t.add(c[0])), 0 !== t.length && t.each(function (e, t) {
                        var i = L(t);
                        i.addClass(p.loadingClass);
                        var s = i.attr("data-background"),
                            r = i.attr("data-src"),
                            n = i.attr("data-srcset"),
                            o = i.attr("data-sizes");
                        d.loadImage(i[0], r || s, n, o, !1, function () {
                            if (null != d && d && (!d || d.params) && !d.destroyed) {
                                if (s ? (i.css("background-image", 'url("' + s + '")'), i.removeAttr("data-background")) : (n && (i.attr("srcset", n), i.removeAttr("data-srcset")), o && (i.attr("sizes", o), i.removeAttr("data-sizes")), r && (i.attr("src", r), i.removeAttr("data-src"))), i.addClass(p.loadedClass).removeClass(p.loadingClass), c.find("." + p.preloaderClass).remove(), d.params.loop && l) {
                                    var e = c.attr("data-swiper-slide-index");

                                    if (c.hasClass(d.params.slideDuplicateClass)) {
                                        var t = d.$wrapperEl.children('[data-swiper-slide-index="' + e + '"]:not(.' + d.params.slideDuplicateClass + ")");
                                        d.lazy.loadInSlide(t.index(), !1);
                                    } else {
                                        var a = d.$wrapperEl.children("." + d.params.slideDuplicateClass + '[data-swiper-slide-index="' + e + '"]');
                                        d.lazy.loadInSlide(a.index(), !1);
                                    }
                                }

                                d.emit("lazyImageReady", c[0], i[0]);
                            }
                        }), d.emit("lazyImageLoad", c[0], i[0]);
                    });
                }
            },
            load: function load() {
                var i = this,
                    t = i.$wrapperEl,
                    a = i.params,
                    s = i.slides,
                    e = i.activeIndex,
                    r = i.virtual && a.virtual.enabled,
                    n = a.lazy,
                    o = a.slidesPerView;

                function l(e) {
                    if (r) {
                        if (t.children("." + a.slideClass + '[data-swiper-slide-index="' + e + '"]').length) return !0;
                    } else if (s[e]) return !0;

                    return !1;
                }

                function d(e) {
                    return r ? L(e).attr("data-swiper-slide-index") : L(e).index();
                }

                if ("auto" === o && (o = 0), i.lazy.initialImageLoaded || (i.lazy.initialImageLoaded = !0), i.params.watchSlidesVisibility) t.children("." + a.slideVisibleClass).each(function (e, t) {
                    var a = r ? L(t).attr("data-swiper-slide-index") : L(t).index();
                    i.lazy.loadInSlide(a);
                });
                else if (1 < o)
                    for (var p = e; p < e + o; p += 1) {
                        l(p) && i.lazy.loadInSlide(p);
                    } else i.lazy.loadInSlide(e);
                if (n.loadPrevNext)
                    if (1 < o || n.loadPrevNextAmount && 1 < n.loadPrevNextAmount) {
                        for (var c = n.loadPrevNextAmount, u = o, h = Math.min(e + u + Math.max(c, u), s.length), v = Math.max(e - Math.max(u, c), 0), f = e + o; f < h; f += 1) {
                            l(f) && i.lazy.loadInSlide(f);
                        }

                        for (var m = v; m < e; m += 1) {
                            l(m) && i.lazy.loadInSlide(m);
                        }
                    } else {
                        var g = t.children("." + a.slideNextClass);
                        0 < g.length && i.lazy.loadInSlide(d(g));
                        var b = t.children("." + a.slidePrevClass);
                        0 < b.length && i.lazy.loadInSlide(d(b));
                    }
            }
        },
        V = {
            LinearSpline: function LinearSpline(e, t) {
                var a,
                    i,
                    s,
                    r,
                    n,
                    o = function o(e, t) {
                        for (i = -1, a = e.length; 1 < a - i;) {
                            e[s = a + i >> 1] <= t ? i = s : a = s;
                        }

                        return a;
                    };

                return this.x = e, this.y = t, this.lastIndex = e.length - 1, this.interpolate = function (e) {
                    return e ? (n = o(this.x, e), r = n - 1, (e - this.x[r]) * (this.y[n] - this.y[r]) / (this.x[n] - this.x[r]) + this.y[r]) : 0;
                }, this;
            },
            getInterpolateFunction: function getInterpolateFunction(e) {
                var t = this;
                t.controller.spline || (t.controller.spline = t.params.loop ? new V.LinearSpline(t.slidesGrid, e.slidesGrid) : new V.LinearSpline(t.snapGrid, e.snapGrid));
            },
            setTranslate: function setTranslate(e, t) {
                var a,
                    i,
                    s = this,
                    r = s.controller.control;

                function n(e) {
                    var t = s.rtlTranslate ? -s.translate : s.translate;
                    "slide" === s.params.controller.by && (s.controller.getInterpolateFunction(e), i = -s.controller.spline.interpolate(-t)), i && "container" !== s.params.controller.by || (a = (e.maxTranslate() - e.minTranslate()) / (s.maxTranslate() - s.minTranslate()), i = (t - s.minTranslate()) * a + e.minTranslate()), s.params.controller.inverse && (i = e.maxTranslate() - i), e.updateProgress(i), e.setTranslate(i, s), e.updateActiveIndex(), e.updateSlidesClasses();
                }

                if (Array.isArray(r))
                    for (var o = 0; o < r.length; o += 1) {
                        r[o] !== t && r[o] instanceof T && n(r[o]);
                    } else r instanceof T && t !== r && n(r);
            },
            setTransition: function setTransition(t, e) {
                var a,
                    i = this,
                    s = i.controller.control;

                function r(e) {
                    e.setTransition(t, i), 0 !== t && (e.transitionStart(), e.params.autoHeight && ee.nextTick(function () {
                        e.updateAutoHeight();
                    }), e.$wrapperEl.transitionEnd(function () {
                        s && (e.params.loop && "slide" === i.params.controller.by && e.loopFix(), e.transitionEnd());
                    }));
                }

                if (Array.isArray(s))
                    for (a = 0; a < s.length; a += 1) {
                        s[a] !== e && s[a] instanceof T && r(s[a]);
                    } else s instanceof T && e !== s && r(s);
            }
        },
        F = {
            makeElFocusable: function makeElFocusable(e) {
                return e.attr("tabIndex", "0"), e;
            },
            addElRole: function addElRole(e, t) {
                return e.attr("role", t), e;
            },
            addElLabel: function addElLabel(e, t) {
                return e.attr("aria-label", t), e;
            },
            disableEl: function disableEl(e) {
                return e.attr("aria-disabled", !0), e;
            },
            enableEl: function enableEl(e) {
                return e.attr("aria-disabled", !1), e;
            },
            onEnterKey: function onEnterKey(e) {
                var t = this,
                    a = t.params.a11y;

                if (13 === e.keyCode) {
                    var i = L(e.target);
                    t.navigation && t.navigation.$nextEl && i.is(t.navigation.$nextEl) && (t.isEnd && !t.params.loop || t.slideNext(), t.isEnd ? t.a11y.notify(a.lastSlideMessage) : t.a11y.notify(a.nextSlideMessage)), t.navigation && t.navigation.$prevEl && i.is(t.navigation.$prevEl) && (t.isBeginning && !t.params.loop || t.slidePrev(), t.isBeginning ? t.a11y.notify(a.firstSlideMessage) : t.a11y.notify(a.prevSlideMessage)), t.pagination && i.is("." + t.params.pagination.bulletClass) && i[0].click();
                }
            },
            notify: function notify(e) {
                var t = this.a11y.liveRegion;
                0 !== t.length && (t.html(""), t.html(e));
            },
            updateNavigation: function updateNavigation() {
                var e = this;

                if (!e.params.loop) {
                    var t = e.navigation,
                        a = t.$nextEl,
                        i = t.$prevEl;
                    i && 0 < i.length && (e.isBeginning ? e.a11y.disableEl(i) : e.a11y.enableEl(i)), a && 0 < a.length && (e.isEnd ? e.a11y.disableEl(a) : e.a11y.enableEl(a));
                }
            },
            updatePagination: function updatePagination() {
                var i = this,
                    s = i.params.a11y;
                i.pagination && i.params.pagination.clickable && i.pagination.bullets && i.pagination.bullets.length && i.pagination.bullets.each(function (e, t) {
                    var a = L(t);
                    i.a11y.makeElFocusable(a), i.a11y.addElRole(a, "button"), i.a11y.addElLabel(a, s.paginationBulletMessage.replace(/{{index}}/, a.index() + 1));
                });
            },
            init: function init() {
                var e = this;
                e.$el.append(e.a11y.liveRegion);
                var t,
                    a,
                    i = e.params.a11y;
                e.navigation && e.navigation.$nextEl && (t = e.navigation.$nextEl), e.navigation && e.navigation.$prevEl && (a = e.navigation.$prevEl), t && (e.a11y.makeElFocusable(t), e.a11y.addElRole(t, "button"), e.a11y.addElLabel(t, i.nextSlideMessage), t.on("keydown", e.a11y.onEnterKey)), a && (e.a11y.makeElFocusable(a), e.a11y.addElRole(a, "button"), e.a11y.addElLabel(a, i.prevSlideMessage), a.on("keydown", e.a11y.onEnterKey)), e.pagination && e.params.pagination.clickable && e.pagination.bullets && e.pagination.bullets.length && e.pagination.$el.on("keydown", "." + e.params.pagination.bulletClass, e.a11y.onEnterKey);
            },
            destroy: function destroy() {
                var e,
                    t,
                    a = this;
                a.a11y.liveRegion && 0 < a.a11y.liveRegion.length && a.a11y.liveRegion.remove(), a.navigation && a.navigation.$nextEl && (e = a.navigation.$nextEl), a.navigation && a.navigation.$prevEl && (t = a.navigation.$prevEl), e && e.off("keydown", a.a11y.onEnterKey), t && t.off("keydown", a.a11y.onEnterKey), a.pagination && a.params.pagination.clickable && a.pagination.bullets && a.pagination.bullets.length && a.pagination.$el.off("keydown", "." + a.params.pagination.bulletClass, a.a11y.onEnterKey);
            }
        },
        R = {
            init: function init() {
                var e = this;

                if (e.params.history) {
                    if (!J.history || !J.history.pushState) return e.params.history.enabled = !1, void (e.params.hashNavigation.enabled = !0);
                    var t = e.history;
                    t.initialized = !0, t.paths = R.getPathValues(), (t.paths.key || t.paths.value) && (t.scrollToSlide(0, t.paths.value, e.params.runCallbacksOnInit), e.params.history.replaceState || J.addEventListener("popstate", e.history.setHistoryPopState));
                }
            },
            destroy: function destroy() {
                this.params.history.replaceState || J.removeEventListener("popstate", this.history.setHistoryPopState);
            },
            setHistoryPopState: function setHistoryPopState() {
                this.history.paths = R.getPathValues(), this.history.scrollToSlide(this.params.speed, this.history.paths.value, !1);
            },
            getPathValues: function getPathValues() {
                var e = J.location.pathname.slice(1).split("/").filter(function (e) {
                        return "" !== e;
                    }),
                    t = e.length;
                return {
                    key: e[t - 2],
                    value: e[t - 1]
                };
            },
            setHistory: function setHistory(e, t) {
                if (this.history.initialized && this.params.history.enabled) {
                    var a = this.slides.eq(t),
                        i = R.slugify(a.attr("data-history"));
                    J.location.pathname.includes(e) || (i = e + "/" + i);
                    var s = J.history.state;
                    s && s.value === i || (this.params.history.replaceState ? J.history.replaceState({
                        value: i
                    }, null, i) : J.history.pushState({
                        value: i
                    }, null, i));
                }
            },
            slugify: function slugify(e) {
                return e.toString().replace(/\s+/g, "-").replace(/[^\w-]+/g, "").replace(/--+/g, "-").replace(/^-+/, "").replace(/-+$/, "");
            },
            scrollToSlide: function scrollToSlide(e, t, a) {
                var i = this;
                if (t)
                    for (var s = 0, r = i.slides.length; s < r; s += 1) {
                        var n = i.slides.eq(s);

                        if (R.slugify(n.attr("data-history")) === t && !n.hasClass(i.params.slideDuplicateClass)) {
                            var o = n.index();
                            i.slideTo(o, e, a);
                        }
                    } else i.slideTo(0, e, a);
            }
        },
        q = {
            onHashCange: function onHashCange() {
                var e = this,
                    t = f.location.hash.replace("#", "");

                if (t !== e.slides.eq(e.activeIndex).attr("data-hash")) {
                    var a = e.$wrapperEl.children("." + e.params.slideClass + '[data-hash="' + t + '"]').index();
                    if (void 0 === a) return;
                    e.slideTo(a);
                }
            },
            setHash: function setHash() {
                var e = this;
                if (e.hashNavigation.initialized && e.params.hashNavigation.enabled)
                    if (e.params.hashNavigation.replaceState && J.history && J.history.replaceState) J.history.replaceState(null, null, "#" + e.slides.eq(e.activeIndex).attr("data-hash") || "");
                    else {
                        var t = e.slides.eq(e.activeIndex),
                            a = t.attr("data-hash") || t.attr("data-history");
                        f.location.hash = a || "";
                    }
            },
            init: function init() {
                var e = this;

                if (!(!e.params.hashNavigation.enabled || e.params.history && e.params.history.enabled)) {
                    e.hashNavigation.initialized = !0;
                    var t = f.location.hash.replace("#", "");
                    if (t)
                        for (var a = 0, i = e.slides.length; a < i; a += 1) {
                            var s = e.slides.eq(a);

                            if ((s.attr("data-hash") || s.attr("data-history")) === t && !s.hasClass(e.params.slideDuplicateClass)) {
                                var r = s.index();
                                e.slideTo(r, 0, e.params.runCallbacksOnInit, !0);
                            }
                        }
                    e.params.hashNavigation.watchState && L(J).on("hashchange", e.hashNavigation.onHashCange);
                }
            },
            destroy: function destroy() {
                this.params.hashNavigation.watchState && L(J).off("hashchange", this.hashNavigation.onHashCange);
            }
        },
        W = {
            run: function run() {
                var e = this,
                    t = e.slides.eq(e.activeIndex),
                    a = e.params.autoplay.delay;
                t.attr("data-swiper-autoplay") && (a = t.attr("data-swiper-autoplay") || e.params.autoplay.delay), e.autoplay.timeout = ee.nextTick(function () {
                    e.params.autoplay.reverseDirection ? e.params.loop ? (e.loopFix(), e.slidePrev(e.params.speed, !0, !0), e.emit("autoplay")) : e.isBeginning ? e.params.autoplay.stopOnLastSlide ? e.autoplay.stop() : (e.slideTo(e.slides.length - 1, e.params.speed, !0, !0), e.emit("autoplay")) : (e.slidePrev(e.params.speed, !0, !0), e.emit("autoplay")) : e.params.loop ? (e.loopFix(), e.slideNext(e.params.speed, !0, !0), e.emit("autoplay")) : e.isEnd ? e.params.autoplay.stopOnLastSlide ? e.autoplay.stop() : (e.slideTo(0, e.params.speed, !0, !0), e.emit("autoplay")) : (e.slideNext(e.params.speed, !0, !0), e.emit("autoplay"));
                }, a);
            },
            start: function start() {
                var e = this;
                return void 0 === e.autoplay.timeout && !e.autoplay.running && (e.autoplay.running = !0, e.emit("autoplayStart"), e.autoplay.run(), !0);
            },
            stop: function stop() {
                var e = this;
                return !!e.autoplay.running && void 0 !== e.autoplay.timeout && (e.autoplay.timeout && (clearTimeout(e.autoplay.timeout), e.autoplay.timeout = void 0), e.autoplay.running = !1, e.emit("autoplayStop"), !0);
            },
            pause: function pause(e) {
                var t = this;
                t.autoplay.running && (t.autoplay.paused || (t.autoplay.timeout && clearTimeout(t.autoplay.timeout), t.autoplay.paused = !0, 0 !== e && t.params.autoplay.waitForTransition ? (t.$wrapperEl[0].addEventListener("transitionend", t.autoplay.onTransitionEnd), t.$wrapperEl[0].addEventListener("webkitTransitionEnd", t.autoplay.onTransitionEnd)) : (t.autoplay.paused = !1, t.autoplay.run())));
            }
        },
        j = {
            setTranslate: function setTranslate() {
                for (var e = this, t = e.slides, a = 0; a < t.length; a += 1) {
                    var i = e.slides.eq(a),
                        s = -i[0].swiperSlideOffset;
                    e.params.virtualTranslate || (s -= e.translate);
                    var r = 0;
                    e.isHorizontal() || (r = s, s = 0);
                    var n = e.params.fadeEffect.crossFade ? Math.max(1 - Math.abs(i[0].progress), 0) : 1 + Math.min(Math.max(i[0].progress, -1), 0);
                    i.css({
                        opacity: n
                    }).transform("translate3d(" + s + "px, " + r + "px, 0px)");
                }
            },
            setTransition: function setTransition(e) {
                var a = this,
                    t = a.slides,
                    i = a.$wrapperEl;

                if (t.transition(e), a.params.virtualTranslate && 0 !== e) {
                    var s = !1;
                    t.transitionEnd(function () {
                        if (!s && a && !a.destroyed) {
                            s = !0, a.animating = !1;

                            for (var e = ["webkitTransitionEnd", "transitionend"], t = 0; t < e.length; t += 1) {
                                i.trigger(e[t]);
                            }
                        }
                    });
                }
            }
        },
        U = {
            setTranslate: function setTranslate() {
                var e,
                    t = this,
                    a = t.$el,
                    i = t.$wrapperEl,
                    s = t.slides,
                    r = t.width,
                    n = t.height,
                    o = t.rtlTranslate,
                    l = t.size,
                    d = t.params.cubeEffect,
                    p = t.isHorizontal(),
                    c = t.virtual && t.params.virtual.enabled,
                    u = 0;
                d.shadow && (p ? (0 === (e = i.find(".swiper-cube-shadow")).length && (e = L('<div class="swiper-cube-shadow"></div>'), i.append(e)), e.css({
                    height: r + "px"
                })) : 0 === (e = a.find(".swiper-cube-shadow")).length && (e = L('<div class="swiper-cube-shadow"></div>'), a.append(e)));

                for (var h = 0; h < s.length; h += 1) {
                    var v = s.eq(h),
                        f = h;
                    c && (f = parseInt(v.attr("data-swiper-slide-index"), 10));
                    var m = 90 * f,
                        g = Math.floor(m / 360);
                    o && (m = -m, g = Math.floor(-m / 360));
                    var b = Math.max(Math.min(v[0].progress, 1), -1),
                        w = 0,
                        y = 0,
                        x = 0;
                    f % 4 == 0 ? (w = 4 * -g * l, x = 0) : (f - 1) % 4 == 0 ? (w = 0, x = 4 * -g * l) : (f - 2) % 4 == 0 ? (w = l + 4 * g * l, x = l) : (f - 3) % 4 == 0 && (w = -l, x = 3 * l + 4 * l * g), o && (w = -w), p || (y = w, w = 0);
                    var T = "rotateX(" + (p ? 0 : -m) + "deg) rotateY(" + (p ? m : 0) + "deg) translate3d(" + w + "px, " + y + "px, " + x + "px)";

                    if (b <= 1 && -1 < b && (u = 90 * f + 90 * b, o && (u = 90 * -f - 90 * b)), v.transform(T), d.slideShadows) {
                        var E = p ? v.find(".swiper-slide-shadow-left") : v.find(".swiper-slide-shadow-top"),
                            S = p ? v.find(".swiper-slide-shadow-right") : v.find(".swiper-slide-shadow-bottom");
                        0 === E.length && (E = L('<div class="swiper-slide-shadow-' + (p ? "left" : "top") + '"></div>'), v.append(E)), 0 === S.length && (S = L('<div class="swiper-slide-shadow-' + (p ? "right" : "bottom") + '"></div>'), v.append(S)), E.length && (E[0].style.opacity = Math.max(-b, 0)), S.length && (S[0].style.opacity = Math.max(b, 0));
                    }
                }

                if (i.css({
                    "-webkit-transform-origin": "50% 50% -" + l / 2 + "px",
                    "-moz-transform-origin": "50% 50% -" + l / 2 + "px",
                    "-ms-transform-origin": "50% 50% -" + l / 2 + "px",
                    "transform-origin": "50% 50% -" + l / 2 + "px"
                }), d.shadow)
                    if (p) e.transform("translate3d(0px, " + (r / 2 + d.shadowOffset) + "px, " + -r / 2 + "px) rotateX(90deg) rotateZ(0deg) scale(" + d.shadowScale + ")");
                    else {
                        var C = Math.abs(u) - 90 * Math.floor(Math.abs(u) / 90),
                            M = 1.5 - (Math.sin(2 * C * Math.PI / 360) / 2 + Math.cos(2 * C * Math.PI / 360) / 2),
                            z = d.shadowScale,
                            P = d.shadowScale / M,
                            k = d.shadowOffset;
                        e.transform("scale3d(" + z + ", 1, " + P + ") translate3d(0px, " + (n / 2 + k) + "px, " + -n / 2 / P + "px) rotateX(-90deg)");
                    }
                var $ = I.isSafari || I.isUiWebView ? -l / 2 : 0;
                i.transform("translate3d(0px,0," + $ + "px) rotateX(" + (t.isHorizontal() ? 0 : u) + "deg) rotateY(" + (t.isHorizontal() ? -u : 0) + "deg)");
            },
            setTransition: function setTransition(e) {
                var t = this.$el;
                this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e), this.params.cubeEffect.shadow && !this.isHorizontal() && t.find(".swiper-cube-shadow").transition(e);
            }
        },
        K = {
            setTranslate: function setTranslate() {
                for (var e = this, t = e.slides, a = e.rtlTranslate, i = 0; i < t.length; i += 1) {
                    var s = t.eq(i),
                        r = s[0].progress;
                    e.params.flipEffect.limitRotation && (r = Math.max(Math.min(s[0].progress, 1), -1));
                    var n = -180 * r,
                        o = 0,
                        l = -s[0].swiperSlideOffset,
                        d = 0;

                    if (e.isHorizontal() ? a && (n = -n) : (d = l, o = -n, n = l = 0), s[0].style.zIndex = -Math.abs(Math.round(r)) + t.length, e.params.flipEffect.slideShadows) {
                        var p = e.isHorizontal() ? s.find(".swiper-slide-shadow-left") : s.find(".swiper-slide-shadow-top"),
                            c = e.isHorizontal() ? s.find(".swiper-slide-shadow-right") : s.find(".swiper-slide-shadow-bottom");
                        0 === p.length && (p = L('<div class="swiper-slide-shadow-' + (e.isHorizontal() ? "left" : "top") + '"></div>'), s.append(p)), 0 === c.length && (c = L('<div class="swiper-slide-shadow-' + (e.isHorizontal() ? "right" : "bottom") + '"></div>'), s.append(c)), p.length && (p[0].style.opacity = Math.max(-r, 0)), c.length && (c[0].style.opacity = Math.max(r, 0));
                    }

                    s.transform("translate3d(" + l + "px, " + d + "px, 0px) rotateX(" + o + "deg) rotateY(" + n + "deg)");
                }
            },
            setTransition: function setTransition(e) {
                var a = this,
                    t = a.slides,
                    i = a.activeIndex,
                    s = a.$wrapperEl;

                if (t.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e), a.params.virtualTranslate && 0 !== e) {
                    var r = !1;
                    t.eq(i).transitionEnd(function () {
                        if (!r && a && !a.destroyed) {
                            r = !0, a.animating = !1;

                            for (var e = ["webkitTransitionEnd", "transitionend"], t = 0; t < e.length; t += 1) {
                                s.trigger(e[t]);
                            }
                        }
                    });
                }
            }
        },
        _ = {
            setTranslate: function setTranslate() {
                for (var e = this, t = e.width, a = e.height, i = e.slides, s = e.$wrapperEl, r = e.slidesSizesGrid, n = e.params.coverflowEffect, o = e.isHorizontal(), l = e.translate, d = o ? t / 2 - l : a / 2 - l, p = o ? n.rotate : -n.rotate, c = n.depth, u = 0, h = i.length; u < h; u += 1) {
                    var v = i.eq(u),
                        f = r[u],
                        m = (d - v[0].swiperSlideOffset - f / 2) / f * n.modifier,
                        g = o ? p * m : 0,
                        b = o ? 0 : p * m,
                        w = -c * Math.abs(m),
                        y = o ? 0 : n.stretch * m,
                        x = o ? n.stretch * m : 0;
                    Math.abs(x) < .001 && (x = 0), Math.abs(y) < .001 && (y = 0), Math.abs(w) < .001 && (w = 0), Math.abs(g) < .001 && (g = 0), Math.abs(b) < .001 && (b = 0);
                    var T = "translate3d(" + x + "px," + y + "px," + w + "px)  rotateX(" + b + "deg) rotateY(" + g + "deg)";

                    if (v.transform(T), v[0].style.zIndex = 1 - Math.abs(Math.round(m)), n.slideShadows) {
                        var E = o ? v.find(".swiper-slide-shadow-left") : v.find(".swiper-slide-shadow-top"),
                            S = o ? v.find(".swiper-slide-shadow-right") : v.find(".swiper-slide-shadow-bottom");
                        0 === E.length && (E = L('<div class="swiper-slide-shadow-' + (o ? "left" : "top") + '"></div>'), v.append(E)), 0 === S.length && (S = L('<div class="swiper-slide-shadow-' + (o ? "right" : "bottom") + '"></div>'), v.append(S)), E.length && (E[0].style.opacity = 0 < m ? m : 0), S.length && (S[0].style.opacity = 0 < -m ? -m : 0);
                    }
                }

                (te.pointerEvents || te.prefixedPointerEvents) && (s[0].style.perspectiveOrigin = d + "px 50%");
            },
            setTransition: function setTransition(e) {
                this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e);
            }
        },
        Z = {
            init: function init() {
                var e = this,
                    t = e.params.thumbs,
                    a = e.constructor;
                t.swiper instanceof a ? (e.thumbs.swiper = t.swiper, ee.extend(e.thumbs.swiper.originalParams, {
                    watchSlidesProgress: !0,
                    slideToClickedSlide: !1
                }), ee.extend(e.thumbs.swiper.params, {
                    watchSlidesProgress: !0,
                    slideToClickedSlide: !1
                })) : ee.isObject(t.swiper) && (e.thumbs.swiper = new a(ee.extend({}, t.swiper, {
                    watchSlidesVisibility: !0,
                    watchSlidesProgress: !0,
                    slideToClickedSlide: !1
                })), e.thumbs.swiperCreated = !0), e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass), e.thumbs.swiper.on("tap", e.thumbs.onThumbClick);
            },
            onThumbClick: function onThumbClick() {
                var e = this,
                    t = e.thumbs.swiper;

                if (t) {
                    var a = t.clickedIndex,
                        i = t.clickedSlide;

                    if (!(i && L(i).hasClass(e.params.thumbs.slideThumbActiveClass) || null == a)) {
                        var s;

                        if (s = t.params.loop ? parseInt(L(t.clickedSlide).attr("data-swiper-slide-index"), 10) : a, e.params.loop) {
                            var r = e.activeIndex;
                            e.slides.eq(r).hasClass(e.params.slideDuplicateClass) && (e.loopFix(), e._clientLeft = e.$wrapperEl[0].clientLeft, r = e.activeIndex);
                            var n = e.slides.eq(r).prevAll('[data-swiper-slide-index="' + s + '"]').eq(0).index(),
                                o = e.slides.eq(r).nextAll('[data-swiper-slide-index="' + s + '"]').eq(0).index();
                            s = void 0 === n ? o : void 0 === o ? n : o - r < r - n ? o : n;
                        }

                        e.slideTo(s);
                    }
                }
            },
            update: function update(e) {
                var t = this,
                    a = t.thumbs.swiper;

                if (a) {
                    var i = "auto" === a.params.slidesPerView ? a.slidesPerViewDynamic() : a.params.slidesPerView;

                    if (t.realIndex !== a.realIndex) {
                        var s,
                            r = a.activeIndex;

                        if (a.params.loop) {
                            a.slides.eq(r).hasClass(a.params.slideDuplicateClass) && (a.loopFix(), a._clientLeft = a.$wrapperEl[0].clientLeft, r = a.activeIndex);
                            var n = a.slides.eq(r).prevAll('[data-swiper-slide-index="' + t.realIndex + '"]').eq(0).index(),
                                o = a.slides.eq(r).nextAll('[data-swiper-slide-index="' + t.realIndex + '"]').eq(0).index();
                            s = void 0 === n ? o : void 0 === o ? n : o - r == r - n ? r : o - r < r - n ? o : n;
                        } else s = t.realIndex;

                        a.visibleSlidesIndexes.indexOf(s) < 0 && (a.params.centeredSlides ? s = r < s ? s - Math.floor(i / 2) + 1 : s + Math.floor(i / 2) - 1 : r < s && (s = s - i + 1), a.slideTo(s, e ? 0 : void 0));
                    }

                    var l = 1,
                        d = t.params.thumbs.slideThumbActiveClass;
                    if (1 < t.params.slidesPerView && !t.params.centeredSlides && (l = t.params.slidesPerView), a.slides.removeClass(d), a.params.loop)
                        for (var p = 0; p < l; p += 1) {
                            a.$wrapperEl.children('[data-swiper-slide-index="' + (t.realIndex + p) + '"]').addClass(d);
                        } else
                        for (var c = 0; c < l; c += 1) {
                            a.slides.eq(t.realIndex + c).addClass(d);
                        }
                }
            }
        },
        Q = [E, S, C, M, P, $, O, {
            name: "mousewheel",
            params: {
                mousewheel: {
                    enabled: !1,
                    releaseOnEdges: !1,
                    invert: !1,
                    forceToAxis: !1,
                    sensitivity: 1,
                    eventsTarged: "container"
                }
            },
            create: function create() {
                var e = this;
                ee.extend(e, {
                    mousewheel: {
                        enabled: !1,
                        enable: A.enable.bind(e),
                        disable: A.disable.bind(e),
                        handle: A.handle.bind(e),
                        handleMouseEnter: A.handleMouseEnter.bind(e),
                        handleMouseLeave: A.handleMouseLeave.bind(e),
                        lastScrollTime: ee.now()
                    }
                });
            },
            on: {
                init: function init() {
                    this.params.mousewheel.enabled && this.mousewheel.enable();
                },
                destroy: function destroy() {
                    this.mousewheel.enabled && this.mousewheel.disable();
                }
            }
        }, {
            name: "navigation",
            params: {
                navigation: {
                    nextEl: null,
                    prevEl: null,
                    hideOnClick: !1,
                    disabledClass: "swiper-button-disabled",
                    hiddenClass: "swiper-button-hidden",
                    lockClass: "swiper-button-lock"
                }
            },
            create: function create() {
                var e = this;
                ee.extend(e, {
                    navigation: {
                        init: H.init.bind(e),
                        update: H.update.bind(e),
                        destroy: H.destroy.bind(e),
                        onNextClick: H.onNextClick.bind(e),
                        onPrevClick: H.onPrevClick.bind(e)
                    }
                });
            },
            on: {
                init: function init() {
                    this.navigation.init(), this.navigation.update();
                },
                toEdge: function toEdge() {
                    this.navigation.update();
                },
                fromEdge: function fromEdge() {
                    this.navigation.update();
                },
                destroy: function destroy() {
                    this.navigation.destroy();
                },
                click: function click(e) {
                    var t,
                        a = this,
                        i = a.navigation,
                        s = i.$nextEl,
                        r = i.$prevEl;
                    !a.params.navigation.hideOnClick || L(e.target).is(r) || L(e.target).is(s) || (s ? t = s.hasClass(a.params.navigation.hiddenClass) : r && (t = r.hasClass(a.params.navigation.hiddenClass)), !0 === t ? a.emit("navigationShow", a) : a.emit("navigationHide", a), s && s.toggleClass(a.params.navigation.hiddenClass), r && r.toggleClass(a.params.navigation.hiddenClass));
                }
            }
        }, {
            name: "pagination",
            params: {
                pagination: {
                    el: null,
                    bulletElement: "span",
                    clickable: !1,
                    hideOnClick: !1,
                    renderBullet: null,
                    renderProgressbar: null,
                    renderFraction: null,
                    renderCustom: null,
                    progressbarOpposite: !1,
                    type: "bullets",
                    dynamicBullets: !1,
                    dynamicMainBullets: 1,
                    formatFractionCurrent: function formatFractionCurrent(e) {
                        return e;
                    },
                    formatFractionTotal: function formatFractionTotal(e) {
                        return e;
                    },
                    bulletClass: "swiper-pagination-bullet",
                    bulletActiveClass: "swiper-pagination-bullet-active",
                    modifierClass: "swiper-pagination-",
                    currentClass: "swiper-pagination-current",
                    totalClass: "swiper-pagination-total",
                    hiddenClass: "swiper-pagination-hidden",
                    progressbarFillClass: "swiper-pagination-progressbar-fill",
                    progressbarOppositeClass: "swiper-pagination-progressbar-opposite",
                    clickableClass: "swiper-pagination-clickable",
                    lockClass: "swiper-pagination-lock"
                }
            },
            create: function create() {
                var e = this;
                ee.extend(e, {
                    pagination: {
                        init: N.init.bind(e),
                        render: N.render.bind(e),
                        update: N.update.bind(e),
                        destroy: N.destroy.bind(e),
                        dynamicBulletIndex: 0
                    }
                });
            },
            on: {
                init: function init() {
                    this.pagination.init(), this.pagination.render(), this.pagination.update();
                },
                activeIndexChange: function activeIndexChange() {
                    this.params.loop ? this.pagination.update() : void 0 === this.snapIndex && this.pagination.update();
                },
                snapIndexChange: function snapIndexChange() {
                    this.params.loop || this.pagination.update();
                },
                slidesLengthChange: function slidesLengthChange() {
                    this.params.loop && (this.pagination.render(), this.pagination.update());
                },
                snapGridLengthChange: function snapGridLengthChange() {
                    this.params.loop || (this.pagination.render(), this.pagination.update());
                },
                destroy: function destroy() {
                    this.pagination.destroy();
                },
                click: function click(e) {
                    var t = this;
                    t.params.pagination.el && t.params.pagination.hideOnClick && 0 < t.pagination.$el.length && !L(e.target).hasClass(t.params.pagination.bulletClass) && (!0 === t.pagination.$el.hasClass(t.params.pagination.hiddenClass) ? t.emit("paginationShow", t) : t.emit("paginationHide", t), t.pagination.$el.toggleClass(t.params.pagination.hiddenClass));
                }
            }
        }, {
            name: "scrollbar",
            params: {
                scrollbar: {
                    el: null,
                    dragSize: "auto",
                    hide: !1,
                    draggable: !1,
                    snapOnRelease: !0,
                    lockClass: "swiper-scrollbar-lock",
                    dragClass: "swiper-scrollbar-drag"
                }
            },
            create: function create() {
                var e = this;
                ee.extend(e, {
                    scrollbar: {
                        init: G.init.bind(e),
                        destroy: G.destroy.bind(e),
                        updateSize: G.updateSize.bind(e),
                        setTranslate: G.setTranslate.bind(e),
                        setTransition: G.setTransition.bind(e),
                        enableDraggable: G.enableDraggable.bind(e),
                        disableDraggable: G.disableDraggable.bind(e),
                        setDragPosition: G.setDragPosition.bind(e),
                        onDragStart: G.onDragStart.bind(e),
                        onDragMove: G.onDragMove.bind(e),
                        onDragEnd: G.onDragEnd.bind(e),
                        isTouched: !1,
                        timeout: null,
                        dragTimeout: null
                    }
                });
            },
            on: {
                init: function init() {
                    this.scrollbar.init(), this.scrollbar.updateSize(), this.scrollbar.setTranslate();
                },
                update: function update() {
                    this.scrollbar.updateSize();
                },
                resize: function resize() {
                    this.scrollbar.updateSize();
                },
                observerUpdate: function observerUpdate() {
                    this.scrollbar.updateSize();
                },
                setTranslate: function setTranslate() {
                    this.scrollbar.setTranslate();
                },
                setTransition: function setTransition(e) {
                    this.scrollbar.setTransition(e);
                },
                destroy: function destroy() {
                    this.scrollbar.destroy();
                }
            }
        }, {
            name: "parallax",
            params: {
                parallax: {
                    enabled: !1
                }
            },
            create: function create() {
                ee.extend(this, {
                    parallax: {
                        setTransform: B.setTransform.bind(this),
                        setTranslate: B.setTranslate.bind(this),
                        setTransition: B.setTransition.bind(this)
                    }
                });
            },
            on: {
                beforeInit: function beforeInit() {
                    this.params.parallax.enabled && (this.params.watchSlidesProgress = !0, this.originalParams.watchSlidesProgress = !0);
                },
                init: function init() {
                    this.params.parallax.enabled && this.parallax.setTranslate();
                },
                setTranslate: function setTranslate() {
                    this.params.parallax.enabled && this.parallax.setTranslate();
                },
                setTransition: function setTransition(e) {
                    this.params.parallax.enabled && this.parallax.setTransition(e);
                }
            }
        }, {
            name: "zoom",
            params: {
                zoom: {
                    enabled: !1,
                    maxRatio: 3,
                    minRatio: 1,
                    toggle: !0,
                    containerClass: "swiper-zoom-container",
                    zoomedSlideClass: "swiper-slide-zoomed"
                }
            },
            create: function create() {
                var i = this,
                    t = {
                        enabled: !1,
                        scale: 1,
                        currentScale: 1,
                        isScaling: !1,
                        gesture: {
                            $slideEl: void 0,
                            slideWidth: void 0,
                            slideHeight: void 0,
                            $imageEl: void 0,
                            $imageWrapEl: void 0,
                            maxRatio: 3
                        },
                        image: {
                            isTouched: void 0,
                            isMoved: void 0,
                            currentX: void 0,
                            currentY: void 0,
                            minX: void 0,
                            minY: void 0,
                            maxX: void 0,
                            maxY: void 0,
                            width: void 0,
                            height: void 0,
                            startX: void 0,
                            startY: void 0,
                            touchesStart: {},
                            touchesCurrent: {}
                        },
                        velocity: {
                            x: void 0,
                            y: void 0,
                            prevPositionX: void 0,
                            prevPositionY: void 0,
                            prevTime: void 0
                        }
                    };
                "onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(function (e) {
                    t[e] = X[e].bind(i);
                }), ee.extend(i, {
                    zoom: t
                });
                var s = 1;
                Object.defineProperty(i.zoom, "scale", {
                    get: function get() {
                        return s;
                    },
                    set: function set(e) {
                        if (s !== e) {
                            var t = i.zoom.gesture.$imageEl ? i.zoom.gesture.$imageEl[0] : void 0,
                                a = i.zoom.gesture.$slideEl ? i.zoom.gesture.$slideEl[0] : void 0;
                            i.emit("zoomChange", e, t, a);
                        }

                        s = e;
                    }
                });
            },
            on: {
                init: function init() {
                    this.params.zoom.enabled && this.zoom.enable();
                },
                destroy: function destroy() {
                    this.zoom.disable();
                },
                touchStart: function touchStart(e) {
                    this.zoom.enabled && this.zoom.onTouchStart(e);
                },
                touchEnd: function touchEnd(e) {
                    this.zoom.enabled && this.zoom.onTouchEnd(e);
                },
                doubleTap: function doubleTap(e) {
                    this.params.zoom.enabled && this.zoom.enabled && this.params.zoom.toggle && this.zoom.toggle(e);
                },
                transitionEnd: function transitionEnd() {
                    this.zoom.enabled && this.params.zoom.enabled && this.zoom.onTransitionEnd();
                }
            }
        }, {
            name: "lazy",
            params: {
                lazy: {
                    enabled: !1,
                    loadPrevNext: !1,
                    loadPrevNextAmount: 1,
                    loadOnTransitionStart: !1,
                    elementClass: "swiper-lazy",
                    loadingClass: "swiper-lazy-loading",
                    loadedClass: "swiper-lazy-loaded",
                    preloaderClass: "swiper-lazy-preloader"
                }
            },
            create: function create() {
                ee.extend(this, {
                    lazy: {
                        initialImageLoaded: !1,
                        load: Y.load.bind(this),
                        loadInSlide: Y.loadInSlide.bind(this)
                    }
                });
            },
            on: {
                beforeInit: function beforeInit() {
                    this.params.lazy.enabled && this.params.preloadImages && (this.params.preloadImages = !1);
                },
                init: function init() {
                    this.params.lazy.enabled && !this.params.loop && 0 === this.params.initialSlide && this.lazy.load();
                },
                scroll: function scroll() {
                    this.params.freeMode && !this.params.freeModeSticky && this.lazy.load();
                },
                resize: function resize() {
                    this.params.lazy.enabled && this.lazy.load();
                },
                scrollbarDragMove: function scrollbarDragMove() {
                    this.params.lazy.enabled && this.lazy.load();
                },
                transitionStart: function transitionStart() {
                    var e = this;
                    e.params.lazy.enabled && (e.params.lazy.loadOnTransitionStart || !e.params.lazy.loadOnTransitionStart && !e.lazy.initialImageLoaded) && e.lazy.load();
                },
                transitionEnd: function transitionEnd() {
                    this.params.lazy.enabled && !this.params.lazy.loadOnTransitionStart && this.lazy.load();
                }
            }
        }, {
            name: "controller",
            params: {
                controller: {
                    control: void 0,
                    inverse: !1,
                    by: "slide"
                }
            },
            create: function create() {
                var e = this;
                ee.extend(e, {
                    controller: {
                        control: e.params.controller.control,
                        getInterpolateFunction: V.getInterpolateFunction.bind(e),
                        setTranslate: V.setTranslate.bind(e),
                        setTransition: V.setTransition.bind(e)
                    }
                });
            },
            on: {
                update: function update() {
                    this.controller.control && this.controller.spline && (this.controller.spline = void 0, delete this.controller.spline);
                },
                resize: function resize() {
                    this.controller.control && this.controller.spline && (this.controller.spline = void 0, delete this.controller.spline);
                },
                observerUpdate: function observerUpdate() {
                    this.controller.control && this.controller.spline && (this.controller.spline = void 0, delete this.controller.spline);
                },
                setTranslate: function setTranslate(e, t) {
                    this.controller.control && this.controller.setTranslate(e, t);
                },
                setTransition: function setTransition(e, t) {
                    this.controller.control && this.controller.setTransition(e, t);
                }
            }
        }, {
            name: "a11y",
            params: {
                a11y: {
                    enabled: !0,
                    notificationClass: "swiper-notification",
                    prevSlideMessage: "Previous slide",
                    nextSlideMessage: "Next slide",
                    firstSlideMessage: "This is the first slide",
                    lastSlideMessage: "This is the last slide",
                    paginationBulletMessage: "Go to slide {{index}}"
                }
            },
            create: function create() {
                var t = this;
                ee.extend(t, {
                    a11y: {
                        liveRegion: L('<span class="' + t.params.a11y.notificationClass + '" aria-live="assertive" aria-atomic="true"></span>')
                    }
                }), Object.keys(F).forEach(function (e) {
                    t.a11y[e] = F[e].bind(t);
                });
            },
            on: {
                init: function init() {
                    this.params.a11y.enabled && (this.a11y.init(), this.a11y.updateNavigation());
                },
                toEdge: function toEdge() {
                    this.params.a11y.enabled && this.a11y.updateNavigation();
                },
                fromEdge: function fromEdge() {
                    this.params.a11y.enabled && this.a11y.updateNavigation();
                },
                paginationUpdate: function paginationUpdate() {
                    this.params.a11y.enabled && this.a11y.updatePagination();
                },
                destroy: function destroy() {
                    this.params.a11y.enabled && this.a11y.destroy();
                }
            }
        }, {
            name: "history",
            params: {
                history: {
                    enabled: !1,
                    replaceState: !1,
                    key: "slides"
                }
            },
            create: function create() {
                var e = this;
                ee.extend(e, {
                    history: {
                        init: R.init.bind(e),
                        setHistory: R.setHistory.bind(e),
                        setHistoryPopState: R.setHistoryPopState.bind(e),
                        scrollToSlide: R.scrollToSlide.bind(e),
                        destroy: R.destroy.bind(e)
                    }
                });
            },
            on: {
                init: function init() {
                    this.params.history.enabled && this.history.init();
                },
                destroy: function destroy() {
                    this.params.history.enabled && this.history.destroy();
                },
                transitionEnd: function transitionEnd() {
                    this.history.initialized && this.history.setHistory(this.params.history.key, this.activeIndex);
                }
            }
        }, {
            name: "hash-navigation",
            params: {
                hashNavigation: {
                    enabled: !1,
                    replaceState: !1,
                    watchState: !1
                }
            },
            create: function create() {
                var e = this;
                ee.extend(e, {
                    hashNavigation: {
                        initialized: !1,
                        init: q.init.bind(e),
                        destroy: q.destroy.bind(e),
                        setHash: q.setHash.bind(e),
                        onHashCange: q.onHashCange.bind(e)
                    }
                });
            },
            on: {
                init: function init() {
                    this.params.hashNavigation.enabled && this.hashNavigation.init();
                },
                destroy: function destroy() {
                    this.params.hashNavigation.enabled && this.hashNavigation.destroy();
                },
                transitionEnd: function transitionEnd() {
                    this.hashNavigation.initialized && this.hashNavigation.setHash();
                }
            }
        }, {
            name: "autoplay",
            params: {
                autoplay: {
                    enabled: !1,
                    delay: 3e3,
                    waitForTransition: !0,
                    disableOnInteraction: !0,
                    stopOnLastSlide: !1,
                    reverseDirection: !1
                }
            },
            create: function create() {
                var t = this;
                ee.extend(t, {
                    autoplay: {
                        running: !1,
                        paused: !1,
                        run: W.run.bind(t),
                        start: W.start.bind(t),
                        stop: W.stop.bind(t),
                        pause: W.pause.bind(t),
                        onTransitionEnd: function onTransitionEnd(e) {
                            t && !t.destroyed && t.$wrapperEl && e.target === this && (t.$wrapperEl[0].removeEventListener("transitionend", t.autoplay.onTransitionEnd), t.$wrapperEl[0].removeEventListener("webkitTransitionEnd", t.autoplay.onTransitionEnd), t.autoplay.paused = !1, t.autoplay.running ? t.autoplay.run() : t.autoplay.stop());
                        }
                    }
                });
            },
            on: {
                init: function init() {
                    this.params.autoplay.enabled && this.autoplay.start();
                },
                beforeTransitionStart: function beforeTransitionStart(e, t) {
                    this.autoplay.running && (t || !this.params.autoplay.disableOnInteraction ? this.autoplay.pause(e) : this.autoplay.stop());
                },
                sliderFirstMove: function sliderFirstMove() {
                    this.autoplay.running && (this.params.autoplay.disableOnInteraction ? this.autoplay.stop() : this.autoplay.pause());
                },
                destroy: function destroy() {
                    this.autoplay.running && this.autoplay.stop();
                }
            }
        }, {
            name: "effect-fade",
            params: {
                fadeEffect: {
                    crossFade: !1
                }
            },
            create: function create() {
                ee.extend(this, {
                    fadeEffect: {
                        setTranslate: j.setTranslate.bind(this),
                        setTransition: j.setTransition.bind(this)
                    }
                });
            },
            on: {
                beforeInit: function beforeInit() {
                    var e = this;

                    if ("fade" === e.params.effect) {
                        e.classNames.push(e.params.containerModifierClass + "fade");
                        var t = {
                            slidesPerView: 1,
                            slidesPerColumn: 1,
                            slidesPerGroup: 1,
                            watchSlidesProgress: !0,
                            spaceBetween: 0,
                            virtualTranslate: !0
                        };
                        ee.extend(e.params, t), ee.extend(e.originalParams, t);
                    }
                },
                setTranslate: function setTranslate() {
                    "fade" === this.params.effect && this.fadeEffect.setTranslate();
                },
                setTransition: function setTransition(e) {
                    "fade" === this.params.effect && this.fadeEffect.setTransition(e);
                }
            }
        }, {
            name: "effect-cube",
            params: {
                cubeEffect: {
                    slideShadows: !0,
                    shadow: !0,
                    shadowOffset: 20,
                    shadowScale: .94
                }
            },
            create: function create() {
                ee.extend(this, {
                    cubeEffect: {
                        setTranslate: U.setTranslate.bind(this),
                        setTransition: U.setTransition.bind(this)
                    }
                });
            },
            on: {
                beforeInit: function beforeInit() {
                    var e = this;

                    if ("cube" === e.params.effect) {
                        e.classNames.push(e.params.containerModifierClass + "cube"), e.classNames.push(e.params.containerModifierClass + "3d");
                        var t = {
                            slidesPerView: 1,
                            slidesPerColumn: 1,
                            slidesPerGroup: 1,
                            watchSlidesProgress: !0,
                            resistanceRatio: 0,
                            spaceBetween: 0,
                            centeredSlides: !1,
                            virtualTranslate: !0
                        };
                        ee.extend(e.params, t), ee.extend(e.originalParams, t);
                    }
                },
                setTranslate: function setTranslate() {
                    "cube" === this.params.effect && this.cubeEffect.setTranslate();
                },
                setTransition: function setTransition(e) {
                    "cube" === this.params.effect && this.cubeEffect.setTransition(e);
                }
            }
        }, {
            name: "effect-flip",
            params: {
                flipEffect: {
                    slideShadows: !0,
                    limitRotation: !0
                }
            },
            create: function create() {
                ee.extend(this, {
                    flipEffect: {
                        setTranslate: K.setTranslate.bind(this),
                        setTransition: K.setTransition.bind(this)
                    }
                });
            },
            on: {
                beforeInit: function beforeInit() {
                    var e = this;

                    if ("flip" === e.params.effect) {
                        e.classNames.push(e.params.containerModifierClass + "flip"), e.classNames.push(e.params.containerModifierClass + "3d");
                        var t = {
                            slidesPerView: 1,
                            slidesPerColumn: 1,
                            slidesPerGroup: 1,
                            watchSlidesProgress: !0,
                            spaceBetween: 0,
                            virtualTranslate: !0
                        };
                        ee.extend(e.params, t), ee.extend(e.originalParams, t);
                    }
                },
                setTranslate: function setTranslate() {
                    "flip" === this.params.effect && this.flipEffect.setTranslate();
                },
                setTransition: function setTransition(e) {
                    "flip" === this.params.effect && this.flipEffect.setTransition(e);
                }
            }
        }, {
            name: "effect-coverflow",
            params: {
                coverflowEffect: {
                    rotate: 50,
                    stretch: 0,
                    depth: 100,
                    modifier: 1,
                    slideShadows: !0
                }
            },
            create: function create() {
                ee.extend(this, {
                    coverflowEffect: {
                        setTranslate: _.setTranslate.bind(this),
                        setTransition: _.setTransition.bind(this)
                    }
                });
            },
            on: {
                beforeInit: function beforeInit() {
                    var e = this;
                    "coverflow" === e.params.effect && (e.classNames.push(e.params.containerModifierClass + "coverflow"), e.classNames.push(e.params.containerModifierClass + "3d"), e.params.watchSlidesProgress = !0, e.originalParams.watchSlidesProgress = !0);
                },
                setTranslate: function setTranslate() {
                    "coverflow" === this.params.effect && this.coverflowEffect.setTranslate();
                },
                setTransition: function setTransition(e) {
                    "coverflow" === this.params.effect && this.coverflowEffect.setTransition(e);
                }
            }
        }, {
            name: "thumbs",
            params: {
                thumbs: {
                    swiper: null,
                    slideThumbActiveClass: "swiper-slide-thumb-active",
                    thumbsContainerClass: "swiper-container-thumbs"
                }
            },
            create: function create() {
                ee.extend(this, {
                    thumbs: {
                        swiper: null,
                        init: Z.init.bind(this),
                        update: Z.update.bind(this),
                        onThumbClick: Z.onThumbClick.bind(this)
                    }
                });
            },
            on: {
                beforeInit: function beforeInit() {
                    var e = this.params.thumbs;
                    e && e.swiper && (this.thumbs.init(), this.thumbs.update(!0));
                },
                slideChange: function slideChange() {
                    this.thumbs.swiper && this.thumbs.update();
                },
                update: function update() {
                    this.thumbs.swiper && this.thumbs.update();
                },
                resize: function resize() {
                    this.thumbs.swiper && this.thumbs.update();
                },
                observerUpdate: function observerUpdate() {
                    this.thumbs.swiper && this.thumbs.update();
                },
                setTransition: function setTransition(e) {
                    var t = this.thumbs.swiper;
                    t && t.setTransition(e);
                },
                beforeDestroy: function beforeDestroy() {
                    var e = this.thumbs.swiper;
                    e && this.thumbs.swiperCreated && e && e.destroy();
                }
            }
        }];
    return void 0 === T.use && (T.use = T.Class.use, T.installModule = T.Class.installModule), T.use(Q), T;
});
"use strict";

!function (i) {
    i.fn.theiaStickySidebar = function (t) {
        function e(t, e) {
            var a = o(t, e);
            a || (console.log("TSS: Body width smaller than options.minWidth. Init is delayed."), i(document).on("scroll." + t.namespace, function (t, e) {
                return function (a) {
                    var n = o(t, e);
                    n && i(this).unbind(a);
                };
            }(t, e)), i(window).on("resize." + t.namespace, function (t, e) {
                return function (a) {
                    var n = o(t, e);
                    n && i(this).unbind(a);
                };
            }(t, e)));
        }

        function o(t, e) {
            return t.initialized === !0 || !(i("body").width() < t.minWidth) && (a(t, e), !0);
        }

        function a(t, e) {
            t.initialized = !0;
            var o = i("#theia-sticky-sidebar-stylesheet-" + t.namespace);
            0 === o.length && i("head").append(i('<style id="theia-sticky-sidebar-stylesheet-' + t.namespace + '">.theiaStickySidebar:after {content: ""; display: table; clear: both;}</style>')), e.each(function () {
                function e() {
                    a.fixedScrollTop = 0, a.sidebar.css({
                        "min-height": "1px"
                    }), a.stickySidebar.css({
                        position: "static",
                        width: "",
                        transform: "none"
                    });
                }

                function o(t) {
                    var e = t.height();
                    return t.children().each(function () {
                        e = Math.max(e, i(this).height());
                    }), e;
                }

                var a = {};

                if (a.sidebar = i(this), a.options = t || {}, a.container = i(a.options.containerSelector), 0 == a.container.length && (a.container = a.sidebar.parent()), a.sidebar.parents().css("-webkit-transform", "none"), a.sidebar.css({
                    position: a.options.defaultPosition,
                    overflow: "visible",
                    "-webkit-box-sizing": "border-box",
                    "-moz-box-sizing": "border-box",
                    "box-sizing": "border-box"
                }), a.stickySidebar = a.sidebar.find(".theiaStickySidebar"), 0 == a.stickySidebar.length) {
                    var s = /(?:text|application)\/(?:x-)?(?:javascript|ecmascript)/i;
                    a.sidebar.find("script").filter(function (i, t) {
                        return 0 === t.type.length || t.type.match(s);
                    }).remove(), a.stickySidebar = i("<div>").addClass("theiaStickySidebar").append(a.sidebar.children()), a.sidebar.append(a.stickySidebar);
                }

                a.marginBottom = parseInt(a.sidebar.css("margin-bottom")), a.paddingTop = parseInt(a.sidebar.css("padding-top")), a.paddingBottom = parseInt(a.sidebar.css("padding-bottom"));
                var r = a.stickySidebar.offset().top,
                    d = a.stickySidebar.outerHeight();
                a.stickySidebar.css("padding-top", 1), a.stickySidebar.css("padding-bottom", 1), r -= a.stickySidebar.offset().top, d = a.stickySidebar.outerHeight() - d - r, 0 == r ? (a.stickySidebar.css("padding-top", 0), a.stickySidebarPaddingTop = 0) : a.stickySidebarPaddingTop = 1, 0 == d ? (a.stickySidebar.css("padding-bottom", 0), a.stickySidebarPaddingBottom = 0) : a.stickySidebarPaddingBottom = 1, a.previousScrollTop = null, a.fixedScrollTop = 0, e(), a.onScroll = function (a) {
                    if (a.stickySidebar.is(":visible")) {
                        if (i("body").width() < a.options.minWidth) return void e();

                        if (a.options.disableOnResponsiveLayouts) {
                            var s = a.sidebar.outerWidth("none" == a.sidebar.css("float"));
                            if (s + 50 > a.container.width()) return void e();
                        }

                        var r = i(document).scrollTop(),
                            d = "static";

                        if (r >= a.sidebar.offset().top + (a.paddingTop - a.options.additionalMarginTop)) {
                            var c,
                                p = a.paddingTop + t.additionalMarginTop,
                                b = a.paddingBottom + a.marginBottom + t.additionalMarginBottom,
                                l = a.sidebar.offset().top,
                                f = a.sidebar.offset().top + o(a.container),
                                h = 0 + t.additionalMarginTop,
                                g = a.stickySidebar.outerHeight() + p + b < i(window).height();
                            c = g ? h + a.stickySidebar.outerHeight() : i(window).height() - a.marginBottom - a.paddingBottom - t.additionalMarginBottom;
                            var u = l - r + a.paddingTop,
                                S = f - r - a.paddingBottom - a.marginBottom,
                                y = a.stickySidebar.offset().top - r,
                                m = a.previousScrollTop - r;
                            "fixed" == a.stickySidebar.css("position") && "modern" == a.options.sidebarBehavior && (y += m), "stick-to-top" == a.options.sidebarBehavior && (y = t.additionalMarginTop), "stick-to-bottom" == a.options.sidebarBehavior && (y = c - a.stickySidebar.outerHeight()), y = m > 0 ? Math.min(y, h) : Math.max(y, c - a.stickySidebar.outerHeight()), y = Math.max(y, u), y = Math.min(y, S - a.stickySidebar.outerHeight());
                            var k = a.container.height() == a.stickySidebar.outerHeight();
                            d = (k || y != h) && (k || y != c - a.stickySidebar.outerHeight()) ? r + y - a.sidebar.offset().top - a.paddingTop <= t.additionalMarginTop ? "static" : "absolute" : "fixed";
                        }

                        if ("fixed" == d) {
                            var v = i(document).scrollLeft();
                            a.stickySidebar.css({
                                position: "fixed",
                                width: n(a.stickySidebar) + "px",
                                transform: "translateY(" + y + "px)",
                                left: a.sidebar.offset().left + parseInt(a.sidebar.css("padding-left")) - v + "px",
                                top: "0px"
                            });
                        } else if ("absolute" == d) {
                            var x = {};
                            "absolute" != a.stickySidebar.css("position") && (x.position = "absolute", x.transform = "translateY(" + (r + y - a.sidebar.offset().top - a.stickySidebarPaddingTop - a.stickySidebarPaddingBottom) + "px)", x.top = "0px"), x.width = n(a.stickySidebar) + "px", x.left = "", a.stickySidebar.css(x);
                        } else "static" == d && e();

                        "static" != d && 1 == a.options.updateSidebarHeight && a.sidebar.css({
                            "min-height": a.stickySidebar.outerHeight() + a.stickySidebar.offset().top - a.sidebar.offset().top + a.paddingBottom
                        }), a.previousScrollTop = r;
                    }
                }, a.onScroll(a), i(document).on("scroll." + a.options.namespace, function (i) {
                    return function () {
                        i.onScroll(i);
                    };
                }(a)), i(window).on("resize." + a.options.namespace, function (i) {
                    return function () {
                        i.stickySidebar.css({
                            position: "static"
                        }), i.onScroll(i);
                    };
                }(a)), "undefined" != typeof ResizeSensor && new ResizeSensor(a.stickySidebar[0], function (i) {
                    return function () {
                        i.onScroll(i);
                    };
                }(a));
            });
        }

        function n(i) {
            var t;

            try {
                t = i[0].getBoundingClientRect().width;
            } catch (i) {
            }

            return "undefined" == typeof t && (t = i.width()), t;
        }

        var s = {
            containerSelector: "",
            additionalMarginTop: 0,
            additionalMarginBottom: 0,
            updateSidebarHeight: !0,
            minWidth: 0,
            disableOnResponsiveLayouts: !0,
            sidebarBehavior: "modern",
            defaultPosition: "relative",
            namespace: "TSS"
        };
        return t = i.extend(s, t), t.additionalMarginTop = parseInt(t.additionalMarginTop) || 0, t.additionalMarginBottom = parseInt(t.additionalMarginBottom) || 0, e(t, this), this;
    };
}(jQuery);
"use strict";

function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
            return typeof obj;
        };
    } else {
        _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
    }
    return _typeof(obj);
}

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object') {
        // Node/CommonJS
        module.exports = factory();
    } else {
        // Browser globals
        window.wNumb = factory();
    }
})(function () {
    'use strict';

    var FormatOptions = ['decimals', 'thousand', 'mark', 'prefix', 'suffix', 'encoder', 'decoder', 'negativeBefore', 'negative', 'edit', 'undo']; // General
    // Reverse a string

    function strReverse(a) {
        return a.split('').reverse().join('');
    } // Check if a string starts with a specified prefix.


    function strStartsWith(input, match) {
        return input.substring(0, match.length) === match;
    } // Check is a string ends in a specified suffix.


    function strEndsWith(input, match) {
        return input.slice(-1 * match.length) === match;
    } // Throw an error if formatting options are incompatible.


    function throwEqualError(F, a, b) {
        if ((F[a] || F[b]) && F[a] === F[b]) {
            throw new Error(a);
        }
    } // Check if a number is finite and not NaN


    function isValidNumber(input) {
        return typeof input === 'number' && isFinite(input);
    } // Provide rounding-accurate toFixed method.
    // Borrowed: http://stackoverflow.com/a/21323330/775265


    function toFixed(value, exp) {
        value = value.toString().split('e');
        value = Math.round(+(value[0] + 'e' + (value[1] ? +value[1] + exp : exp)));
        value = value.toString().split('e');
        return (+(value[0] + 'e' + (value[1] ? +value[1] - exp : -exp))).toFixed(exp);
    } // Formatting
    // Accept a number as input, output formatted string.


    function formatTo(decimals, thousand, mark, prefix, suffix, encoder, decoder, negativeBefore, negative, edit, undo, input) {
        var originalInput = input,
            inputIsNegative,
            inputPieces,
            inputBase,
            inputDecimals = '',
            output = ''; // Apply user encoder to the input.
        // Expected outcome: number.

        if (encoder) {
            input = encoder(input);
        } // Stop if no valid number was provided, the number is infinite or NaN.


        if (!isValidNumber(input)) {
            return false;
        } // Rounding away decimals might cause a value of -0
        // when using very small ranges. Remove those cases.


        if (decimals !== false && parseFloat(input.toFixed(decimals)) === 0) {
            input = 0;
        } // Formatting is done on absolute numbers,
        // decorated by an optional negative symbol.


        if (input < 0) {
            inputIsNegative = true;
            input = Math.abs(input);
        } // Reduce the number of decimals to the specified option.


        if (decimals !== false) {
            input = toFixed(input, decimals);
        } // Transform the number into a string, so it can be split.


        input = input.toString(); // Break the number on the decimal separator.

        if (input.indexOf('.') !== -1) {
            inputPieces = input.split('.');
            inputBase = inputPieces[0];

            if (mark) {
                inputDecimals = mark + inputPieces[1];
            }
        } else {
            // If it isn't split, the entire number will do.
            inputBase = input;
        } // Group numbers in sets of three.


        if (thousand) {
            inputBase = strReverse(inputBase).match(/.{1,3}/g);
            inputBase = strReverse(inputBase.join(strReverse(thousand)));
        } // If the number is negative, prefix with negation symbol.


        if (inputIsNegative && negativeBefore) {
            output += negativeBefore;
        } // Prefix the number


        if (prefix) {
            output += prefix;
        } // Normal negative option comes after the prefix. Defaults to '-'.


        if (inputIsNegative && negative) {
            output += negative;
        } // Append the actual number.


        output += inputBase;
        output += inputDecimals; // Apply the suffix.

        if (suffix) {
            output += suffix;
        } // Run the output through a user-specified post-formatter.


        if (edit) {
            output = edit(output, originalInput);
        } // All done.


        return output;
    } // Accept a sting as input, output decoded number.


    function formatFrom(decimals, thousand, mark, prefix, suffix, encoder, decoder, negativeBefore, negative, edit, undo, input) {
        var originalInput = input,
            inputIsNegative,
            output = ''; // User defined pre-decoder. Result must be a non empty string.

        if (undo) {
            input = undo(input);
        } // Test the input. Can't be empty.


        if (!input || typeof input !== 'string') {
            return false;
        } // If the string starts with the negativeBefore value: remove it.
        // Remember is was there, the number is negative.


        if (negativeBefore && strStartsWith(input, negativeBefore)) {
            input = input.replace(negativeBefore, '');
            inputIsNegative = true;
        } // Repeat the same procedure for the prefix.


        if (prefix && strStartsWith(input, prefix)) {
            input = input.replace(prefix, '');
        } // And again for negative.


        if (negative && strStartsWith(input, negative)) {
            input = input.replace(negative, '');
            inputIsNegative = true;
        } // Remove the suffix.
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice


        if (suffix && strEndsWith(input, suffix)) {
            input = input.slice(0, -1 * suffix.length);
        } // Remove the thousand grouping.


        if (thousand) {
            input = input.split(thousand).join('');
        } // Set the decimal separator back to period.


        if (mark) {
            input = input.replace(mark, '.');
        } // Prepend the negative symbol.


        if (inputIsNegative) {
            output += '-';
        } // Add the number


        output += input; // Trim all non-numeric characters (allow '.' and '-');

        output = output.replace(/[^0-9\.\-.]/g, ''); // The value contains no parse-able number.

        if (output === '') {
            return false;
        } // Covert to number.


        output = Number(output); // Run the user-specified post-decoder.

        if (decoder) {
            output = decoder(output);
        } // Check is the output is valid, otherwise: return false.


        if (!isValidNumber(output)) {
            return false;
        }

        return output;
    } // Framework
    // Validate formatting options


    function validate(inputOptions) {
        var i,
            optionName,
            optionValue,
            filteredOptions = {};

        if (inputOptions['suffix'] === undefined) {
            inputOptions['suffix'] = inputOptions['postfix'];
        }

        for (i = 0; i < FormatOptions.length; i += 1) {
            optionName = FormatOptions[i];
            optionValue = inputOptions[optionName];

            if (optionValue === undefined) {
                // Only default if negativeBefore isn't set.
                if (optionName === 'negative' && !filteredOptions.negativeBefore) {
                    filteredOptions[optionName] = '-'; // Don't set a default for mark when 'thousand' is set.
                } else if (optionName === 'mark' && filteredOptions.thousand !== '.') {
                    filteredOptions[optionName] = '.';
                } else {
                    filteredOptions[optionName] = false;
                } // Floating points in JS are stable up to 7 decimals.

            } else if (optionName === 'decimals') {
                if (optionValue >= 0 && optionValue < 8) {
                    filteredOptions[optionName] = optionValue;
                } else {
                    throw new Error(optionName);
                } // These options, when provided, must be functions.

            } else if (optionName === 'encoder' || optionName === 'decoder' || optionName === 'edit' || optionName === 'undo') {
                if (typeof optionValue === 'function') {
                    filteredOptions[optionName] = optionValue;
                } else {
                    throw new Error(optionName);
                } // Other options are strings.

            } else {
                if (typeof optionValue === 'string') {
                    filteredOptions[optionName] = optionValue;
                } else {
                    throw new Error(optionName);
                }
            }
        } // Some values can't be extracted from a
        // string if certain combinations are present.


        throwEqualError(filteredOptions, 'mark', 'thousand');
        throwEqualError(filteredOptions, 'prefix', 'negative');
        throwEqualError(filteredOptions, 'prefix', 'negativeBefore');
        return filteredOptions;
    } // Pass all options as function arguments


    function passAll(options, method, input) {
        var i,
            args = []; // Add all options in order of FormatOptions

        for (i = 0; i < FormatOptions.length; i += 1) {
            args.push(options[FormatOptions[i]]);
        } // Append the input, then call the method, presenting all
        // options as arguments.


        args.push(input);
        return method.apply('', args);
    }

    function wNumb(options) {
        if (!(this instanceof wNumb)) {
            return new wNumb(options);
        }

        if (_typeof(options) !== "object") {
            return;
        }

        options = validate(options); // Call 'formatTo' with proper arguments.

        this.to = function (input) {
            return passAll(options, formatTo, input);
        }; // Call 'formatFrom' with proper arguments.


        this.from = function (input) {
            return passAll(options, formatFrom, input);
        };
    }

    return wNumb;
});
"use strict";

var swiper = new Swiper('.swiper-container', {
    slidesPerView: 3,
    spaceBetween: 1,
    pagination: {
        el: '.swiper-pagination',
        clickable: true
    },

    navigation: {
        nextEl: '.next-slide-button',
        prevEl: '.prev-slide-button'
    },
    breakpoints: {
        768: {
            slidesPerView: 1,
            slidesPerGroup: 1,
            spaceBetweenSlides: 2
        },
        1679: {
            slidesPerView: 3,
            spaceBetweenSlides: 1
        }
    }
});
var tabLinks = document.querySelectorAll(".tablinks");
var tabContent = document.querySelectorAll(".tabcontent");


tabLinks.forEach(function(el) {
    el.addEventListener("click", openTabs);
});


function openTabs(el) {
    var btnTarget = el.currentTarget;
    var valuetxt = btnTarget.dataset.valuetxt;

    tabContent.forEach(function(el) {
        el.classList.remove("active");
    });

    tabLinks.forEach(function(el) {
        el.classList.remove("active");
    });

    document.querySelector("#" + valuetxt).classList.add("active");

    btnTarget.classList.add("active");
}
$(document).ready(function () {
    $('.accordion__header').click(function () {

        $(".accordion__body").not($(this).next()).slideUp(400);
        $(this).next().slideToggle(400);

        $(".accordion__item").not($(this).closest(".accordion__item")).removeClass("open-accordion");
        $(this).closest(".accordion__item").toggleClass("open-accordion");
    });
});

$(document).ready(function () {
    $('#headingOne').click(function () {

        $("#collapseOne").not($(this).next()).slideUp(400);
        $(this).next().slideToggle(400);

        $(".card-body").not($(this).closest(".card-body")).removeClass(".show");
        $(this).closest(".card-body").toggleClass(".show");
    });
});
$(document).ready(function () {
    // add swiper main slider to home page
    var swiper = new Swiper('.main-slider__inner', {
        spaceBetween: 30,
        effect: 'fade',
        pagination: {
            el: '.swiper-pagination',
            clickable: true
        },
        navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev'
        }
    });
});
$(document).ready(function () {
    // add swiper main slider to home page
    var discountSlider = new Swiper('.discounts-slider__inner', {
        spaceBetween: 30,
        effect: 'fade',
        autoplay: {
            delay: 2500,
            disableOnInteraction: false
        },
        navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev'
        }
    }); // add swiper products slider


    var productsSlider = new Swiper('.products-slider__inner', {
        slidesPerView: 6,
        slidesPerGroup: 5,
        lazy: {
            enabled: true
        },
        navigation: {
            nextEl: '.next-slide-button',
            prevEl: '.prev-slide-button'
        },
        keyboard: {
            enabled: true,
            onlyInViewport: true
        },
        breakpoints: {
            768: {
                slidesPerView: 1,
                slidesPerGroup: 1,
                spaceBetweenSlides: 2
            },
            1679: {
                slidesPerView: 5,
                slidesPerGroup: 4,
                spaceBetweenSlides: 1
            }
        }
    }); // add brands swiper slider

    var brandsSlider = new Swiper('.brands-slider__inner', {
        slidesPerView: 6,
        slidesPerGroup: 6,
        autoplay: {
            delay: 2500,
            disableOnInteraction: false
        },
        navigation: {
            nextEl: '.next-slide-button',
            prevEl: '.prev-slide-button'
        },
        breakpoints: {
            768: {
                slidesPerView: 1,
                slidesPerGroup: 1,
                spaceBetweenSlides: 2
            },
            1679: {
                slidesPerView: 5,
                spaceBetweenSlides: 1
            }
        }
    }); // add trigger if slide changed arrow pointer change same one

    discountSlider.on('slideChange', function () {
        var activeIndex = discountSlider.activeIndex;
        var discountListTitle = jQuery(".main .main__inner .home .home__inner .right .discounts .discounts-title-list .discounts-title-list__inner .items");
        $(discountListTitle).find(".item").each(function () {
            var _this = jQuery(this);

            _this.removeClass("active");
        });
        $(discountListTitle).find("[data-discount-id = ".concat(activeIndex, " ]")).addClass("active");
    });
    var discountItem = jQuery(".main .main__inner .home .home__inner .right .discounts .discount-item").each(function () {
        var _this = jQuery(this);

        var self = _this.find(".discount-time-to-left .discount-time-to-left__inner");

        var selfTimeLeft = _this.find(".discount-time-to-left .discount-time-to-left__inner").attr("data-time-left");

        timeLeftCounter(selfTimeLeft, self, "<span class='finish-time-left--text'>تمام شد</span>", true);
    }); //change active tabs in single product information

    var tabs = $(".single-product-page .single-product-page__inner .product-full-information .product-full-information__inner .tabs .tab");
    $(tabs).click(function () {
        var tabId = $(this).attr('data-tab-id');
        $(tabs).each(function () {
            $(this).removeClass("active");
        });
        $(this).addClass("active");
        var productFulInformationInner = $(this).parent().parent();
        var content = productFulInformationInner.find(".contents .content-item");
        content.each(function () {
            $(this).removeClass("show");
        });
        $(productFulInformationInner).find("[data-self-tab-id=".concat(tabId, "]")).addClass('show');
    }); // config bar-rating-js

    $('#pd-rating').barrating('show', {
        theme: 'pd-rating',
        hoverState: true
    });
    $('#pd-rating').barrating('set', 'Mediocre'); //config fancybox

    $('[data-fancybox="pd-gallery"]').fancybox({
        buttons: ["close", "thumbs", "share", "zoom"]
    }); //show/hide social share

    var socialButton = $(".single-product-page .single-product-page__inner .share__like .mdi-share-variant");
    $(socialButton).click(function () {
        $(".single-product-page .single-product-page__inner .share__like .items").toggleClass("visible");
    });
    jQuery(".home .discounts .discounts-title-list__inner .items .item").click(function () {
        var sliderItemId = jQuery(this).attr("data-discount-id");
        console.log(sliderItemId);
        discountSlider.slideTo(sliderItemId);
    }); //

    jQuery(".profile-page .menus .menu .menu__inner").click(function () {
        var thiz = jQuery(this).parent();

        if (thiz.find(".sub-menu").length > 0) {
            thiz.find(".sub-menu").toggleClass("p-menu-hidden", 800, 'easeOutQuint');
            thiz.find(".mdi-chevron-down").toggleClass("rotate180");
        }
    });
}); // calculating time counter
$(document).ready(function () {

    /* ************** responsive-header */

    $('button.btn-menu').click(function () {
        $('.side-menu').addClass('open');
        $('.overlay-side-menu').addClass('show');
    });
    $('.overlay-side-menu').click(function () {
        $(this).removeClass('show');
        $('.side-menu').removeClass('open');
    });
    $('.btn-menu').on('click', function () {
        $('.overlay-side-menu').fadeIn(200);
        $('.side-menu').addClass("open");
    });
    $('.overlay-side-menu').on('click', function () {
        if ($('.side-menu').hasClass('open')) {
            $('.side-menu').removeClass('open');
        }

        $(this).fadeOut(200);
    });
    $('.side-menu li.active').addClass('open').children('ul').show();
    $(".side-menu li.sub-menu> a").on('click', function () {
        $(this).removeAttr('href');
        var e = $(this).parent('li');

        if (e.hasClass('open')) {
            e.removeClass('open');
            e.find('li').removeClass('open');
            e.find('ul').slideUp(400);
        } else {
            e.addClass('open');
            e.children('ul').slideDown(400);
            e.siblings('li').children('ul').slideUp(400);
            e.siblings('li').removeClass('open');
        }
    });

    if (window.PAGE_NAME === 'product.page') {
        var checkFixedTabHeader = function checkFixedTabHeader(tabs_container_height) {
            // console.log('window.pageYOffset :',window.pageYOffset);
            // console.log('product_tab_title_section_top :',product_tab_title_section_top);
            // console.log('tabs_container_height :',tabs_container_height);
            if (window.pageYOffset >= product_tab_title_section_top && !product_tab_title_section.hasClass('fixed')) {
                product_tab_title_section.addClass('fixed');
            }

            if (window.pageYOffset <= product_tab_title_section_top && product_tab_title_section.hasClass('fixed')) {
                product_tab_title_section.removeClass('fixed');
            }

            if (window.pageYOffset >= tabs_container_height && product_tab_title_section.hasClass('fixed')) {
                product_tab_title_section.removeClass('fixed');
            }
        };

        //product tabs header fixed top
        var product_tab_title_section = $('.product_tab_title_section');
        var tabs_container = $('#tabs-container');
        var product_tab_title_section_top = product_tab_title_section.offset().top;
        var tabs_container_height = tabs_container.offset().top + tabs_container.innerHeight();
        $(window).scroll(function () {
            var tabs_container_height = tabs_container.offset().top + tabs_container.innerHeight();
            setTimeout(function () {
                checkFixedTabHeader(tabs_container_height);
            }, 300);
        });
        checkFixedTabHeader(tabs_container_height); // collapse product description section :

        $('.product-description').find('.card-header').click(function () {
            var $this = $(this);

            if ($this.hasClass('active')) {
                $this.removeClass('active');
                $this.parent().find('.collapse').removeClass('show');
            } else {
                $this.addClass('active');
                $this.parent().find('.collapse').addClass('show');
            }
        });
    }

    $('.btn-collapse-categories').click(function () {
        if ($(this).hasClass('active')) {
            $(this).removeClass('active');
            $(this).find('.mdi').addClass('mdi-chevron-double-down').removeClass('mdi-chevron-double-up');
            $(this).find('span').text('نمایش همه دسته بندی ها');
            $('.category-level-2').find('li').each(function (index, item) {
                if (index > 4) {
                    $(item).addClass('hide').removeClass('show');
                }
            });
        } else {
            $(this).addClass('active');
            $(this).find('.mdi').addClass('mdi-chevron-double-up').removeClass('mdi-chevron-double-down');
            $(this).find('span').text('بستن');
            $('.category-level-2').find('li').addClass('show').removeClass('hide');
        }
    });
}); // header responsive


function timeLeftCounter(date, element, text, hasHour) {
    var countDownDate = new Date(date).getTime();
    var x = setInterval(function () {
        var now = new Date().getTime(); // Find the distance between now and the count down date

        var distance = countDownDate - now; // Time calculations for days, hours, minutes and seconds

        var days = Math.floor(distance / (1000 * 60 * 60 * 24));
        var hours = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));
        var minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));
        var seconds = Math.floor(distance % (1000 * 60) / 1000);
        hours = hours > 9 ? "" + hours : "0" + hours;
        minutes = minutes > 9 ? "" + minutes : "0" + minutes;
        seconds = seconds > 9 ? "" + seconds : "0" + seconds; // Output the result in an element with id="demo"

        if (hasHour) {
            jQuery(element).text(hours + ":" + minutes + ":" + seconds).persiaNumber();
        } else {
            jQuery(element).text(minutes + ":" + seconds).persiaNumber();
        } // If the count down is over, write some text


        if (distance < 0) {
            clearInterval(x);
            jQuery(element).html(text);
        }
    }, 1000);
} // config the sticky sidebar for single-post

/* ************** back-to-top */

$("#bottomToTopNavigation span").click(function () {
    $("body,html").animate({
        scrollTop: 0
    }, 700);
    return;
});
jQuery(document).ready(function () {
    jQuery('.search-side-bar, .search-main-bar').theiaStickySidebar({
        // Settings
        additionalMarginTop: 30
    });
});
jQuery(window).on('load', function () {
    //config zoom image product in single product page
    jQuery("#zoom_01").ezPlus({
        zoomWindowPosition: 10,
        zoomWindowHeight: 450,
        zoomWindowWidth: 550,
        lensFadeIn: 200,
        lensFadeOut: 200,
        lensBorderSize: 2.5,
        lensBorderColour: '#ee4000',
        lensColour: 'transparent',
        borderColour: '#ddd',
        zoomTintFadeIn: 200,
        zoomTintFadeOut: 200,
        scrollZoom: false,
        scrollZoomIncrement: 0.3,
        easing: true,
        cursor: "crosshair",
        tint: false,
        tintColour: '#fff',
        tintOpacity: 0,
        borderSize: 1,
        delay: 300,
        easingDuration: 150
    });
}); // price-slider-range config in search page

var slider = document.querySelector('#pd-price-range');
var $raneSliderFrom = jQuery('.price-slider-box .from-price .price').attr('data-value');
var $raneSliderTo = jQuery('.price-slider-box .to-price .price').attr('data-value');
var min = parseInt($raneSliderFrom);
var max = parseInt($raneSliderTo);

if (slider) {
    noUiSlider.create(slider, {
        start: [min, max],
        connect: true,
        format: wNumb({
            decimals: 0
        }),
        range: {
            'min': min,
            'max': max
        },
        direction: 'rtl'
    });
    slider.noUiSlider.on('update', function (values, handle) {
        jQuery('.price-slider-box .from-price .price').text(tomansCurrency(values[0])).persiaNumber();
        jQuery('.price-slider-box .to-price .price').text(tomansCurrency(values[1])).persiaNumber();
    });
} // filter brands side-bar form in search page

// Instantiate a slider
var map = $('.product-point').map(function (i, dom) {
    var dom = $(dom).attr('data-point-id');

    var mySlider = new Slider("#slider-point-" + dom, {});

// Call a method on the slider
    var value = mySlider.getValue();

// For non-getter methods, you can chain together commands
    mySlider
        .setValue(5)
        .setValue(7);

});

var brandsSearchInput = jQuery(".brands-box .search-in-brands--input");
brandsSearchInput.on("input", function () {
    var searchedTxt = jQuery(this).val();
    var $brandsItem = jQuery(".brands .brand-item");
    $($brandsItem).each(function () {
        jQuery(this).removeClass("hidden");
    });
    $($brandsItem).each(function () {
        var brandItemTxt = jQuery(this).find(".brand-item__inner label").text();

        if (!brandItemTxt.includes(searchedTxt)) {
            jQuery(this).addClass("hidden");
        }
    });
});
var brandsSearchInput = jQuery(".colors-box .search-in-colors--input");
brandsSearchInput.on("input", function () {
    var searchedTxt = jQuery(this).val();
    var $brandsItem = jQuery(".colors .color-item");
    $($brandsItem).each(function () {
        jQuery(this).removeClass("hidden");
    });
    $($brandsItem).each(function () {
        var brandItemTxt = jQuery(this).find(".color-item__inner label").text();

        if (!brandItemTxt.includes(searchedTxt)) {
            jQuery(this).addClass("hidden");
        }
    });
});

// toggle class has-drop-down boxes hide/show

jQuery(document).ready(function () {
    var dropDownBox = jQuery(".boxes .box .has-drop-down");
    jQuery(dropDownBox).find(".box-title .icon").click(function () {
        jQuery(this).toggleClass("mdi-window-minimize").toggleClass("mdi-open-in-new");
        var parentBox = parentByClass(jQuery(this), "box");
        parentBox.find(".box-content").toggleClass("no-active");
    });
}); // active filter item in search page

var filtersItem = jQuery(".search-main-bar .filters .filter");
jQuery(filtersItem).click(function () {
    jQuery(filtersItem).each(function () {
        jQuery(this).removeClass("active");
    });
    jQuery(this).addClass("active");
    var sortType = jQuery(this).attr("data-sort");
    $.ajax({
        type: 'GET',
        data: {
            filter_type: sortType
        }
    });
}); // find parent's parent by class given

function parentByClass(_element, _class) {
    while (_element.tagName !== 'body') {
        if (_element.hasClass(_class)) {
            return _element;
        } else {
            _element = _element.parent();
        }
    }
} // check if brands filter checked true in search page


function ifbrandsChekedTrue() {
    var brandsId = [];
    jQuery(".search-page .search-side-bar .brands-box .brand-item").each(function () {
        if (jQuery(this).find(".md-checkbox input").prop("checked")) {
            brandsId.push("".concat(jQuery(this).find(".md-checkbox input").attr("data-brand-id")));
        }
    });
    console.log(brandsId);
    return brandsId;
} // check all active search-main-bar sorts
function ifcolorsChekedTrue() {
    var brandsId = [];
    jQuery(".search-page .search-side-bar .colors-box .color-item").each(function () {
        if (jQuery(this).find(".md-checkbox input").prop("checked")) {
            brandsId.push("".concat(jQuery(this).find(".md-checkbox input").attr("data-brand-id")));
        }
    });
    console.log(brandsId);
    return brandsId;
} // check all active search-main-bar sorts


function activeSort() {
    var sortId = null;
    jQuery(".search-page .search-main-bar .filters .filter").each(function () {
        if (jQuery(this).hasClass("active")) {
            sortId = jQuery(this).attr("data-sort-id");
        }
    });
    return sortId;
} // check all filters element for if user use filter


function searchPageAjaxFilter() {
    var params = {};
    var priceMinSet = parseInt(slider.noUiSlider.get()[0]);
    var priceMaxSet = parseInt(slider.noUiSlider.get()[1]);
    var searchInResultInput = jQuery(".search-page .search-side-bar .search-in-result .search-in-result--input");
    var searchExistProduct = jQuery(".search-page .search-side-bar .existing-pd-box .switch-input");
    var searchReadyProduct = jQuery(".search-page .search-side-bar .ready-pd-box .switch-input");

    if (priceMinSet != min) {
        params.price_min = slider.noUiSlider.get()[0];
    }

    if (priceMaxSet != max) {
        params.price_max = slider.noUiSlider.get()[1];
    }

    if (ifbrandsChekedTrue().length > 0) {
        params.brands = ifbrandsChekedTrue();
    }

    if (activeSort()) {
        params.sort_type = activeSort();
    }

    if (jQuery(searchInResultInput).val() !== "") {
        params.search_result = jQuery(searchInResultInput).val();
    }

    if (searchExistProduct.prop("checked")) {
        params.only_selling = true;
    }

    if (searchReadyProduct.prop("checked")) {
        params.only_ready = true;
    }

    var categorySlug = jQuery(".main").attr('data-category-name');
    var token = jQuery("meta[name='csrf-token']").attr("content");
    params.category_name = categorySlug;
    jQuery.ajax({
        url: '/Product/filter',
        method: "POST",
        dataType: 'html',
        data: params,
        beforeSend: function beforeSend(request) {
            jQuery(".loading-svg").toggleClass("hidden");
            request.setRequestHeader('X-CSRF-TOKEN', token);
        },
        success: function success(response) {
            jQuery(".search-page .products .products__inner .product").remove();
            jQuery(".search-page .products .products__inner").append(response);
            jQuery(".loading-svg").toggleClass("hidden");
        },
        error: function error() {
            jQuery(".loading-svg").toggleClass("hidden");
        }
    });
}

jQuery(document).ready(function () {
    // add all events filters and sorts in search page
    var sorts = jQuery(".search-page .search-main-bar .filters .filter");
    var searchExistProduct = jQuery(".search-page .search-side-bar .existing-pd-box .switch-input");
    var priceLimiter = jQuery(".search-page .search-side-bar .price-slider-box .button-filter .button-filter__inner");
    var searchReadyProduct = jQuery(".search-page .search-side-bar .ready-pd-box .switch-input");
    var brandsFilter = jQuery(".search-page .search-side-bar .brands-box .brands .brand-item");
    var colorsFilter = jQuery(".search-page .search-side-bar .color-box .colors .color-item");
    var searchInResultBtn = jQuery(".search-page .search-side-bar .search-box .search-in-result .search-in-result--btn");
    jQuery.merge(sorts, priceLimiter, searchInResultBtn).click(function () {
        searchPageAjaxFilter();
    });
    jQuery.merge(searchExistProduct, searchReadyProduct).change(function () {
        searchPageAjaxFilter();
    });
    jQuery(brandsFilter).change(function () {
        searchPageAjaxFilter();
    });
    jQuery(searchInResultBtn).click(function () {
        searchPageAjaxFilter();
    }); // add quantity product in cart page

    var cartItem = jQuery(".cart-page .cart-main-bar .cart-main-bar__inner .cart-item .cart-item__inner");
    var addCartItem = jQuery(cartItem).find(".mdi-plus");
    var removeCartItem = jQuery(cartItem).find(".mdi-minus");
    jQuery(addCartItem).click(function () {
        var pNumberReg = /[\u06F0-\u06F90-9]+/;
        var quantityCartItemString = jQuery(this).parent().parent().find(".value").text(); //console.log(quantityCartItemString);

        var pdId = parentByClass(jQuery(this), "cart-item").attr("data-pd-id");
        var quantity = parseInt(persianParseInt(pNumberReg.exec(quantityCartItemString)[0]));

        if (quantity + 1 > 5) {
            showSnackbar("امکان سفارش بیشتر از ۵ عدد برای هر محصول وجود ندارد!");
            return;
        }

        $.ajax({
            type: 'POST',
            url: 'check-cart.php',
            data: {
                pd_id: pdId,
                pd_quantity: quantity
            },
            beforeSend: function beforeSend() {
                jQuery(".loading-svg").toggleClass("hidden");
            },
            success: function success() {
                jQuery(".loading-svg").toggleClass("hidden");
            },
            error: function error() {
                jQuery(".loading-svg").toggleClass("hidden");
            }
        });
        quantity = quantity + 1;
        jQuery(this).parent().parent().find(".value").html("".concat(quantity.toLocaleString('fa'), " \u0639\u062F\u062F "));
    }); // remove quantity product in cart page

    jQuery(removeCartItem).click(function () {
        var pNumberReg = /[\u06F0-\u06F90-9]+/;
        var quantityCartItemString = jQuery(this).parent().parent().find(".value").text();
        var pdId = parentByClass(jQuery(this), "cart-item").attr("data-pd-id"); //console.log(quantityCartItemString);

        var quantity = parseInt(persianParseInt(pNumberReg.exec(quantityCartItemString)[0]));

        if (quantity - 1 < 1) {
            showSnackbar("تعداد محصول سفارش شما صفر نمیتواند باشد!");
            return;
        }

        $.ajax({
            type: 'POST',
            url: 'check-cart.php',
            data: {
                pd_id: pdId,
                pd_quantity: quantity
            },
            beforeSend: function beforeSend() {
                jQuery(".loading-svg").toggleClass("hidden");
            },
            success: function success() {
                jQuery(".loading-svg").toggleClass("hidden");
            },
            error: function error() {
                jQuery(".loading-svg").toggleClass("hidden");
            }
        });
        quantity = quantity - 1;
        jQuery(this).parent().parent().find(".value").html("".concat(quantity.toLocaleString('fa'), " \u0639\u062F\u062F "));
    }); // remove product with close icon in cart page

    jQuery(".cart-page .cart-items .cart-item .cart-item__inner .close").click(function () {
        var thiz = jQuery(this);
        var pdId = parentByClass(jQuery(this), "cart-item").attr("data-pd-id");
        jQuery.ajax({
            url: 'check-cart.php',
            type: 'POST',
            data: {
                pd_id: pdId
            },
            success: function success() {
                jQuery(".loading-svg").toggleClass("hidden");
                parentByClass(thiz, "cart-item").remove();
            },
            error: function error() {
                jQuery(".loading-svg").toggleClass("hidden");
                parentByClass(thiz, "cart-item").remove();
            },
            beforeSend: function beforeSend() {
                jQuery(".loading-svg").toggleClass("hidden");
            }
        });
    });

  jQuery(".compare-page .compare-page__inner .products .products__inner .product  .product__inner .close").click(function () {
        var thiz = jQuery(this);
        var pdId = parentByClass(jQuery(this), "product").attr("data-pd-id");
        jQuery.ajax({
            url: 'check-cart.php',
            type: 'POST',
            data: {
                pd_id: pdId
            },
            success: function success() {
                jQuery(".loading-svg").toggleClass("hidden");
                parentByClass(thiz, "product").remove();
            },
            error: function error() {
                jQuery(".loading-svg").toggleClass("hidden");
                parentByClass(thiz, "product").remove();
            },
            beforeSend: function beforeSend() {
                jQuery(".loading-svg").toggleClass("hidden");
            }
        });
    });

    // open dialog registration / login

    jQuery(".header .reg-log .reg-log--text").click(function () {
        if (jQuery("#reg-log__dialog .login__form").length) {
            jQuery(".reg-log__dialog .reg-log__dialog__inner").css("display", "flex");
            return;
        }

        if (jQuery("#reg-log__dialog .register__form").length) {
            jQuery("#reg-log__dialog .register__form").remove();
            jQuery("#reg-log__dialog .log__ref").remove();
        } else if (jQuery("#reg-log__dialog .forget-password").length) {
            jQuery("#reg-log__dialog .forget-password__form").remove();
            jQuery("#reg-log__dialog .log__ref").remove();
        }

        jQuery("#reg-log__dialog .dialog__content .row").append("<div class=\"login__form col-md-8\"><script>var account_image =  \"./asset/images/account.png\";jQuery(\"#account--image\").attr(\"src\", account_image);</script><div class=\"login__form__inner\"> <h4 class=\"title\">\u0648\u0631\u0648\u062F \u0628\u0647 \u062D\u0633\u0627\u0628 \u06A9\u0627\u0631\u0628\u0631\u06CC</h4> <div class=\"username\"> <span class=\"mdi mdi-account\"></span> <input placeholder=\"\u0646\u0627\u0645 \u06A9\u0627\u0631\u0628\u0631\u06CC\" type=\"text\" class=\"username--inp\"> </div><div class=\"password\"> <span class=\"mdi mdi-lock\"></span> <input placeholder=\"\u0631\u0645\u0632 \u0639\u0628\u0648\u0631\" type=\"password\" class=\"password--inp\"> </div><span class=\"forget--password\">\u0641\u0631\u0627\u0645\u0648\u0634\u06CC \u0631\u0645\u0632\u0639\u0628\u0648\u0631</span> <div class=\"submit-login\"> <button class=\"submit-login--btn\">\u0648\u0631\u0648\u062F \u0628\u0647 \u062D\u0633\u0627\u0628 \u06A9\u0627\u0631\u0628\u0631\u06CC</button> </div></div></div><div class=\"reg__ref col-md-4\"> <div class=\"reg__ref__inner\"> <div class=\"reg--image\"><img id=\"account--image\" src=\"\" alt=\"\"></div><div class=\"reg--text\">\u0628\u0631\u0627\u06CC \u062E\u0631\u06CC\u062F\u06A9\u0631\u062F\u0646 \u0648 \u0622\u06AF\u0627\u0647\u06CC \u0627\u0632 \u0627\u0637\u0644\u0627\u0639\u0627\u062A \u06A9\u0627\u0631\u0628\u0631\u06CC \u062E\u0648\u062F \u062F\u0631 پروکالا \u062B\u0628\u062A \u0646\u0627\u0645 \u06A9\u0646\u06CC\u062F.</div><div class=\"reg-btn\"><a id=\"reg-btn__inner\" href=\"#\">\u062B\u0628\u062A \u0646\u0627\u0645</a></div></div></div>");
        jQuery(".reg-log__dialog .reg-log__dialog__inner").css("display", "flex");
    }); // open dialog for registration

    var reg_open_dialog = jQuery("#reg-btn__inner");
    var body = jQuery("body");
    body.on("click", "#reg-btn__inner", function () {
        jQuery("#reg-log__dialog .login__form").remove();
        jQuery("#reg-log__dialog .reg__ref").remove();
        jQuery("#reg-log__dialog .dialog__content .row").append("<div class=\"register__form col-md-8\"> <script>var account_image=\"./asset/images/account.png\"; jQuery(\"#account--image\").attr(\"src\", account_image); </script> <div class=\"register__form__inner\"><h4 class=\"title\">\u062B\u0628\u062A\u200C\u0646\u0627\u0645 \u062F\u0631 پروکالا</h4><span class=\"show-status\"></span> <div class=\"mobile\"><span class=\"mdi mdi-phone\"></span> <input maxlength=\"11\" minlength=\"11\" id=\"reg-username\" placeholder=\"\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06CC\u0644\" type=\"text\" name=\"reg-mobile--inp\" class=\"mobile--inp\"></div><div class=\"email\"><span class=\"mdi mdi-email\"></span> <input id=\"reg-email\" placeholder=\"\u067E\u0633\u062A \u0627\u0644\u06A9\u062A\u0631\u0648\u0646\u06CC\u06A9\u06CC\" type=\"email\" name=\"reg-email--inp\" class=\"email--inp\"></div><div class=\"password\"><span class=\"mdi mdi-lock\"></span> <input id=\"reg-password\" placeholder=\"\u0631\u0645\u0632 \u0639\u0628\u0648\u0631\" type=\"password\" name=\"reg-password--inp\" class=\"password--inp\"></div><div class=\"privacy-policy-check\"><span class=\"arrow mdi mdi-arrow-left-bold\"></span><label class=\"privacy-policy-check__inner\" for=\"privacy-policy-check\"> <span class=\"md-checkbox\"> <input class=\"privacy-policy-check--inp\" name=\"reg-privacy-policy-check--inp\" id=\"privacy-policy-check\" type=\"checkbox\"> <label for=\"privacy-policy-check\">\u0633\u06CC\u0627\u0633\u062A \u062D\u0631\u06CC\u0645 \u062E\u0635\u0648\u0635\u06CC<a href=\"http://proKala.com/privacy-policy\">پروکالا</a>\u0631\u0627 \u062E\u0648\u0627\u0646\u062F\u0645 \u0648 \u0622\u0646 \u0631\u0627 \u0642\u0628\u0648\u0644 \u062F\u0627\u0631\u0645</label> </span> </label></div><div class=\"submit-register\"> <button class=\"submit-register--btn\"><span class=\"text\">\u062B\u0628\u062A\u200C\u0646\u0627\u0645 \u062F\u0631 پروکالا</span> <span class=\"mdi mdi-loading\"></span></button> </div></div></div><div class=\"log__ref col-md-4\"> <div class=\"log__ref__inner\"> <div class=\"log--image\"><img id=\"account--image\" src=\"\" alt=\"\"></div><div class=\"log--text\">\u0642\u0628\u0644\u0627 \u062B\u0628\u062A\u200C\u0646\u0627\u0645 \u06A9\u0631\u062F\u0647\u200C\u0627\u06CC\u062F\u061F</div><div class=\"log-btn\"><a id=\"log-btn__inner\" href=\"#\">\u0648\u0631\u0648\u062F \u0628\u0647 پروکالا</a></div></div></div>");
    }); // open dialog for login

    body.on("click", "#log-btn__inner", function () {
        jQuery("#reg-log__dialog .register__form").remove();
        jQuery("#reg-log__dialog .log__ref").remove();
        jQuery("#reg-log__dialog .forget-password__form").remove();
        jQuery("#reg-log__dialog .dialog__content .row").append("<div class=\"login__form col-md-8\"> <script>var account_image=\"./asset/images/account.png\"; jQuery(\"#account--image\").attr(\"src\", account_image);</script> <div class=\"login__form__inner\"><h4 class=\"title\">\u0648\u0631\u0648\u062F \u0628\u0647 \u062D\u0633\u0627\u0628 \u06A9\u0627\u0631\u0628\u0631\u06CC</h4><span class=\"show-status\"></span> <div class=\"username\"><span class=\"mdi mdi-phone\"></span> <input placeholder=\"\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06CC\u0644\" type=\"text\" name=\"log-username--inp\" class=\"username--inp\"></div><div class=\"password\"><span class=\"mdi mdi-lock\"></span> <input placeholder=\"\u0631\u0645\u0632 \u0639\u0628\u0648\u0631\" type=\"password\" name=\"log-password--inp\" class=\"password--inp\"></div><span class=\"forget--password\">\u0641\u0631\u0627\u0645\u0648\u0634\u06CC \u0631\u0645\u0632\u0639\u0628\u0648\u0631</span> <div class=\"submit-login\"> <button class=\"submit-login--btn\"><span class=\"text\">\u0648\u0631\u0648\u062F \u0628\u0647 \u062D\u0633\u0627\u0628 \u06A9\u0627\u0631\u0628\u0631\u06CC</span> <span class=\"mdi mdi-loading\"></span></button> </div></div></div><div class=\"reg__ref col-md-4\"> <div class=\"reg__ref__inner\"> <div class=\"reg--image\"><img id=\"account--image\" src=\"\" alt=\"\"></div><div class=\"reg--text\">\u0628\u0631\u0627\u06CC \u062E\u0631\u06CC\u062F\u06A9\u0631\u062F\u0646 \u0648 \u0622\u06AF\u0627\u0647\u06CC \u0627\u0632 \u0627\u0637\u0644\u0627\u0639\u0627\u062A \u06A9\u0627\u0631\u0628\u0631\u06CC \u062E\u0648\u062F \u062F\u0631 \u0627\u06CC\u0631\u0627\u0645\u0627\u0634\u06CC\u0646 \u062B\u0628\u062A \u0646\u0627\u0645 \u06A9\u0646\u06CC\u062F.</div><div class=\"reg-btn\"><a id=\"reg-btn__inner\" href=\"#\">\u062B\u0628\u062A \u0646\u0627\u0645</a></div></div></div>");
    }); //open forget-password form

    body.on("click", "#reg-log__dialog .forget--password", function () {
        console.log("awasa");
        jQuery("#reg-log__dialog .login__form").remove();
        jQuery("#reg-log__dialog .reg__ref").remove();
        jQuery("#reg-log__dialog .dialog__content .row").append("<div class=\"forget-password__form col-md-8\"> <div class=\"forget-password__form__inner\"><h4 class=\"title\">\u0628\u0627\u0632\u06CC\u0627\u0628\u06CC \u0631\u0645\u0632 \u0639\u0628\u0648\u0631</h4><span class=\"show-status\"></span> <div class=\"forget-password\"><span class=\"mdi mdi-account\"></span> <input id=\"reg-username\" name=\"forget-password--inp\" placeholder=\"\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06CC\u0644 \u0634\u0645\u0627\" type=\"text\" class=\"forget-password--inp\"></div><div class=\"submit-forget-password\"> <button class=\"submit-forget-password--btn\"><span class=\"text\">\u0628\u0627\u0632\u06CC\u0627\u0628\u06CC \u0631\u0645\u0632 \u0639\u0628\u0648\u0631</span> <span class=\"mdi mdi-loading hidden\"></span></button> </div></div></div><div class=\"log__ref col-md-4\"> <div class=\"log__ref__inner\"> <div class=\"log--image\"><img id=\"account--image\" src=\"./asset/images/account.png\" alt=\"\"></div><div class=\"log--text\">\u0642\u0628\u0644\u0627 \u062B\u0628\u062A&zwnj;\u0646\u0627\u0645 \u06A9\u0631\u062F\u0647&zwnj;\u0627\u06CC\u062F\u061F</div><div class=\"log-btn\"><a id=\"log-btn__inner\" href=\"#\">\u0648\u0631\u0648\u062F \u0628\u0647 پروکالا</a></div></div></div>");
    });
}); // config snackbar

jQuery(".snackbar .figure-out").click(function () {
    jQuery(".snackbar").css("transform", "translateY(-60px)");
});

function showSnackbar(message) {
    var snackbar = jQuery(".snackbar");
    jQuery(snackbar).find(".title").html(message);
    setTimeout(function () {
        jQuery(snackbar).css("transform", "translateY(-60px)");
    }, 4000);
    jQuery(snackbar).css("transform", "translateY(0px)");
}

var menus = jQuery('.header .header__inner .main__menu .main__menu__inner .items .item');
menus.hover(function () {
    // console.log(111);
    menus.each(function () {
        jQuery(this).find(".underLine").removeClass("unline--active");
        jQuery(this).removeClass("menu-item--active");
    });
    jQuery(".sub__menu").each(function () {
        jQuery(this).hide();
    });
    jQuery(this).addClass("menu-item--active");
    jQuery(this).find(".underLine").addClass("unline--active");
    var menuItemLink = jQuery(this).find("a");
    var elm = this.getAttribute('data-id');
    jQuery("#sub__menu-" + elm).show();
    jQuery(".menu__overlay--bg").addClass("mbg-is-active");
}, function () {
    if (jQuery(".main__menu").find(".sub__menu:hover").length > 0) { //console.log("are");
    } else {
        menus.removeClass("menu-item--active");
        var menuItemLinkActive = menus.find(".menu-item-link--active");
        menuItemLinkActive.removeClass("menu-item-link--active");
        jQuery(".menu__overlay--bg").removeClass("mbg-is-active");
        menus.each(function () {
            jQuery(this).find(".underLine").removeClass("unline--active");
        });
        jQuery(".sub__menu").hide();
    }
});
jQuery(".sub__menu").hover(function () {
}, function () {
    //console.log("aaaa");
    menus.removeClass("menu-item--active");
    var menuItemLinkActive = menus.find(".menu-item-link--active");
    menuItemLinkActive.removeClass("menu-item-link--active");
    jQuery(".menu__overlay--bg").removeClass("mbg-is-active");
    menus.each(function () {
        jQuery(this).find(".underLine").removeClass("unline--active");
    });
    jQuery(".sub__menu").hide();
}); // convert persian number to latin number

var PERSIAN_NUMERALS = '۰'.charCodeAt(0);

function numeralParseInt(zero, str) {
    var digits = new Array(str.length);

    for (var i = 0; i < str.length; i++) {
        digits[i] = str.charCodeAt(i);

        if (zero <= digits[i] && digits[i] < zero + 10) {
            digits[i] -= zero - 48; // '0' = ASCII 48
        }
    }

    return String.fromCharCode.apply(null, digits);
}

function persianParseInt(str) {
    return numeralParseInt(PERSIAN_NUMERALS, str);
} // function convert tomans currency


function tomansCurrency(num) {
    num = num.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,");
    return num;
}

jQuery(document).ready(function () {
    // convert all en number to persian number
    jQuery("body").persiaNumber(); // close modal login / register on click close btn

    jQuery("#reg-log__dialog  .dialog__content .header .close-dialog").click(function () {
        jQuery(".reg-log__dialog .reg-log__dialog__inner").css("display", "none");
    });
    var body = jQuery("body"); // login ajax POST method

    body.on("click", ".login__form .submit-login--btn", function () {
        var mobile = jQuery(".login__form .username--inp");
        var password = jQuery(".login__form .password--inp");
        var rememberMe = false;
        var status = false;
        jQuery(".login__form .remember-me .remember-me--inp").prop("checked") ? rememberMe = true : rememberMe = false;

        if (!checkErrorInput(mobile, "mobile")) {
            var right = getRightPos(mobile, "mobile");
            mobile.parent().append("<span class=\"check-inp--status\" style=\"right: ".concat(right + "px", "\">\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06CC\u0644 \u0631\u0627 \u0628\u0647 \u062F\u0631\u0633\u062A\u06CC \u0648\u0627\u0631\u062F \u06A9\u0646\u06CC\u062F!</span>"));
            status = false;
        }

        if (!checkErrorInput(password, "password")) {
            var _right = getRightPos(password, "password");

            password.parent().append("<span class=\"check-inp--status\" style=\"right: ".concat(_right + "px", "\">\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0628\u0627\u06CC\u062F  \u062A\u0631\u06A9\u06CC\u0628\u06CC \u0627\u0632 \u062D\u0631\u0648\u0641 \u0648 \u0627\u0639\u062F\u0627\u062F \u0628\u06CC\u0646 \u06F8 \u062A\u0627 \u06F1\u06F5 \u06A9\u0627\u0631\u0627\u06A9\u062A\u0631 \u0628\u0627\u0634\u062F.</span>"));
            status = false;
        }

        if (status === false) {
            return;
        }

        jQuery.ajax({
            type: "POST",
            url: "check-account.php",
            data: {
                username: username.val(),
                password: password.val(),
                remember_me: rememberMe
            },
            success: function success(response) {
                jQuery(".reg-log__dialog__inner .show-status").html("".concat(response.user_display_name, " \u0639\u0632\u06CC\u0632 \u062E\u0648\u0634 \u0622\u0645\u062F\u06CC\u062F. \u0644\u0637\u0641\u0627 \u0686\u0646\u062F \u0644\u062D\u0638\u0647 \u0635\u0628\u0631 \u06A9\u0646\u06CC\u062F ")).addClass("success");
                jQuery(".reg-log__dialog__inner .mdi-loading").removeClass("mdi-spin-faster").addClass("hidden");
            },
            error: function error() {
                jQuery(".reg-log__dialog__inner .show-status").html("خطایی در ارتباط با سرور رخ داده است!").addClass("danger");
                jQuery(".reg-log__dialog__inner .mdi-loading").removeClass("mdi-spin-faster").addClass("hidden");
            },
            beforeSend: function beforeSend() {
                jQuery(".reg-log__dialog__inner .mdi-loading").removeClass("hidden").addClass("mdi-spin-faster");
            }
        });
    }); // registration ajax POST method

    body.on("click", ".register__form .submit-register--btn", function () {
        var status = true;

        if (!jQuery(".register__form .privacy-policy-check--inp").prop("checked")) {
            jQuery(".reg-log__dialog__inner .show-status").html("\u0645\u0648\u0627\u0641\u0642\u062A \u0628\u0627 \u0633\u06CC\u0627\u0633\u062A \u062D\u0631\u06CC\u0645 \u062E\u0635\u0648\u0635\u06CC \u0648\u0628 \u0633\u0627\u06CC\u062A \u0627\u0644\u0632\u0627\u06CC\u0645\u06CC \u0645\u06CC\u0628\u0627\u0634\u062F.").addClass("danger");
            jQuery(".register__form .privacy-policy-check .arrow").css("animation", "privacy-policy-opacity 1s 3 ease");
            setTimeout(function () {
                jQuery(".register__form .privacy-policy-check .arrow").css("animation", "unset");
            }, 3000);
            status = false;
        }

        var mobile = jQuery(".register__form .mobile--inp");
        var email = jQuery(".register__form .email--inp");
        var password = jQuery(".register__form .password--inp");

        if (mobile.parent().find(".check-inp--status").length) {
            mobile.parent().find(".check-inp--status").remove();
        }

        if (!checkErrorInput(mobile, "mobile")) {
            var right = getRightPos(mobile, "mobile");
            mobile.parent().append("<span class=\"check-inp--status\" style=\"right: ".concat(right + "px", "\">\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06CC\u0644 \u0631\u0627 \u0628\u0647 \u062F\u0631\u0633\u062A\u06CC \u0648\u0627\u0631\u062F \u06A9\u0646\u06CC\u062F!</span>"));
            status = false;
        }

        if (email.parent().find(".check-inp--status").length) {
            email.parent().find(".check-inp--status").remove();
        }

        if (!checkErrorInput(email, "email")) {
            var _right2 = getRightPos(email, "email");

            email.parent().append("<span class=\"check-inp--status\" style=\"right: ".concat(_right2 + "px", "\">\u0622\u062F\u0631\u0633 \u0627\u06CC\u0645\u06CC\u0644 \u0631\u0627 \u0628\u0647 \u062F\u0631\u0633\u062A\u06CC \u0648\u0627\u0631\u062F \u06A9\u0646\u06CC\u062F!</span>"));
            status = false;
        }

        if (!checkErrorInput(password, "password")) {
            var _right3 = getRightPos(password, "password");

            password.parent().append("<span class=\"check-inp--status\" style=\"right: ".concat(_right3 + "px", "\">\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0628\u0627\u06CC\u062F  \u062A\u0631\u06A9\u06CC\u0628\u06CC \u0627\u0632 \u062D\u0631\u0648\u0641 \u0648 \u0627\u0639\u062F\u0627\u062F \u0628\u06CC\u0646 \u06F8 \u062A\u0627 \u06F1\u06F5 \u06A9\u0627\u0631\u0627\u06A9\u062A\u0631 \u0628\u0627\u0634\u062F.</span>"));
            status = false;
        }

        if (status === false) {
            return;
        }

        var data = {};
        data.email = email.val();
        data.passwordd = password.val();
        data.mobile = mobile.val();
        jQuery.ajax({
            type: "POST",
            url: "check-account.php",
            data: {
                mobile: data.mobile,
                email: data.email
            },
            success: function success(response) {
                /*jQuery(".reg-log__dialog__inner .show-status").html(`${response.user_display_name} عزیز خوش آمدید. لطفا چند لحظه صبر کنید `).addClass("success");*/
                jQuery(".reg-log__dialog__inner .mdi-loading").removeClass("mdi-spin-faster").addClass("hidden");
                var registerForm = jQuery(".reg-log__dialog__inner .register__form");
                var showElement = jQuery(registerForm).find(".show-status");
                registerForm.find(".mobile").addClass("hidden");
                registerForm.find(".email").addClass("hidden");
                registerForm.find(".password").addClass("hidden");
                registerForm.find(".privacy-policy-check").addClass("hidden");
                registerForm.find(".submit-register").addClass("hidden");
                registerForm.find(".register__form__inner").append("<div class=\"verification\"><input maxlength=\"5\" type=\"text\" autofocus class=\"verification--inp\" placeholder=\"_ _ _ _ _\"></div><div class=\"resend-code\"><span class=\"text hidden\">\u0627\u0631\u0633\u0627\u0644 \u062F\u0648\u0628\u0627\u0631\u0647 \u06A9\u062F</span><span class=\"time-left\"><span class=\"time-left--text\">\u0627\u0631\u0633\u0627\u0644 \u0645\u062C\u062F\u062F \u06A9\u062F \u062A\u0627\u06CC\u06CC\u062F</span><span class=\"time-left--counter\"></span></span></div><div class=\"submit-verification\"><button class=\"submit-verification--btn\"><span class=\"text\">\u062A\u0627\u06CC\u06CC\u062F \u06A9\u062F</span><span class=\"mdi mdi-loading hidden\"></span></button></div>");
                sendVerificationCode(data, registerForm, showElement);
            },
            error: function error(response) {
                jQuery(".reg-log__dialog__inner .show-status").html("این شماره قبلا ثبت شده است!").addClass("danger");
                jQuery(".reg-log__dialog__inner .mdi-loading").removeClass("mdi-spin-faster").addClass("hidden");
            },
            beforeSend: function beforeSend() {
                jQuery(".reg-log__dialog__inner .mdi-loading").removeClass("hidden").addClass("mdi-spin-faster");
            }
        });
    }); // resend verification code

    body.on("click", ".reg-log__dialog__inner .register__form .resend-code .text", function () {
        var mobile = jQuery(".register__form .mobile--inp").val();
        var email = jQuery(".register__form .email--inp").val();
        var data = {};
        data.email = email;
        data.mobile = mobile;
        var registerForm = jQuery(".reg-log__dialog__inner .register__form");
        var showElement = jQuery(registerForm).find(".show-status");
        sendVerificationCode(data, registerForm, showElement);
    }); // final registration state with send verification code to server by user

    body.on("click", ".reg-log__dialog__inner .register__form .submit-verification--btn", function () {
        var mobile = jQuery(".register__form .mobile--inp");
        var email = jQuery(".register__form .email--inp");
        var password = jQuery(".register__form .password--inp");
        var verificationCode = jQuery(".register__form .verification--inp");
        jQuery.ajax({
            type: "POST",
            url: "check-account.php",
            data: {
                mobile: mobile.val(),
                email: email.val(),
                password: password.val(),
                verification_code: verificationCode.val()
            },
            success: function success(response) {
                jQuery(".reg-log__dialog__inner .show-status").html(" \u06A9\u0627\u0631\u0628\u0631 \u062E\u0648\u0634 \u0622\u0645\u062F\u06CC\u062F. \u0644\u0637\u0641\u0627 \u0686\u0646\u062F \u0644\u062D\u0638\u0647 \u0635\u0628\u0631 \u06A9\u0646\u06CC\u062F ").addClass("success");
                jQuery(".reg-log__dialog__inner .mdi-loading").removeClass("mdi-spin-faster").addClass("hidden");
            },
            error: function error(response) {
                jQuery(".reg-log__dialog__inner .show-status").html("کد تایید شما اشتباه است. دوباره سعی کنید!").addClass("danger");
                jQuery(".reg-log__dialog__inner .mdi-loading").removeClass("mdi-spin-faster").addClass("hidden");
            },
            beforeSend: function beforeSend() {
                jQuery(".reg-log__dialog__inner .mdi-loading").removeClass("hidden").addClass("mdi-spin-faster");
            }
        });
    }); // forget-password request ajax post

    body.on("click", ".forget-password__form .forget-password__form__inner .submit-forget-password--btn", function () {
        var status = true;
        var mobile = jQuery(".forget-password__form .forget-password__form__inner .forget-password--inp");

        if (!checkErrorInput(mobile, "mobile")) {
            var right = getRightPos(mobile, "mobile");
            mobile.parent().append("<span class=\"check-inp--status\" style=\"right: ".concat(right + "px", "\">\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06CC\u0644 \u0645\u0639\u062A\u0628\u0631 \u0646\u06CC\u0633\u062A!</span>"));
            status = false;
        }

        if (status === false) {
            return;
        }

        jQuery.ajax({
            type: "POST",
            url: 'forget-password.php',
            data: {
                mobile: mobile.val()
            },
            success: function success() {
                jQuery(".reg-log__dialog__inner .mdi-loading").removeClass("mdi-spin-faster").addClass("hidden");
                mobile.parent().addClass("hidden");
                var forgetPasswordForm = jQuery(".forget-password__form");
                forgetPasswordForm.find(".submit-forget-password").addClass("hidden");
                forgetPasswordForm.find(".forget-password__form__inner").append("<div class=\"verification\"><input maxlength=\"5\" type=\"text\" autofocus class=\"verification--inp\" placeholder=\"_ _ _ _ _\"></div><div class=\"resend-code\"><span class=\"text hidden\">\u0627\u0631\u0633\u0627\u0644 \u062F\u0648\u0628\u0627\u0631\u0647 \u06A9\u062F</span><span class=\"time-left\"><span class=\"time-left--text\">\u0627\u0631\u0633\u0627\u0644 \u0645\u062C\u062F\u062F \u06A9\u062F \u062A\u0627\u06CC\u06CC\u062F</span><span class=\"time-left--counter\"></span></span></div><div class=\"submit-verification\"><button class=\"submit-verification--btn\"><span class=\"text\">\u062A\u0627\u06CC\u06CC\u062F \u06A9\u062F</span><span class=\"mdi mdi-loading hidden\"></span></button></div>");
                var data = {};
                data.mobile = mobile.val();
                var showElement = jQuery(forgetPasswordForm).find(".show-status");
                sendVerificationCode(data, forgetPasswordForm, showElement);
            },
            error: function error() {
                jQuery(".reg-log__dialog__inner .mdi-loading").removeClass("mdi-spin-faster").addClass("hidden");
            },
            beforeSend: function beforeSend() {
                jQuery(".reg-log__dialog__inner .mdi-loading").removeClass("hidden").addClass("mdi-spin-faster");
            }
        });
    }); // resend verification code for forget-password request

    body.on("click", ".reg-log__dialog__inner .forget-password__form .resend-code .text", function () {
        var mobile = jQuery(".forget-password__form .forget-password--inp").val();
        var data = {};
        data.mobile = mobile;
        var forgetPasswordForm = jQuery(".reg-log__dialog__inner .forget-password__form");
        var showElement = jQuery(forgetPasswordForm).find(".show-status");
        sendVerificationCode(data, forgetPasswordForm, showElement);
    });
    body.on("click", ".reg-log__dialog__inner .forget-password__form .submit-verification .submit-verification--btn", function () {
        var verification_code = jQuery(".forget-password__form .verification--inp").val();
        var mobile = jQuery(".forget-password__form .forget-password--inp").val();
        var forgetPasswordForm = jQuery(".reg-log__dialog__inner .forget-password__form");
        jQuery.ajax({
            type: "POST",
            url: "check-forget-verification",
            data: {
                verification_code: verification_code,
                mobile: mobile
            },
            dataType: "json",
            success: function success() {
                jQuery(".reg-log__dialog__inner .mdi-loading").removeClass("mdi-spin-faster").addClass("hidden");
                forgetPasswordForm.find(".verification").addClass("hidden");
                forgetPasswordForm.find(".submit-verification").addClass("hidden");
                forgetPasswordForm.find(".resend-code").addClass("hidden");
                forgetPasswordForm.find(".forget-password__form__inner").append("<div class=\"password-one\"><span class=\"mdi mdi-lock\"></span><input  type=\"text\"  class=\"password-one--inp\" placeholder=\"\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u062C\u062F\u06CC\u062F\"></div><div class=\"password-two\"><span class=\"mdi mdi-lock\"></span><input  type=\"password\"  class=\"password-two--inp\" placeholder=\"\u062A\u06A9\u0631\u0627\u0631 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u062C\u062F\u06CC\u062F\"></div><div class=\"submit-change-password\"><button class=\"submit-change-password--btn\"><span class=\"text\">\u062B\u0628\u062A \u0631\u0645\u0632 \u0639\u0628\u0648\u0631</span><span class=\"mdi mdi-loading hidden\"></span></button></div>");
            },
            error: function error() {
                forgetPasswordForm.find(".verification").addClass("hidden");
                forgetPasswordForm.find(".submit-verification").addClass("hidden");
                forgetPasswordForm.find(".resend-code").addClass("hidden");
                forgetPasswordForm.find(".forget-password__form__inner").append("<div class=\"password-one\"><span class=\"mdi mdi-lock\"></span><input  type=\"text\"  class=\"password-one--inp\" placeholder=\"\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u062C\u062F\u06CC\u062F\"></div><div class=\"password-two\"><span class=\"mdi mdi-lock\"></span><input  type=\"password\"  class=\"password-two--inp\" placeholder=\"\u062A\u06A9\u0631\u0627\u0631 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u062C\u062F\u06CC\u062F\"></div><div class=\"submit-change-password\"><button class=\"submit-change-password--btn\"><span class=\"text\">\u062B\u0628\u062A \u0631\u0645\u0632 \u0639\u0628\u0648\u0631</span><span class=\"mdi mdi-loading hidden\"></span></button></div>");
                jQuery(".reg-log__dialog__inner .mdi-loading").removeClass("mdi-spin-faster").addClass("hidden");
            },
            beforeSend: function beforeSend() {
                jQuery(".reg-log__dialog__inner .mdi-loading").removeClass("hidden").addClass("mdi-spin-faster");
            }
        });
    }); // btn send two password input forget-password

    body.on("click", ".reg-log__dialog__inner .forget-password__form .submit-change-password .submit-change-password--btn", function () {
        var passwordOne = jQuery(".reg-log__dialog__inner .forget-password__form .password-one .password-one--inp");
        var passwordTwo = jQuery(".reg-log__dialog__inner .forget-password__form .password-two .password-two--inp");
        var status = true;

        if (passwordTwo.val() !== passwordOne.val()) {
            jQuery(".reg-log__dialog__inner .show-status").html("رمز شما یکسان نیست دوباره سعی کنید.").addClass("danger");
            status = false;
        }

        if (!checkErrorInput(passwordOne, "password")) {
            var right = getRightPos(passwordOne, "password");
            passwordOne.parent().append("<span class=\"check-inp--status\" style=\"right: ".concat(right + "px", "\">\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0628\u0627\u06CC\u062F  \u062A\u0631\u06A9\u06CC\u0628\u06CC \u0627\u0632 \u062D\u0631\u0648\u0641 \u0648 \u0627\u0639\u062F\u0627\u062F \u0628\u06CC\u0646 \u06F8 \u062A\u0627 \u06F1\u06F5 \u06A9\u0627\u0631\u0627\u06A9\u062A\u0631 \u0628\u0627\u0634\u062F.</span>"));
            status = false;
        }

        if (!checkErrorInput(passwordTwo, "password")) {
            var _right4 = getRightPos(passwordTwo, "password");

            passwordTwo.parent().append("<span class=\"check-inp--status\" style=\"right: ".concat(_right4 + "px", "\">\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0628\u0627\u06CC\u062F  \u062A\u0631\u06A9\u06CC\u0628\u06CC \u0627\u0632 \u062D\u0631\u0648\u0641 \u0648 \u0627\u0639\u062F\u0627\u062F \u0628\u06CC\u0646 \u06F8 \u062A\u0627 \u06F1\u06F5 \u06A9\u0627\u0631\u0627\u06A9\u062A\u0631 \u0628\u0627\u0634\u062F.</span>"));
            status = false;
        }

        if (status === false) {
            return;
        }

        jQuery.ajax({
            url: 'change-password',
            type: 'POST',
            data: {
                password_one: passwordOne.val(),
                password_two: passwordTwo.val()
            },
            success: function success() {
                jQuery(".reg-log__dialog__inner .mdi-loading").removeClass("mdi-spin-faster").addClass("hidden");
                jQuery(".reg-log__dialog__inner .show-status").html("رمز شمت با موفقیت تغییر کرد چند لحظه صبر کنید...").addClass("success");
                setTimeout(function () {
                    window.location.reload();
                }, 2000);
            },
            error: function error() {
                jQuery(".reg-log__dialog__inner .mdi-loading").removeClass("mdi-spin-faster").addClass("hidden");
            },
            beforeSend: function beforeSend() {
                jQuery(".reg-log__dialog__inner .mdi-loading").removeClass("hidden").addClass("mdi-spin-faster");
            }
        });
    }); // config select2

    $('.input-select').select2({
        width: '100%',
        dir: "rtl",
        containerCssClass: "input-select"
    }); // set sticky pos to compare page


    // if (jQuery(".compare-page .compare-page__inner").length > 0) {
    //     var productHeightPointer = jQuery(".compare-page .compare-page__inner .products-height-pointer");
    //     var products = jQuery(".compare-page .compare-page__inner .products");
    //     arrivedElement(productHeightPointer, products, "sticky-compare-products");
    // }

    // close normal-modal

    jQuery(".normal-modal .close").click(function () {
        jQuery(".overlay--bg").css("opacity", "0");
        jQuery(this).parent().parent().addClass("hidden");
    }); // open normal-modal

    jQuery(".compare-page .products .add").click(function () {
        jQuery(".overlay--bg").css("opacity", "1");
        jQuery(".compare-page .normal-modal").removeClass("hidden");
    });
    jQuery(".compare-page .normal-modal .p-compare-list .p-compare-list__inner .item").click(function () {
        var pId = jQuery(this).attr("data-id");
        var ids = [];
        jQuery(".compare-page .products .product").each(function () {
            if (jQuery(this).hasClass("add")) {
            } else {
                ids.push(jQuery(this).attr("data-id"));
            }
        });
        ids.push(pId);
        var url = "";

        for (var id in ids) {
            url += ids[id] + '/';
        }

        window.location.href = "/compare/" + url;
    }); // open lists-address  for adding new address

    body.on("click", ".shipping-page .shipping-page__inner .address-area .change-address", function () {
        jQuery(".shipping-page .address-lists").removeClass("hidden");
        jQuery(".shipping-page .shipping-page__inner .address-area").addClass("hidden");
    }); // open add address dialog

    body.on("click", ".shipping-page .shipping-page__inner .address-area .add-address", function () {
        jQuery(".overlay--bg").css("opacity", "1");
        jQuery(".normal-modal").removeClass("hidden");
    }); // change selected address with ajax and given html

    body.on("click", ".shipping-page .shipping-page__inner .address-lists .address", function () {

        var addressId = jQuery(this).attr("data-id");
        var token = jQuery("meta[name='csrf-token']").attr("content");
        jQuery.ajax({
            url: './add-address.php',
            dataType: 'html',
            data: {
                address_id: addressId,
                token: token
            },

            success: function success(response) {
                jQuery(".shipping-page .shipping-page__inner .address-area .address-area__inner").each(function () {
                    jQuery(this).empty();
                }); /// ***pay attention you must return all elements that are in .address-area__inner

                jQuery(".shipping-page .shipping-page__inner .address-area .address-area__inner").append(response);
                jQuery(".shipping-page .address-lists").addClass("hidden");
                jQuery(".shipping-page .shipping-page__inner .address-area").removeClass("hidden");
                jQuery(".loading-svg").toggleClass("hidden");
            },
            error: function error() {
                jQuery(".loading-svg").toggleClass("hidden");
            },
            beforeSend: function beforeSend(request) {
                jQuery(".loading-svg").toggleClass("hidden");
                request.setRequestHeader('X-CSRF-TOKEN', token);
            }
        });
    }); // close lists-address on close btn

    jQuery(".shipping-page .shipping-page__inner .address-lists .close").click(function () {
        var addressLists = parentByClass(jQuery(this), "address-lists");
        addressLists.addClass("hidden");
        jQuery(".shipping-page .shipping-page__inner .address-area").removeClass("hidden");
    });

    body.on("click", ".shipping-page .shipping-page__inner .address-add-form .submit-add-address input", function () {
        var thiz = jQuery(".shipping-page .shipping-page__inner .address-add-form");
        var getterName = thiz.find(".getter-name--inp");
        var getterMobile = thiz.find(".getter-mobile--inp");
        var getterPostalCode = thiz.find(".getter-postal-code--inp");
        var getterState = thiz.find(".getter-state").find(".input-select");
        var getterCity = thiz.find(".getter-city").find(".input-select");
        var getterAddress = thiz.find(".getter-address--inp");
        var token = jQuery("meta[name='csrf-token']").attr("content");
        jQuery.ajax({
            url: 'add-address-ajax',
            data: {
                token: token,
                name: getterName.val(),
                mobile: getterMobile.val(),
                postal_code: getterPostalCode.val(),
                state: getterState.val(),
                city: getterCity.val(),
                address: getterAddress.val()
            },
            success: function success() {
                jQuery(".shipping-page .shipping-page__inner .address-area .address-area__inner").append(response);
                jQuery(".loading-svg").toggleClass("hidden");
            },
            beforeSend: function beforeSend() {
                jQuery(".loading-svg").toggleClass("hidden");
                request.setRequestHeader('X-CSRF-TOKEN', token);
            }
        });
    }); // open small user dialog in header user-account

    jQuery(".header .reg-log .user-display-name").click(function () {
        jQuery(".header .reg-log .reg-log__logged-in__box").toggleClass("hidden");
    });
}); // send verification code

function sendVerificationCode(data, formEle, showEle) {
    jQuery(formEle).find(showEle).html(" \u06A9\u062F \u062A\u0627\u06CC\u06CC\u062F \u0628\u0647 \u0634\u0645\u0627\u0631\u0647 ".concat(data.mobile, " \u0627\u0631\u0633\u0627\u0644 \u0634\u062F.")).addClass("success");

    if (!formEle.find(".resend-code .text").hasClass("hidden")) {
        formEle.find(".resend-code .text").addClass("hidden");
    }

    if (formEle.find(".resend-code .time-left--text").hasClass("hidden")) {
        formEle.find(".resend-code .time-left--text").removeClass("hidden");
    }

    var timeLeftVerification = formEle.find(".time-left--counter");
    var todayDate = new Date();
    todayDate = todayDate.getFullYear() + '-' + (todayDate.getMonth() + 1) + '-' + todayDate.getDate();
    var todayTime = new Date();
    todayTime = todayTime.getHours() + ":" + (todayTime.getMinutes() + 1) + ":" + todayTime.getSeconds();
    console.log(todayTime, todayDate);
    var oneMinuteNext = todayDate + ' ' + todayTime;
    timeLeftCounter(oneMinuteNext, timeLeftVerification, "", false);
    setTimeout(function () {
        jQuery(formEle).find(".time-left--text").addClass("hidden");
        jQuery(formEle).find(".resend-code .text").removeClass("hidden");
    }, 17000);
    jQuery.ajax({
        url: '/user/active-user',
        type: 'POST',
        data: {
            mobile: data.mobile,
            email: data.email
        }
    });
}

function getRightPos(element) {
    var parent = element.parent();
    var parentWidth = element.parent().width();
    var parentLeft = parent.offset().left;
    var elementLeft = element.offset().left;
    var elementWidth = element.outerWidth();
    var elementLeftFromParent = elementLeft - parentLeft;
    return parentWidth - elementWidth - elementLeftFromParent;
}

function checkErrorInput(element, type) {
    var status = true;
    var textVal = element.val();

    if (type === "email") {
        var pattern = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
        status = pattern.test(textVal);
    } else if (type === "mobile") {
        var _pattern = new RegExp('^(?:(?:(?:\\+?|00)(98))|(0))?((?:90|91|92|93|99)[0-9]{8})$', 'i');

        status = _pattern.test(textVal);
    } else if (type === "password") {
        var _pattern2 = /^[a-zA-Z0-9_-]{8,15}$/;
        status = _pattern2.test(textVal);
    }

    return status;
} //


function arrivedElement(referenceElement, element, _class) {
    jQuery(window).scroll(function () {
        var hT = jQuery(referenceElement).offset().top,
            hH = jQuery(referenceElement).outerHeight(),
            wH = jQuery(window).height(),
            wS = jQuery(this).scrollTop();

        if (wS > 250) {
            jQuery(element).addClass(_class);
        } else {
            jQuery(element).removeClass(_class);
        }
    });
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,